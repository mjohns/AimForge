// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: scenario.proto
// Protobuf C++ Version: 5.29.3

#include "scenario.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace aim {

inline constexpr SimpleRoom::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        height_{0},
        width_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SimpleRoom::SimpleRoom(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SimpleRoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleRoomDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleRoomDefaultTypeInternal() {}
  union {
    SimpleRoom _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleRoomDefaultTypeInternal _SimpleRoom_default_instance_;

inline constexpr Room::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Room::Room(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomDefaultTypeInternal() {}
  union {
    Room _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomDefaultTypeInternal _Room_default_instance_;
}  // namespace aim
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_scenario_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_scenario_2eproto = nullptr;
const ::uint32_t
    TableStruct_scenario_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::aim::SimpleRoom, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::SimpleRoom, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::SimpleRoom, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::aim::SimpleRoom, _impl_.width_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::aim::Room, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::aim::Room, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::aim::Room, _impl_.type_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::aim::SimpleRoom)},
        {12, -1, -1, sizeof(::aim::Room)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::aim::_SimpleRoom_default_instance_._instance,
    &::aim::_Room_default_instance_._instance,
};
const char descriptor_table_protodef_scenario_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\016scenario.proto\022\003aim\"+\n\nSimpleRoom\022\016\n\006h"
    "eight\030\001 \001(\002\022\r\n\005width\030\002 \001(\002\"6\n\004Room\022&\n\013si"
    "mple_room\030\001 \001(\0132\017.aim.SimpleRoomH\000B\006\n\004ty"
    "peb\010editionsp\350\007"
};
static ::absl::once_flag descriptor_table_scenario_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_scenario_2eproto = {
    false,
    false,
    135,
    descriptor_table_protodef_scenario_2eproto,
    "scenario.proto",
    &descriptor_table_scenario_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_scenario_2eproto::offsets,
    file_level_enum_descriptors_scenario_2eproto,
    file_level_service_descriptors_scenario_2eproto,
};
namespace aim {
// ===================================================================

class SimpleRoom::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SimpleRoom>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SimpleRoom, _impl_._has_bits_);
};

SimpleRoom::SimpleRoom(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.SimpleRoom)
}
SimpleRoom::SimpleRoom(
    ::google::protobuf::Arena* arena, const SimpleRoom& from)
    : SimpleRoom(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SimpleRoom::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SimpleRoom::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, height_),
           0,
           offsetof(Impl_, width_) -
               offsetof(Impl_, height_) +
               sizeof(Impl_::width_));
}
SimpleRoom::~SimpleRoom() {
  // @@protoc_insertion_point(destructor:aim.SimpleRoom)
  SharedDtor(*this);
}
inline void SimpleRoom::SharedDtor(MessageLite& self) {
  SimpleRoom& this_ = static_cast<SimpleRoom&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SimpleRoom::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SimpleRoom(arena);
}
constexpr auto SimpleRoom::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SimpleRoom),
                                            alignof(SimpleRoom));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SimpleRoom::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SimpleRoom_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SimpleRoom::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SimpleRoom>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SimpleRoom::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SimpleRoom>(), &SimpleRoom::ByteSizeLong,
            &SimpleRoom::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SimpleRoom, _impl_._cached_size_),
        false,
    },
    &SimpleRoom::kDescriptorMethods,
    &descriptor_table_scenario_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SimpleRoom::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SimpleRoom::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SimpleRoom, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::SimpleRoom>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float width = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(SimpleRoom, _impl_.width_)}},
    // float height = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(SimpleRoom, _impl_.height_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float height = 1;
    {PROTOBUF_FIELD_OFFSET(SimpleRoom, _impl_.height_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float width = 2;
    {PROTOBUF_FIELD_OFFSET(SimpleRoom, _impl_.width_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SimpleRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.SimpleRoom)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.height_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.width_) -
        reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.width_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SimpleRoom::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SimpleRoom& this_ = static_cast<const SimpleRoom&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SimpleRoom::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SimpleRoom& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.SimpleRoom)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // float height = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_height(), target);
          }

          // float width = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_width(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.SimpleRoom)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SimpleRoom::ByteSizeLong(const MessageLite& base) {
          const SimpleRoom& this_ = static_cast<const SimpleRoom&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SimpleRoom::ByteSizeLong() const {
          const SimpleRoom& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.SimpleRoom)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // float height = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 5;
            }
            // float width = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SimpleRoom::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SimpleRoom*>(&to_msg);
  auto& from = static_cast<const SimpleRoom&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.SimpleRoom)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleRoom::CopyFrom(const SimpleRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.SimpleRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SimpleRoom::InternalSwap(SimpleRoom* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleRoom, _impl_.width_)
      + sizeof(SimpleRoom::_impl_.width_)
      - PROTOBUF_FIELD_OFFSET(SimpleRoom, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::google::protobuf::Metadata SimpleRoom::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Room::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::aim::Room, _impl_._oneof_case_);
};

void Room::set_allocated_simple_room(::aim::SimpleRoom* simple_room) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (simple_room) {
    ::google::protobuf::Arena* submessage_arena = simple_room->GetArena();
    if (message_arena != submessage_arena) {
      simple_room = ::google::protobuf::internal::GetOwnedMessage(message_arena, simple_room, submessage_arena);
    }
    set_has_simple_room();
    _impl_.type_.simple_room_ = simple_room;
  }
  // @@protoc_insertion_point(field_set_allocated:aim.Room.simple_room)
}
Room::Room(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.Room)
}
inline PROTOBUF_NDEBUG_INLINE Room::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::aim::Room& from_msg)
      : type_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Room::Room(
    ::google::protobuf::Arena* arena,
    const Room& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Room* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (type_case()) {
    case TYPE_NOT_SET:
      break;
      case kSimpleRoom:
        _impl_.type_.simple_room_ = ::google::protobuf::Message::CopyConstruct<::aim::SimpleRoom>(arena, *from._impl_.type_.simple_room_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:aim.Room)
}
inline PROTOBUF_NDEBUG_INLINE Room::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : type_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Room::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Room::~Room() {
  // @@protoc_insertion_point(destructor:aim.Room)
  SharedDtor(*this);
}
inline void Room::SharedDtor(MessageLite& self) {
  Room& this_ = static_cast<Room&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_type()) {
    this_.clear_type();
  }
  this_._impl_.~Impl_();
}

void Room::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:aim.Room)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (type_case()) {
    case kSimpleRoom: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.simple_room_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.simple_room_);
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


inline void* Room::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Room(arena);
}
constexpr auto Room::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Room),
                                            alignof(Room));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Room::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Room_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Room::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Room>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Room::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Room>(), &Room::ByteSizeLong,
            &Room::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Room, _impl_._cached_size_),
        false,
    },
    &Room::kDescriptorMethods,
    &descriptor_table_scenario_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Room::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Room::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::Room>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .aim.SimpleRoom simple_room = 1;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.type_.simple_room_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::aim::SimpleRoom>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Room::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.Room)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Room::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Room& this_ = static_cast<const Room&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Room::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Room& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.Room)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .aim.SimpleRoom simple_room = 1;
          if (this_.type_case() == kSimpleRoom) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.type_.simple_room_, this_._impl_.type_.simple_room_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.Room)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Room::ByteSizeLong(const MessageLite& base) {
          const Room& this_ = static_cast<const Room&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Room::ByteSizeLong() const {
          const Room& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.Room)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.type_case()) {
            // .aim.SimpleRoom simple_room = 1;
            case kSimpleRoom: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.simple_room_);
              break;
            }
            case TYPE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Room::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Room*>(&to_msg);
  auto& from = static_cast<const Room&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.Room)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_type();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kSimpleRoom: {
        if (oneof_needs_init) {
          _this->_impl_.type_.simple_room_ =
              ::google::protobuf::Message::CopyConstruct<::aim::SimpleRoom>(arena, *from._impl_.type_.simple_room_);
        } else {
          _this->_impl_.type_.simple_room_->MergeFrom(from._internal_simple_room());
        }
        break;
      }
      case TYPE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Room::CopyFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Room::InternalSwap(Room* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Room::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace aim
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_scenario_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
