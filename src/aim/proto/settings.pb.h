// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: settings.proto
// Protobuf C++ Version: 5.29.3

#ifndef settings_2eproto_2epb_2eh
#define settings_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_settings_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_settings_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_settings_2eproto;
namespace aim {
class Crosshair;
struct CrosshairDefaultTypeInternal;
extern CrosshairDefaultTypeInternal _Crosshair_default_instance_;
class DotCrosshair;
struct DotCrosshairDefaultTypeInternal;
extern DotCrosshairDefaultTypeInternal _DotCrosshair_default_instance_;
class ScenarioSettings;
struct ScenarioSettingsDefaultTypeInternal;
extern ScenarioSettingsDefaultTypeInternal _ScenarioSettings_default_instance_;
class Settings;
struct SettingsDefaultTypeInternal;
extern SettingsDefaultTypeInternal _Settings_default_instance_;
}  // namespace aim
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace aim {

// ===================================================================


// -------------------------------------------------------------------

class ScenarioSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.ScenarioSettings) */ {
 public:
  inline ScenarioSettings() : ScenarioSettings(nullptr) {}
  ~ScenarioSettings() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ScenarioSettings* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ScenarioSettings));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ScenarioSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline ScenarioSettings(const ScenarioSettings& from) : ScenarioSettings(nullptr, from) {}
  inline ScenarioSettings(ScenarioSettings&& from) noexcept
      : ScenarioSettings(nullptr, std::move(from)) {}
  inline ScenarioSettings& operator=(const ScenarioSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioSettings& operator=(ScenarioSettings&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioSettings* internal_default_instance() {
    return reinterpret_cast<const ScenarioSettings*>(
        &_ScenarioSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ScenarioSettings& a, ScenarioSettings& b) { a.Swap(&b); }
  inline void Swap(ScenarioSettings* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioSettings* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ScenarioSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ScenarioSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ScenarioSettings& from) { ScenarioSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ScenarioSettings* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.ScenarioSettings"; }

 protected:
  explicit ScenarioSettings(::google::protobuf::Arena* arena);
  ScenarioSettings(::google::protobuf::Arena* arena, const ScenarioSettings& from);
  ScenarioSettings(::google::protobuf::Arena* arena, ScenarioSettings&& from) noexcept
      : ScenarioSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kThemeNameFieldNumber = 2,
    kCmPer360FieldNumber = 1,
    kMetronomeBpmFieldNumber = 3,
    kCrosshairSizeFieldNumber = 4,
  };
  // string theme_name = 2;
  bool has_theme_name() const;
  void clear_theme_name() ;
  const std::string& theme_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_theme_name(Arg_&& arg, Args_... args);
  std::string* mutable_theme_name();
  PROTOBUF_NODISCARD std::string* release_theme_name();
  void set_allocated_theme_name(std::string* value);

  private:
  const std::string& _internal_theme_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme_name(
      const std::string& value);
  std::string* _internal_mutable_theme_name();

  public:
  // float cm_per_360 = 1;
  bool has_cm_per_360() const;
  void clear_cm_per_360() ;
  float cm_per_360() const;
  void set_cm_per_360(float value);

  private:
  float _internal_cm_per_360() const;
  void _internal_set_cm_per_360(float value);

  public:
  // float metronome_bpm = 3;
  bool has_metronome_bpm() const;
  void clear_metronome_bpm() ;
  float metronome_bpm() const;
  void set_metronome_bpm(float value);

  private:
  float _internal_metronome_bpm() const;
  void _internal_set_metronome_bpm(float value);

  public:
  // float crosshair_size = 4;
  bool has_crosshair_size() const;
  void clear_crosshair_size() ;
  float crosshair_size() const;
  void set_crosshair_size(float value);

  private:
  float _internal_crosshair_size() const;
  void _internal_set_crosshair_size(float value);

  public:
  // @@protoc_insertion_point(class_scope:aim.ScenarioSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ScenarioSettings& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr theme_name_;
    float cm_per_360_;
    float metronome_bpm_;
    float crosshair_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class DotCrosshair final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.DotCrosshair) */ {
 public:
  inline DotCrosshair() : DotCrosshair(nullptr) {}
  ~DotCrosshair() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DotCrosshair* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DotCrosshair));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DotCrosshair(
      ::google::protobuf::internal::ConstantInitialized);

  inline DotCrosshair(const DotCrosshair& from) : DotCrosshair(nullptr, from) {}
  inline DotCrosshair(DotCrosshair&& from) noexcept
      : DotCrosshair(nullptr, std::move(from)) {}
  inline DotCrosshair& operator=(const DotCrosshair& from) {
    CopyFrom(from);
    return *this;
  }
  inline DotCrosshair& operator=(DotCrosshair&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DotCrosshair& default_instance() {
    return *internal_default_instance();
  }
  static inline const DotCrosshair* internal_default_instance() {
    return reinterpret_cast<const DotCrosshair*>(
        &_DotCrosshair_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DotCrosshair& a, DotCrosshair& b) { a.Swap(&b); }
  inline void Swap(DotCrosshair* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DotCrosshair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DotCrosshair* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DotCrosshair>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DotCrosshair& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DotCrosshair& from) { DotCrosshair::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DotCrosshair* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.DotCrosshair"; }

 protected:
  explicit DotCrosshair(::google::protobuf::Arena* arena);
  DotCrosshair(::google::protobuf::Arena* arena, const DotCrosshair& from);
  DotCrosshair(::google::protobuf::Arena* arena, DotCrosshair&& from) noexcept
      : DotCrosshair(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDrawOutlineFieldNumber = 1,
  };
  // bool draw_outline = 1;
  bool has_draw_outline() const;
  void clear_draw_outline() ;
  bool draw_outline() const;
  void set_draw_outline(bool value);

  private:
  bool _internal_draw_outline() const;
  void _internal_set_draw_outline(bool value);

  public:
  // @@protoc_insertion_point(class_scope:aim.DotCrosshair)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DotCrosshair& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    bool draw_outline_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class Crosshair final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.Crosshair) */ {
 public:
  inline Crosshair() : Crosshair(nullptr) {}
  ~Crosshair() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Crosshair* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Crosshair));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Crosshair(
      ::google::protobuf::internal::ConstantInitialized);

  inline Crosshair(const Crosshair& from) : Crosshair(nullptr, from) {}
  inline Crosshair(Crosshair&& from) noexcept
      : Crosshair(nullptr, std::move(from)) {}
  inline Crosshair& operator=(const Crosshair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Crosshair& operator=(Crosshair&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Crosshair& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kDot = 3,
    TYPE_NOT_SET = 0,
  };
  static inline const Crosshair* internal_default_instance() {
    return reinterpret_cast<const Crosshair*>(
        &_Crosshair_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Crosshair& a, Crosshair& b) { a.Swap(&b); }
  inline void Swap(Crosshair* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Crosshair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Crosshair* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Crosshair>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Crosshair& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Crosshair& from) { Crosshair::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Crosshair* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.Crosshair"; }

 protected:
  explicit Crosshair(::google::protobuf::Arena* arena);
  Crosshair(::google::protobuf::Arena* arena, const Crosshair& from);
  Crosshair(::google::protobuf::Arena* arena, Crosshair&& from) noexcept
      : Crosshair(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSizeFieldNumber = 1,
    kDotFieldNumber = 3,
  };
  // float size = 1;
  bool has_size() const;
  void clear_size() ;
  float size() const;
  void set_size(float value);

  private:
  float _internal_size() const;
  void _internal_set_size(float value);

  public:
  // .aim.DotCrosshair dot = 3;
  bool has_dot() const;
  private:
  bool _internal_has_dot() const;

  public:
  void clear_dot() ;
  const ::aim::DotCrosshair& dot() const;
  PROTOBUF_NODISCARD ::aim::DotCrosshair* release_dot();
  ::aim::DotCrosshair* mutable_dot();
  void set_allocated_dot(::aim::DotCrosshair* value);
  void unsafe_arena_set_allocated_dot(::aim::DotCrosshair* value);
  ::aim::DotCrosshair* unsafe_arena_release_dot();

  private:
  const ::aim::DotCrosshair& _internal_dot() const;
  ::aim::DotCrosshair* _internal_mutable_dot();

  public:
  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:aim.Crosshair)
 private:
  class _Internal;
  void set_has_dot();
  inline bool has_type() const;
  inline void clear_has_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Crosshair& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float size_;
    union TypeUnion {
      constexpr TypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::aim::DotCrosshair* dot_;
    } type_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class Settings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.Settings) */ {
 public:
  inline Settings() : Settings(nullptr) {}
  ~Settings() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Settings* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Settings));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Settings(
      ::google::protobuf::internal::ConstantInitialized);

  inline Settings(const Settings& from) : Settings(nullptr, from) {}
  inline Settings(Settings&& from) noexcept
      : Settings(nullptr, std::move(from)) {}
  inline Settings& operator=(const Settings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Settings& operator=(Settings&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Settings& default_instance() {
    return *internal_default_instance();
  }
  static inline const Settings* internal_default_instance() {
    return reinterpret_cast<const Settings*>(
        &_Settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Settings& a, Settings& b) { a.Swap(&b); }
  inline void Swap(Settings* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Settings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Settings* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Settings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Settings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Settings& from) { Settings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Settings* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.Settings"; }

 protected:
  explicit Settings(::google::protobuf::Arena* arena);
  Settings(::google::protobuf::Arena* arena, const Settings& from);
  Settings(::google::protobuf::Arena* arena, Settings&& from) noexcept
      : Settings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kThemeNameFieldNumber = 4,
    kCrosshairFieldNumber = 1,
    kDpiFieldNumber = 2,
    kCmPer360FieldNumber = 3,
    kMetronomeBpmFieldNumber = 5,
  };
  // string theme_name = 4;
  bool has_theme_name() const;
  void clear_theme_name() ;
  const std::string& theme_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_theme_name(Arg_&& arg, Args_... args);
  std::string* mutable_theme_name();
  PROTOBUF_NODISCARD std::string* release_theme_name();
  void set_allocated_theme_name(std::string* value);

  private:
  const std::string& _internal_theme_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme_name(
      const std::string& value);
  std::string* _internal_mutable_theme_name();

  public:
  // .aim.Crosshair crosshair = 1;
  bool has_crosshair() const;
  void clear_crosshair() ;
  const ::aim::Crosshair& crosshair() const;
  PROTOBUF_NODISCARD ::aim::Crosshair* release_crosshair();
  ::aim::Crosshair* mutable_crosshair();
  void set_allocated_crosshair(::aim::Crosshair* value);
  void unsafe_arena_set_allocated_crosshair(::aim::Crosshair* value);
  ::aim::Crosshair* unsafe_arena_release_crosshair();

  private:
  const ::aim::Crosshair& _internal_crosshair() const;
  ::aim::Crosshair* _internal_mutable_crosshair();

  public:
  // float dpi = 2;
  bool has_dpi() const;
  void clear_dpi() ;
  float dpi() const;
  void set_dpi(float value);

  private:
  float _internal_dpi() const;
  void _internal_set_dpi(float value);

  public:
  // float cm_per_360 = 3;
  bool has_cm_per_360() const;
  void clear_cm_per_360() ;
  float cm_per_360() const;
  void set_cm_per_360(float value);

  private:
  float _internal_cm_per_360() const;
  void _internal_set_cm_per_360(float value);

  public:
  // float metronome_bpm = 5;
  bool has_metronome_bpm() const;
  void clear_metronome_bpm() ;
  float metronome_bpm() const;
  void set_metronome_bpm(float value);

  private:
  float _internal_metronome_bpm() const;
  void _internal_set_metronome_bpm(float value);

  public:
  // @@protoc_insertion_point(class_scope:aim.Settings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Settings& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr theme_name_;
    ::aim::Crosshair* crosshair_;
    float dpi_;
    float cm_per_360_;
    float metronome_bpm_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DotCrosshair

// bool draw_outline = 1;
inline bool DotCrosshair::has_draw_outline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DotCrosshair::clear_draw_outline() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.draw_outline_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DotCrosshair::draw_outline() const {
  // @@protoc_insertion_point(field_get:aim.DotCrosshair.draw_outline)
  return _internal_draw_outline();
}
inline void DotCrosshair::set_draw_outline(bool value) {
  _internal_set_draw_outline(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:aim.DotCrosshair.draw_outline)
}
inline bool DotCrosshair::_internal_draw_outline() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.draw_outline_;
}
inline void DotCrosshair::_internal_set_draw_outline(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.draw_outline_ = value;
}

// -------------------------------------------------------------------

// Crosshair

// float size = 1;
inline bool Crosshair::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Crosshair::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Crosshair::size() const {
  // @@protoc_insertion_point(field_get:aim.Crosshair.size)
  return _internal_size();
}
inline void Crosshair::set_size(float value) {
  _internal_set_size(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:aim.Crosshair.size)
}
inline float Crosshair::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void Crosshair::_internal_set_size(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// .aim.DotCrosshair dot = 3;
inline bool Crosshair::has_dot() const {
  return type_case() == kDot;
}
inline bool Crosshair::_internal_has_dot() const {
  return type_case() == kDot;
}
inline void Crosshair::set_has_dot() {
  _impl_._oneof_case_[0] = kDot;
}
inline void Crosshair::clear_dot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kDot) {
    if (GetArena() == nullptr) {
      delete _impl_.type_.dot_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.dot_);
    }
    clear_has_type();
  }
}
inline ::aim::DotCrosshair* Crosshair::release_dot() {
  // @@protoc_insertion_point(field_release:aim.Crosshair.dot)
  if (type_case() == kDot) {
    clear_has_type();
    auto* temp = _impl_.type_.dot_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.dot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aim::DotCrosshair& Crosshair::_internal_dot() const {
  return type_case() == kDot ? *_impl_.type_.dot_ : reinterpret_cast<::aim::DotCrosshair&>(::aim::_DotCrosshair_default_instance_);
}
inline const ::aim::DotCrosshair& Crosshair::dot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Crosshair.dot)
  return _internal_dot();
}
inline ::aim::DotCrosshair* Crosshair::unsafe_arena_release_dot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aim.Crosshair.dot)
  if (type_case() == kDot) {
    clear_has_type();
    auto* temp = _impl_.type_.dot_;
    _impl_.type_.dot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Crosshair::unsafe_arena_set_allocated_dot(::aim::DotCrosshair* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_type();
  if (value) {
    set_has_dot();
    _impl_.type_.dot_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.Crosshair.dot)
}
inline ::aim::DotCrosshair* Crosshair::_internal_mutable_dot() {
  if (type_case() != kDot) {
    clear_type();
    set_has_dot();
    _impl_.type_.dot_ =
        ::google::protobuf::Message::DefaultConstruct<::aim::DotCrosshair>(GetArena());
  }
  return _impl_.type_.dot_;
}
inline ::aim::DotCrosshair* Crosshair::mutable_dot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aim::DotCrosshair* _msg = _internal_mutable_dot();
  // @@protoc_insertion_point(field_mutable:aim.Crosshair.dot)
  return _msg;
}

inline bool Crosshair::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Crosshair::clear_has_type() {
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}
inline Crosshair::TypeCase Crosshair::type_case() const {
  return Crosshair::TypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Settings

// .aim.Crosshair crosshair = 1;
inline bool Settings::has_crosshair() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.crosshair_ != nullptr);
  return value;
}
inline void Settings::clear_crosshair() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.crosshair_ != nullptr) _impl_.crosshair_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::aim::Crosshair& Settings::_internal_crosshair() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::Crosshair* p = _impl_.crosshair_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::Crosshair&>(::aim::_Crosshair_default_instance_);
}
inline const ::aim::Crosshair& Settings::crosshair() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Settings.crosshair)
  return _internal_crosshair();
}
inline void Settings::unsafe_arena_set_allocated_crosshair(::aim::Crosshair* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.crosshair_);
  }
  _impl_.crosshair_ = reinterpret_cast<::aim::Crosshair*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.Settings.crosshair)
}
inline ::aim::Crosshair* Settings::release_crosshair() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aim::Crosshair* released = _impl_.crosshair_;
  _impl_.crosshair_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::Crosshair* Settings::unsafe_arena_release_crosshair() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Settings.crosshair)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aim::Crosshair* temp = _impl_.crosshair_;
  _impl_.crosshair_ = nullptr;
  return temp;
}
inline ::aim::Crosshair* Settings::_internal_mutable_crosshair() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.crosshair_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::Crosshair>(GetArena());
    _impl_.crosshair_ = reinterpret_cast<::aim::Crosshair*>(p);
  }
  return _impl_.crosshair_;
}
inline ::aim::Crosshair* Settings::mutable_crosshair() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::aim::Crosshair* _msg = _internal_mutable_crosshair();
  // @@protoc_insertion_point(field_mutable:aim.Settings.crosshair)
  return _msg;
}
inline void Settings::set_allocated_crosshair(::aim::Crosshair* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.crosshair_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.crosshair_ = reinterpret_cast<::aim::Crosshair*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.Settings.crosshair)
}

// float dpi = 2;
inline bool Settings::has_dpi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Settings::clear_dpi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dpi_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Settings::dpi() const {
  // @@protoc_insertion_point(field_get:aim.Settings.dpi)
  return _internal_dpi();
}
inline void Settings::set_dpi(float value) {
  _internal_set_dpi(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:aim.Settings.dpi)
}
inline float Settings::_internal_dpi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dpi_;
}
inline void Settings::_internal_set_dpi(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dpi_ = value;
}

// float cm_per_360 = 3;
inline bool Settings::has_cm_per_360() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Settings::clear_cm_per_360() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cm_per_360_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Settings::cm_per_360() const {
  // @@protoc_insertion_point(field_get:aim.Settings.cm_per_360)
  return _internal_cm_per_360();
}
inline void Settings::set_cm_per_360(float value) {
  _internal_set_cm_per_360(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:aim.Settings.cm_per_360)
}
inline float Settings::_internal_cm_per_360() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cm_per_360_;
}
inline void Settings::_internal_set_cm_per_360(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cm_per_360_ = value;
}

// string theme_name = 4;
inline bool Settings::has_theme_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Settings::clear_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Settings::theme_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Settings.theme_name)
  return _internal_theme_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Settings::set_theme_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.theme_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aim.Settings.theme_name)
}
inline std::string* Settings::mutable_theme_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_theme_name();
  // @@protoc_insertion_point(field_mutable:aim.Settings.theme_name)
  return _s;
}
inline const std::string& Settings::_internal_theme_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.theme_name_.Get();
}
inline void Settings::_internal_set_theme_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.theme_name_.Set(value, GetArena());
}
inline std::string* Settings::_internal_mutable_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.theme_name_.Mutable( GetArena());
}
inline std::string* Settings::release_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Settings.theme_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.theme_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.theme_name_.Set("", GetArena());
  }
  return released;
}
inline void Settings::set_allocated_theme_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.theme_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.theme_name_.IsDefault()) {
    _impl_.theme_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:aim.Settings.theme_name)
}

// float metronome_bpm = 5;
inline bool Settings::has_metronome_bpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Settings::clear_metronome_bpm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metronome_bpm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Settings::metronome_bpm() const {
  // @@protoc_insertion_point(field_get:aim.Settings.metronome_bpm)
  return _internal_metronome_bpm();
}
inline void Settings::set_metronome_bpm(float value) {
  _internal_set_metronome_bpm(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:aim.Settings.metronome_bpm)
}
inline float Settings::_internal_metronome_bpm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metronome_bpm_;
}
inline void Settings::_internal_set_metronome_bpm(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metronome_bpm_ = value;
}

// -------------------------------------------------------------------

// ScenarioSettings

// float cm_per_360 = 1;
inline bool ScenarioSettings::has_cm_per_360() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ScenarioSettings::clear_cm_per_360() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cm_per_360_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float ScenarioSettings::cm_per_360() const {
  // @@protoc_insertion_point(field_get:aim.ScenarioSettings.cm_per_360)
  return _internal_cm_per_360();
}
inline void ScenarioSettings::set_cm_per_360(float value) {
  _internal_set_cm_per_360(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:aim.ScenarioSettings.cm_per_360)
}
inline float ScenarioSettings::_internal_cm_per_360() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cm_per_360_;
}
inline void ScenarioSettings::_internal_set_cm_per_360(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cm_per_360_ = value;
}

// string theme_name = 2;
inline bool ScenarioSettings::has_theme_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ScenarioSettings::clear_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScenarioSettings::theme_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.ScenarioSettings.theme_name)
  return _internal_theme_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScenarioSettings::set_theme_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.theme_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aim.ScenarioSettings.theme_name)
}
inline std::string* ScenarioSettings::mutable_theme_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_theme_name();
  // @@protoc_insertion_point(field_mutable:aim.ScenarioSettings.theme_name)
  return _s;
}
inline const std::string& ScenarioSettings::_internal_theme_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.theme_name_.Get();
}
inline void ScenarioSettings::_internal_set_theme_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.theme_name_.Set(value, GetArena());
}
inline std::string* ScenarioSettings::_internal_mutable_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.theme_name_.Mutable( GetArena());
}
inline std::string* ScenarioSettings::release_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.ScenarioSettings.theme_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.theme_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.theme_name_.Set("", GetArena());
  }
  return released;
}
inline void ScenarioSettings::set_allocated_theme_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.theme_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.theme_name_.IsDefault()) {
    _impl_.theme_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:aim.ScenarioSettings.theme_name)
}

// float metronome_bpm = 3;
inline bool ScenarioSettings::has_metronome_bpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ScenarioSettings::clear_metronome_bpm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metronome_bpm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float ScenarioSettings::metronome_bpm() const {
  // @@protoc_insertion_point(field_get:aim.ScenarioSettings.metronome_bpm)
  return _internal_metronome_bpm();
}
inline void ScenarioSettings::set_metronome_bpm(float value) {
  _internal_set_metronome_bpm(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:aim.ScenarioSettings.metronome_bpm)
}
inline float ScenarioSettings::_internal_metronome_bpm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metronome_bpm_;
}
inline void ScenarioSettings::_internal_set_metronome_bpm(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metronome_bpm_ = value;
}

// float crosshair_size = 4;
inline bool ScenarioSettings::has_crosshair_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ScenarioSettings::clear_crosshair_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crosshair_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float ScenarioSettings::crosshair_size() const {
  // @@protoc_insertion_point(field_get:aim.ScenarioSettings.crosshair_size)
  return _internal_crosshair_size();
}
inline void ScenarioSettings::set_crosshair_size(float value) {
  _internal_set_crosshair_size(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:aim.ScenarioSettings.crosshair_size)
}
inline float ScenarioSettings::_internal_crosshair_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crosshair_size_;
}
inline void ScenarioSettings::_internal_set_crosshair_size(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crosshair_size_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace aim


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // settings_2eproto_2epb_2eh
