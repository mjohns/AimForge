// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: settings.proto
// Protobuf C++ Version: 5.29.3

#ifndef settings_2eproto_2epb_2eh
#define settings_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_settings_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_settings_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_settings_2eproto;
namespace aim {
class CircleCrosshair;
struct CircleCrosshairDefaultTypeInternal;
extern CircleCrosshairDefaultTypeInternal _CircleCrosshair_default_instance_;
class Crosshair;
struct CrosshairDefaultTypeInternal;
extern CrosshairDefaultTypeInternal _Crosshair_default_instance_;
class CrosshairLayer;
struct CrosshairLayerDefaultTypeInternal;
extern CrosshairLayerDefaultTypeInternal _CrosshairLayer_default_instance_;
class DotCrosshair;
struct DotCrosshairDefaultTypeInternal;
extern DotCrosshairDefaultTypeInternal _DotCrosshair_default_instance_;
class HealthBarSettings;
struct HealthBarSettingsDefaultTypeInternal;
extern HealthBarSettingsDefaultTypeInternal _HealthBarSettings_default_instance_;
class ImageCrosshair;
struct ImageCrosshairDefaultTypeInternal;
extern ImageCrosshairDefaultTypeInternal _ImageCrosshair_default_instance_;
class KeyMapping;
struct KeyMappingDefaultTypeInternal;
extern KeyMappingDefaultTypeInternal _KeyMapping_default_instance_;
class Keybinds;
struct KeybindsDefaultTypeInternal;
extern KeybindsDefaultTypeInternal _Keybinds_default_instance_;
class PlusCrosshair;
struct PlusCrosshairDefaultTypeInternal;
extern PlusCrosshairDefaultTypeInternal _PlusCrosshair_default_instance_;
class SavedCrosshairs;
struct SavedCrosshairsDefaultTypeInternal;
extern SavedCrosshairsDefaultTypeInternal _SavedCrosshairs_default_instance_;
class ScenarioSettings;
struct ScenarioSettingsDefaultTypeInternal;
extern ScenarioSettingsDefaultTypeInternal _ScenarioSettings_default_instance_;
class Settings;
struct SettingsDefaultTypeInternal;
extern SettingsDefaultTypeInternal _Settings_default_instance_;
}  // namespace aim
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace aim {

// ===================================================================


// -------------------------------------------------------------------

class PlusCrosshair final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.PlusCrosshair) */ {
 public:
  inline PlusCrosshair() : PlusCrosshair(nullptr) {}
  ~PlusCrosshair() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlusCrosshair* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlusCrosshair));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlusCrosshair(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlusCrosshair(const PlusCrosshair& from) : PlusCrosshair(nullptr, from) {}
  inline PlusCrosshair(PlusCrosshair&& from) noexcept
      : PlusCrosshair(nullptr, std::move(from)) {}
  inline PlusCrosshair& operator=(const PlusCrosshair& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlusCrosshair& operator=(PlusCrosshair&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlusCrosshair& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlusCrosshair* internal_default_instance() {
    return reinterpret_cast<const PlusCrosshair*>(
        &_PlusCrosshair_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PlusCrosshair& a, PlusCrosshair& b) { a.Swap(&b); }
  inline void Swap(PlusCrosshair* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlusCrosshair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlusCrosshair* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PlusCrosshair>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlusCrosshair& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlusCrosshair& from) { PlusCrosshair::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PlusCrosshair* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.PlusCrosshair"; }

 protected:
  explicit PlusCrosshair(::google::protobuf::Arena* arena);
  PlusCrosshair(::google::protobuf::Arena* arena, const PlusCrosshair& from);
  PlusCrosshair(::google::protobuf::Arena* arena, PlusCrosshair&& from) noexcept
      : PlusCrosshair(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoundingFieldNumber = 1,
    kHorizontalSizeFieldNumber = 2,
    kVerticalSizeFieldNumber = 3,
    kThicknessFieldNumber = 4,
    kOutlineThicknessFieldNumber = 5,
    kVerticalGapSizeFieldNumber = 6,
    kHorizontalGapSizeFieldNumber = 7,
  };
  // float rounding = 1;
  bool has_rounding() const;
  void clear_rounding() ;
  float rounding() const;
  void set_rounding(float value);

  private:
  float _internal_rounding() const;
  void _internal_set_rounding(float value);

  public:
  // float horizontal_size = 2;
  bool has_horizontal_size() const;
  void clear_horizontal_size() ;
  float horizontal_size() const;
  void set_horizontal_size(float value);

  private:
  float _internal_horizontal_size() const;
  void _internal_set_horizontal_size(float value);

  public:
  // float vertical_size = 3;
  bool has_vertical_size() const;
  void clear_vertical_size() ;
  float vertical_size() const;
  void set_vertical_size(float value);

  private:
  float _internal_vertical_size() const;
  void _internal_set_vertical_size(float value);

  public:
  // float thickness = 4;
  bool has_thickness() const;
  void clear_thickness() ;
  float thickness() const;
  void set_thickness(float value);

  private:
  float _internal_thickness() const;
  void _internal_set_thickness(float value);

  public:
  // float outline_thickness = 5;
  bool has_outline_thickness() const;
  void clear_outline_thickness() ;
  float outline_thickness() const;
  void set_outline_thickness(float value);

  private:
  float _internal_outline_thickness() const;
  void _internal_set_outline_thickness(float value);

  public:
  // float vertical_gap_size = 6;
  bool has_vertical_gap_size() const;
  void clear_vertical_gap_size() ;
  float vertical_gap_size() const;
  void set_vertical_gap_size(float value);

  private:
  float _internal_vertical_gap_size() const;
  void _internal_set_vertical_gap_size(float value);

  public:
  // float horizontal_gap_size = 7;
  bool has_horizontal_gap_size() const;
  void clear_horizontal_gap_size() ;
  float horizontal_gap_size() const;
  void set_horizontal_gap_size(float value);

  private:
  float _internal_horizontal_gap_size() const;
  void _internal_set_horizontal_gap_size(float value);

  public:
  // @@protoc_insertion_point(class_scope:aim.PlusCrosshair)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlusCrosshair& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float rounding_;
    float horizontal_size_;
    float vertical_size_;
    float thickness_;
    float outline_thickness_;
    float vertical_gap_size_;
    float horizontal_gap_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class KeyMapping final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.KeyMapping) */ {
 public:
  inline KeyMapping() : KeyMapping(nullptr) {}
  ~KeyMapping() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(KeyMapping* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(KeyMapping));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KeyMapping(
      ::google::protobuf::internal::ConstantInitialized);

  inline KeyMapping(const KeyMapping& from) : KeyMapping(nullptr, from) {}
  inline KeyMapping(KeyMapping&& from) noexcept
      : KeyMapping(nullptr, std::move(from)) {}
  inline KeyMapping& operator=(const KeyMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyMapping& operator=(KeyMapping&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyMapping* internal_default_instance() {
    return reinterpret_cast<const KeyMapping*>(
        &_KeyMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(KeyMapping& a, KeyMapping& b) { a.Swap(&b); }
  inline void Swap(KeyMapping* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyMapping* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyMapping* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<KeyMapping>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KeyMapping& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const KeyMapping& from) { KeyMapping::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(KeyMapping* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.KeyMapping"; }

 protected:
  explicit KeyMapping(::google::protobuf::Arena* arena);
  KeyMapping(::google::protobuf::Arena* arena, const KeyMapping& from);
  KeyMapping(::google::protobuf::Arena* arena, KeyMapping&& from) noexcept
      : KeyMapping(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMapping1FieldNumber = 1,
    kMapping2FieldNumber = 2,
    kMapping3FieldNumber = 3,
    kMapping4FieldNumber = 4,
  };
  // string mapping1 = 1;
  bool has_mapping1() const;
  void clear_mapping1() ;
  const std::string& mapping1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mapping1(Arg_&& arg, Args_... args);
  std::string* mutable_mapping1();
  PROTOBUF_NODISCARD std::string* release_mapping1();
  void set_allocated_mapping1(std::string* value);

  private:
  const std::string& _internal_mapping1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapping1(
      const std::string& value);
  std::string* _internal_mutable_mapping1();

  public:
  // string mapping2 = 2;
  bool has_mapping2() const;
  void clear_mapping2() ;
  const std::string& mapping2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mapping2(Arg_&& arg, Args_... args);
  std::string* mutable_mapping2();
  PROTOBUF_NODISCARD std::string* release_mapping2();
  void set_allocated_mapping2(std::string* value);

  private:
  const std::string& _internal_mapping2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapping2(
      const std::string& value);
  std::string* _internal_mutable_mapping2();

  public:
  // string mapping3 = 3;
  bool has_mapping3() const;
  void clear_mapping3() ;
  const std::string& mapping3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mapping3(Arg_&& arg, Args_... args);
  std::string* mutable_mapping3();
  PROTOBUF_NODISCARD std::string* release_mapping3();
  void set_allocated_mapping3(std::string* value);

  private:
  const std::string& _internal_mapping3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapping3(
      const std::string& value);
  std::string* _internal_mutable_mapping3();

  public:
  // string mapping4 = 4;
  bool has_mapping4() const;
  void clear_mapping4() ;
  const std::string& mapping4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mapping4(Arg_&& arg, Args_... args);
  std::string* mutable_mapping4();
  PROTOBUF_NODISCARD std::string* release_mapping4();
  void set_allocated_mapping4(std::string* value);

  private:
  const std::string& _internal_mapping4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapping4(
      const std::string& value);
  std::string* _internal_mutable_mapping4();

  public:
  // @@protoc_insertion_point(class_scope:aim.KeyMapping)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const KeyMapping& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr mapping1_;
    ::google::protobuf::internal::ArenaStringPtr mapping2_;
    ::google::protobuf::internal::ArenaStringPtr mapping3_;
    ::google::protobuf::internal::ArenaStringPtr mapping4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class ImageCrosshair final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.ImageCrosshair) */ {
 public:
  inline ImageCrosshair() : ImageCrosshair(nullptr) {}
  ~ImageCrosshair() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ImageCrosshair* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ImageCrosshair));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ImageCrosshair(
      ::google::protobuf::internal::ConstantInitialized);

  inline ImageCrosshair(const ImageCrosshair& from) : ImageCrosshair(nullptr, from) {}
  inline ImageCrosshair(ImageCrosshair&& from) noexcept
      : ImageCrosshair(nullptr, std::move(from)) {}
  inline ImageCrosshair& operator=(const ImageCrosshair& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageCrosshair& operator=(ImageCrosshair&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageCrosshair& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageCrosshair* internal_default_instance() {
    return reinterpret_cast<const ImageCrosshair*>(
        &_ImageCrosshair_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ImageCrosshair& a, ImageCrosshair& b) { a.Swap(&b); }
  inline void Swap(ImageCrosshair* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageCrosshair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageCrosshair* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ImageCrosshair>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImageCrosshair& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ImageCrosshair& from) { ImageCrosshair::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ImageCrosshair* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.ImageCrosshair"; }

 protected:
  explicit ImageCrosshair(::google::protobuf::Arena* arena);
  ImageCrosshair(::google::protobuf::Arena* arena, const ImageCrosshair& from);
  ImageCrosshair(::google::protobuf::Arena* arena, ImageCrosshair&& from) noexcept
      : ImageCrosshair(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFileNameFieldNumber = 1,
  };
  // string file_name = 1;
  bool has_file_name() const;
  void clear_file_name() ;
  const std::string& file_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* value);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // @@protoc_insertion_point(class_scope:aim.ImageCrosshair)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ImageCrosshair& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr file_name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class HealthBarSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.HealthBarSettings) */ {
 public:
  inline HealthBarSettings() : HealthBarSettings(nullptr) {}
  ~HealthBarSettings() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HealthBarSettings* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HealthBarSettings));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HealthBarSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline HealthBarSettings(const HealthBarSettings& from) : HealthBarSettings(nullptr, from) {}
  inline HealthBarSettings(HealthBarSettings&& from) noexcept
      : HealthBarSettings(nullptr, std::move(from)) {}
  inline HealthBarSettings& operator=(const HealthBarSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthBarSettings& operator=(HealthBarSettings&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthBarSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthBarSettings* internal_default_instance() {
    return reinterpret_cast<const HealthBarSettings*>(
        &_HealthBarSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(HealthBarSettings& a, HealthBarSettings& b) { a.Swap(&b); }
  inline void Swap(HealthBarSettings* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthBarSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthBarSettings* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HealthBarSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HealthBarSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HealthBarSettings& from) { HealthBarSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HealthBarSettings* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.HealthBarSettings"; }

 protected:
  explicit HealthBarSettings(::google::protobuf::Arena* arena);
  HealthBarSettings(::google::protobuf::Arena* arena, const HealthBarSettings& from);
  HealthBarSettings(::google::protobuf::Arena* arena, HealthBarSettings&& from) noexcept
      : HealthBarSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kShowFieldNumber = 1,
    kOnlyDamagedFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightAboveTargetFieldNumber = 5,
  };
  // bool show = 1;
  bool has_show() const;
  void clear_show() ;
  bool show() const;
  void set_show(bool value);

  private:
  bool _internal_show() const;
  void _internal_set_show(bool value);

  public:
  // bool only_damaged = 2;
  bool has_only_damaged() const;
  void clear_only_damaged() ;
  bool only_damaged() const;
  void set_only_damaged(bool value);

  private:
  bool _internal_only_damaged() const;
  void _internal_set_only_damaged(bool value);

  public:
  // float height = 3;
  bool has_height() const;
  void clear_height() ;
  float height() const;
  void set_height(float value);

  private:
  float _internal_height() const;
  void _internal_set_height(float value);

  public:
  // float width = 4;
  bool has_width() const;
  void clear_width() ;
  float width() const;
  void set_width(float value);

  private:
  float _internal_width() const;
  void _internal_set_width(float value);

  public:
  // float height_above_target = 5;
  bool has_height_above_target() const;
  void clear_height_above_target() ;
  float height_above_target() const;
  void set_height_above_target(float value);

  private:
  float _internal_height_above_target() const;
  void _internal_set_height_above_target(float value);

  public:
  // @@protoc_insertion_point(class_scope:aim.HealthBarSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HealthBarSettings& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    bool show_;
    bool only_damaged_;
    float height_;
    float width_;
    float height_above_target_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class DotCrosshair final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.DotCrosshair) */ {
 public:
  inline DotCrosshair() : DotCrosshair(nullptr) {}
  ~DotCrosshair() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DotCrosshair* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DotCrosshair));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DotCrosshair(
      ::google::protobuf::internal::ConstantInitialized);

  inline DotCrosshair(const DotCrosshair& from) : DotCrosshair(nullptr, from) {}
  inline DotCrosshair(DotCrosshair&& from) noexcept
      : DotCrosshair(nullptr, std::move(from)) {}
  inline DotCrosshair& operator=(const DotCrosshair& from) {
    CopyFrom(from);
    return *this;
  }
  inline DotCrosshair& operator=(DotCrosshair&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DotCrosshair& default_instance() {
    return *internal_default_instance();
  }
  static inline const DotCrosshair* internal_default_instance() {
    return reinterpret_cast<const DotCrosshair*>(
        &_DotCrosshair_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DotCrosshair& a, DotCrosshair& b) { a.Swap(&b); }
  inline void Swap(DotCrosshair* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DotCrosshair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DotCrosshair* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DotCrosshair>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DotCrosshair& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DotCrosshair& from) { DotCrosshair::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DotCrosshair* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.DotCrosshair"; }

 protected:
  explicit DotCrosshair(::google::protobuf::Arena* arena);
  DotCrosshair(::google::protobuf::Arena* arena, const DotCrosshair& from);
  DotCrosshair(::google::protobuf::Arena* arena, DotCrosshair&& from) noexcept
      : DotCrosshair(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOutlineThicknessFieldNumber = 4,
  };
  // float outline_thickness = 4;
  bool has_outline_thickness() const;
  void clear_outline_thickness() ;
  float outline_thickness() const;
  void set_outline_thickness(float value);

  private:
  float _internal_outline_thickness() const;
  void _internal_set_outline_thickness(float value);

  public:
  // @@protoc_insertion_point(class_scope:aim.DotCrosshair)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DotCrosshair& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float outline_thickness_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class CircleCrosshair final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.CircleCrosshair) */ {
 public:
  inline CircleCrosshair() : CircleCrosshair(nullptr) {}
  ~CircleCrosshair() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CircleCrosshair* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CircleCrosshair));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CircleCrosshair(
      ::google::protobuf::internal::ConstantInitialized);

  inline CircleCrosshair(const CircleCrosshair& from) : CircleCrosshair(nullptr, from) {}
  inline CircleCrosshair(CircleCrosshair&& from) noexcept
      : CircleCrosshair(nullptr, std::move(from)) {}
  inline CircleCrosshair& operator=(const CircleCrosshair& from) {
    CopyFrom(from);
    return *this;
  }
  inline CircleCrosshair& operator=(CircleCrosshair&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CircleCrosshair& default_instance() {
    return *internal_default_instance();
  }
  static inline const CircleCrosshair* internal_default_instance() {
    return reinterpret_cast<const CircleCrosshair*>(
        &_CircleCrosshair_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CircleCrosshair& a, CircleCrosshair& b) { a.Swap(&b); }
  inline void Swap(CircleCrosshair* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CircleCrosshair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CircleCrosshair* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CircleCrosshair>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CircleCrosshair& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CircleCrosshair& from) { CircleCrosshair::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CircleCrosshair* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.CircleCrosshair"; }

 protected:
  explicit CircleCrosshair(::google::protobuf::Arena* arena);
  CircleCrosshair(::google::protobuf::Arena* arena, const CircleCrosshair& from);
  CircleCrosshair(::google::protobuf::Arena* arena, CircleCrosshair&& from) noexcept
      : CircleCrosshair(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kThicknessFieldNumber = 1,
    kUseOutlineColorFieldNumber = 2,
  };
  // float thickness = 1;
  bool has_thickness() const;
  void clear_thickness() ;
  float thickness() const;
  void set_thickness(float value);

  private:
  float _internal_thickness() const;
  void _internal_set_thickness(float value);

  public:
  // bool use_outline_color = 2;
  bool has_use_outline_color() const;
  void clear_use_outline_color() ;
  bool use_outline_color() const;
  void set_use_outline_color(bool value);

  private:
  bool _internal_use_outline_color() const;
  void _internal_set_use_outline_color(bool value);

  public:
  // @@protoc_insertion_point(class_scope:aim.CircleCrosshair)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CircleCrosshair& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float thickness_;
    bool use_outline_color_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class ScenarioSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.ScenarioSettings) */ {
 public:
  inline ScenarioSettings() : ScenarioSettings(nullptr) {}
  ~ScenarioSettings() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ScenarioSettings* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ScenarioSettings));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ScenarioSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline ScenarioSettings(const ScenarioSettings& from) : ScenarioSettings(nullptr, from) {}
  inline ScenarioSettings(ScenarioSettings&& from) noexcept
      : ScenarioSettings(nullptr, std::move(from)) {}
  inline ScenarioSettings& operator=(const ScenarioSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioSettings& operator=(ScenarioSettings&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioSettings* internal_default_instance() {
    return reinterpret_cast<const ScenarioSettings*>(
        &_ScenarioSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(ScenarioSettings& a, ScenarioSettings& b) { a.Swap(&b); }
  inline void Swap(ScenarioSettings* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioSettings* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ScenarioSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ScenarioSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ScenarioSettings& from) { ScenarioSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ScenarioSettings* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.ScenarioSettings"; }

 protected:
  explicit ScenarioSettings(::google::protobuf::Arena* arena);
  ScenarioSettings(::google::protobuf::Arena* arena, const ScenarioSettings& from);
  ScenarioSettings(::google::protobuf::Arena* arena, ScenarioSettings&& from) noexcept
      : ScenarioSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kThemeNameFieldNumber = 2,
    kCrosshairNameFieldNumber = 5,
    kHealthBarFieldNumber = 8,
    kCmPer360FieldNumber = 1,
    kMetronomeBpmFieldNumber = 3,
    kCrosshairSizeFieldNumber = 4,
    kCmPer360JitterFieldNumber = 6,
    kAutoHoldTrackingFieldNumber = 7,
  };
  // string theme_name = 2;
  bool has_theme_name() const;
  void clear_theme_name() ;
  const std::string& theme_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_theme_name(Arg_&& arg, Args_... args);
  std::string* mutable_theme_name();
  PROTOBUF_NODISCARD std::string* release_theme_name();
  void set_allocated_theme_name(std::string* value);

  private:
  const std::string& _internal_theme_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme_name(
      const std::string& value);
  std::string* _internal_mutable_theme_name();

  public:
  // string crosshair_name = 5;
  bool has_crosshair_name() const;
  void clear_crosshair_name() ;
  const std::string& crosshair_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_crosshair_name(Arg_&& arg, Args_... args);
  std::string* mutable_crosshair_name();
  PROTOBUF_NODISCARD std::string* release_crosshair_name();
  void set_allocated_crosshair_name(std::string* value);

  private:
  const std::string& _internal_crosshair_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crosshair_name(
      const std::string& value);
  std::string* _internal_mutable_crosshair_name();

  public:
  // .aim.HealthBarSettings health_bar = 8;
  bool has_health_bar() const;
  void clear_health_bar() ;
  const ::aim::HealthBarSettings& health_bar() const;
  PROTOBUF_NODISCARD ::aim::HealthBarSettings* release_health_bar();
  ::aim::HealthBarSettings* mutable_health_bar();
  void set_allocated_health_bar(::aim::HealthBarSettings* value);
  void unsafe_arena_set_allocated_health_bar(::aim::HealthBarSettings* value);
  ::aim::HealthBarSettings* unsafe_arena_release_health_bar();

  private:
  const ::aim::HealthBarSettings& _internal_health_bar() const;
  ::aim::HealthBarSettings* _internal_mutable_health_bar();

  public:
  // float cm_per_360 = 1;
  bool has_cm_per_360() const;
  void clear_cm_per_360() ;
  float cm_per_360() const;
  void set_cm_per_360(float value);

  private:
  float _internal_cm_per_360() const;
  void _internal_set_cm_per_360(float value);

  public:
  // float metronome_bpm = 3;
  bool has_metronome_bpm() const;
  void clear_metronome_bpm() ;
  float metronome_bpm() const;
  void set_metronome_bpm(float value);

  private:
  float _internal_metronome_bpm() const;
  void _internal_set_metronome_bpm(float value);

  public:
  // float crosshair_size = 4;
  bool has_crosshair_size() const;
  void clear_crosshair_size() ;
  float crosshair_size() const;
  void set_crosshair_size(float value);

  private:
  float _internal_crosshair_size() const;
  void _internal_set_crosshair_size(float value);

  public:
  // float cm_per_360_jitter = 6;
  bool has_cm_per_360_jitter() const;
  void clear_cm_per_360_jitter() ;
  float cm_per_360_jitter() const;
  void set_cm_per_360_jitter(float value);

  private:
  float _internal_cm_per_360_jitter() const;
  void _internal_set_cm_per_360_jitter(float value);

  public:
  // bool auto_hold_tracking = 7;
  bool has_auto_hold_tracking() const;
  void clear_auto_hold_tracking() ;
  bool auto_hold_tracking() const;
  void set_auto_hold_tracking(bool value);

  private:
  bool _internal_auto_hold_tracking() const;
  void _internal_set_auto_hold_tracking(bool value);

  public:
  // @@protoc_insertion_point(class_scope:aim.ScenarioSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ScenarioSettings& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr theme_name_;
    ::google::protobuf::internal::ArenaStringPtr crosshair_name_;
    ::aim::HealthBarSettings* health_bar_;
    float cm_per_360_;
    float metronome_bpm_;
    float crosshair_size_;
    float cm_per_360_jitter_;
    bool auto_hold_tracking_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class Keybinds final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.Keybinds) */ {
 public:
  inline Keybinds() : Keybinds(nullptr) {}
  ~Keybinds() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Keybinds* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Keybinds));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Keybinds(
      ::google::protobuf::internal::ConstantInitialized);

  inline Keybinds(const Keybinds& from) : Keybinds(nullptr, from) {}
  inline Keybinds(Keybinds&& from) noexcept
      : Keybinds(nullptr, std::move(from)) {}
  inline Keybinds& operator=(const Keybinds& from) {
    CopyFrom(from);
    return *this;
  }
  inline Keybinds& operator=(Keybinds&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Keybinds& default_instance() {
    return *internal_default_instance();
  }
  static inline const Keybinds* internal_default_instance() {
    return reinterpret_cast<const Keybinds*>(
        &_Keybinds_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(Keybinds& a, Keybinds& b) { a.Swap(&b); }
  inline void Swap(Keybinds* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Keybinds* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Keybinds* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Keybinds>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Keybinds& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Keybinds& from) { Keybinds::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Keybinds* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.Keybinds"; }

 protected:
  explicit Keybinds(::google::protobuf::Arena* arena);
  Keybinds(::google::protobuf::Arena* arena, const Keybinds& from);
  Keybinds(::google::protobuf::Arena* arena, Keybinds&& from) noexcept
      : Keybinds(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFireFieldNumber = 1,
    kRestartScenarioFieldNumber = 2,
    kNextScenarioFieldNumber = 3,
    kQuickSettingsFieldNumber = 4,
    kAdjustCrosshairSizeFieldNumber = 5,
    kQuickMetronomeFieldNumber = 6,
    kEditScenarioFieldNumber = 7,
  };
  // .aim.KeyMapping fire = 1;
  bool has_fire() const;
  void clear_fire() ;
  const ::aim::KeyMapping& fire() const;
  PROTOBUF_NODISCARD ::aim::KeyMapping* release_fire();
  ::aim::KeyMapping* mutable_fire();
  void set_allocated_fire(::aim::KeyMapping* value);
  void unsafe_arena_set_allocated_fire(::aim::KeyMapping* value);
  ::aim::KeyMapping* unsafe_arena_release_fire();

  private:
  const ::aim::KeyMapping& _internal_fire() const;
  ::aim::KeyMapping* _internal_mutable_fire();

  public:
  // .aim.KeyMapping restart_scenario = 2;
  bool has_restart_scenario() const;
  void clear_restart_scenario() ;
  const ::aim::KeyMapping& restart_scenario() const;
  PROTOBUF_NODISCARD ::aim::KeyMapping* release_restart_scenario();
  ::aim::KeyMapping* mutable_restart_scenario();
  void set_allocated_restart_scenario(::aim::KeyMapping* value);
  void unsafe_arena_set_allocated_restart_scenario(::aim::KeyMapping* value);
  ::aim::KeyMapping* unsafe_arena_release_restart_scenario();

  private:
  const ::aim::KeyMapping& _internal_restart_scenario() const;
  ::aim::KeyMapping* _internal_mutable_restart_scenario();

  public:
  // .aim.KeyMapping next_scenario = 3;
  bool has_next_scenario() const;
  void clear_next_scenario() ;
  const ::aim::KeyMapping& next_scenario() const;
  PROTOBUF_NODISCARD ::aim::KeyMapping* release_next_scenario();
  ::aim::KeyMapping* mutable_next_scenario();
  void set_allocated_next_scenario(::aim::KeyMapping* value);
  void unsafe_arena_set_allocated_next_scenario(::aim::KeyMapping* value);
  ::aim::KeyMapping* unsafe_arena_release_next_scenario();

  private:
  const ::aim::KeyMapping& _internal_next_scenario() const;
  ::aim::KeyMapping* _internal_mutable_next_scenario();

  public:
  // .aim.KeyMapping quick_settings = 4;
  bool has_quick_settings() const;
  void clear_quick_settings() ;
  const ::aim::KeyMapping& quick_settings() const;
  PROTOBUF_NODISCARD ::aim::KeyMapping* release_quick_settings();
  ::aim::KeyMapping* mutable_quick_settings();
  void set_allocated_quick_settings(::aim::KeyMapping* value);
  void unsafe_arena_set_allocated_quick_settings(::aim::KeyMapping* value);
  ::aim::KeyMapping* unsafe_arena_release_quick_settings();

  private:
  const ::aim::KeyMapping& _internal_quick_settings() const;
  ::aim::KeyMapping* _internal_mutable_quick_settings();

  public:
  // .aim.KeyMapping adjust_crosshair_size = 5;
  bool has_adjust_crosshair_size() const;
  void clear_adjust_crosshair_size() ;
  const ::aim::KeyMapping& adjust_crosshair_size() const;
  PROTOBUF_NODISCARD ::aim::KeyMapping* release_adjust_crosshair_size();
  ::aim::KeyMapping* mutable_adjust_crosshair_size();
  void set_allocated_adjust_crosshair_size(::aim::KeyMapping* value);
  void unsafe_arena_set_allocated_adjust_crosshair_size(::aim::KeyMapping* value);
  ::aim::KeyMapping* unsafe_arena_release_adjust_crosshair_size();

  private:
  const ::aim::KeyMapping& _internal_adjust_crosshair_size() const;
  ::aim::KeyMapping* _internal_mutable_adjust_crosshair_size();

  public:
  // .aim.KeyMapping quick_metronome = 6;
  bool has_quick_metronome() const;
  void clear_quick_metronome() ;
  const ::aim::KeyMapping& quick_metronome() const;
  PROTOBUF_NODISCARD ::aim::KeyMapping* release_quick_metronome();
  ::aim::KeyMapping* mutable_quick_metronome();
  void set_allocated_quick_metronome(::aim::KeyMapping* value);
  void unsafe_arena_set_allocated_quick_metronome(::aim::KeyMapping* value);
  ::aim::KeyMapping* unsafe_arena_release_quick_metronome();

  private:
  const ::aim::KeyMapping& _internal_quick_metronome() const;
  ::aim::KeyMapping* _internal_mutable_quick_metronome();

  public:
  // .aim.KeyMapping edit_scenario = 7;
  bool has_edit_scenario() const;
  void clear_edit_scenario() ;
  const ::aim::KeyMapping& edit_scenario() const;
  PROTOBUF_NODISCARD ::aim::KeyMapping* release_edit_scenario();
  ::aim::KeyMapping* mutable_edit_scenario();
  void set_allocated_edit_scenario(::aim::KeyMapping* value);
  void unsafe_arena_set_allocated_edit_scenario(::aim::KeyMapping* value);
  ::aim::KeyMapping* unsafe_arena_release_edit_scenario();

  private:
  const ::aim::KeyMapping& _internal_edit_scenario() const;
  ::aim::KeyMapping* _internal_mutable_edit_scenario();

  public:
  // @@protoc_insertion_point(class_scope:aim.Keybinds)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 7,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Keybinds& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::aim::KeyMapping* fire_;
    ::aim::KeyMapping* restart_scenario_;
    ::aim::KeyMapping* next_scenario_;
    ::aim::KeyMapping* quick_settings_;
    ::aim::KeyMapping* adjust_crosshair_size_;
    ::aim::KeyMapping* quick_metronome_;
    ::aim::KeyMapping* edit_scenario_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class CrosshairLayer final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.CrosshairLayer) */ {
 public:
  inline CrosshairLayer() : CrosshairLayer(nullptr) {}
  ~CrosshairLayer() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CrosshairLayer* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CrosshairLayer));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CrosshairLayer(
      ::google::protobuf::internal::ConstantInitialized);

  inline CrosshairLayer(const CrosshairLayer& from) : CrosshairLayer(nullptr, from) {}
  inline CrosshairLayer(CrosshairLayer&& from) noexcept
      : CrosshairLayer(nullptr, std::move(from)) {}
  inline CrosshairLayer& operator=(const CrosshairLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrosshairLayer& operator=(CrosshairLayer&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CrosshairLayer& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kDot = 10,
    kPlus = 11,
    kImage = 12,
    kCircle = 13,
    TYPE_NOT_SET = 0,
  };
  static inline const CrosshairLayer* internal_default_instance() {
    return reinterpret_cast<const CrosshairLayer*>(
        &_CrosshairLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(CrosshairLayer& a, CrosshairLayer& b) { a.Swap(&b); }
  inline void Swap(CrosshairLayer* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrosshairLayer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CrosshairLayer* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CrosshairLayer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CrosshairLayer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CrosshairLayer& from) { CrosshairLayer::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CrosshairLayer* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.CrosshairLayer"; }

 protected:
  explicit CrosshairLayer(::google::protobuf::Arena* arena);
  CrosshairLayer(::google::protobuf::Arena* arena, const CrosshairLayer& from);
  CrosshairLayer(::google::protobuf::Arena* arena, CrosshairLayer&& from) noexcept
      : CrosshairLayer(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOverrideColorFieldNumber = 1,
    kOverrideOutlineColorFieldNumber = 2,
    kScaleFieldNumber = 3,
    kAlphaFieldNumber = 4,
    kDotFieldNumber = 10,
    kPlusFieldNumber = 11,
    kImageFieldNumber = 12,
    kCircleFieldNumber = 13,
  };
  // .aim.StoredColor override_color = 1;
  bool has_override_color() const;
  void clear_override_color() ;
  const ::aim::StoredColor& override_color() const;
  PROTOBUF_NODISCARD ::aim::StoredColor* release_override_color();
  ::aim::StoredColor* mutable_override_color();
  void set_allocated_override_color(::aim::StoredColor* value);
  void unsafe_arena_set_allocated_override_color(::aim::StoredColor* value);
  ::aim::StoredColor* unsafe_arena_release_override_color();

  private:
  const ::aim::StoredColor& _internal_override_color() const;
  ::aim::StoredColor* _internal_mutable_override_color();

  public:
  // .aim.StoredColor override_outline_color = 2;
  bool has_override_outline_color() const;
  void clear_override_outline_color() ;
  const ::aim::StoredColor& override_outline_color() const;
  PROTOBUF_NODISCARD ::aim::StoredColor* release_override_outline_color();
  ::aim::StoredColor* mutable_override_outline_color();
  void set_allocated_override_outline_color(::aim::StoredColor* value);
  void unsafe_arena_set_allocated_override_outline_color(::aim::StoredColor* value);
  ::aim::StoredColor* unsafe_arena_release_override_outline_color();

  private:
  const ::aim::StoredColor& _internal_override_outline_color() const;
  ::aim::StoredColor* _internal_mutable_override_outline_color();

  public:
  // float scale = 3;
  bool has_scale() const;
  void clear_scale() ;
  float scale() const;
  void set_scale(float value);

  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);

  public:
  // float alpha = 4;
  bool has_alpha() const;
  void clear_alpha() ;
  float alpha() const;
  void set_alpha(float value);

  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);

  public:
  // .aim.DotCrosshair dot = 10;
  bool has_dot() const;
  private:
  bool _internal_has_dot() const;

  public:
  void clear_dot() ;
  const ::aim::DotCrosshair& dot() const;
  PROTOBUF_NODISCARD ::aim::DotCrosshair* release_dot();
  ::aim::DotCrosshair* mutable_dot();
  void set_allocated_dot(::aim::DotCrosshair* value);
  void unsafe_arena_set_allocated_dot(::aim::DotCrosshair* value);
  ::aim::DotCrosshair* unsafe_arena_release_dot();

  private:
  const ::aim::DotCrosshair& _internal_dot() const;
  ::aim::DotCrosshair* _internal_mutable_dot();

  public:
  // .aim.PlusCrosshair plus = 11;
  bool has_plus() const;
  private:
  bool _internal_has_plus() const;

  public:
  void clear_plus() ;
  const ::aim::PlusCrosshair& plus() const;
  PROTOBUF_NODISCARD ::aim::PlusCrosshair* release_plus();
  ::aim::PlusCrosshair* mutable_plus();
  void set_allocated_plus(::aim::PlusCrosshair* value);
  void unsafe_arena_set_allocated_plus(::aim::PlusCrosshair* value);
  ::aim::PlusCrosshair* unsafe_arena_release_plus();

  private:
  const ::aim::PlusCrosshair& _internal_plus() const;
  ::aim::PlusCrosshair* _internal_mutable_plus();

  public:
  // .aim.ImageCrosshair image = 12;
  bool has_image() const;
  private:
  bool _internal_has_image() const;

  public:
  void clear_image() ;
  const ::aim::ImageCrosshair& image() const;
  PROTOBUF_NODISCARD ::aim::ImageCrosshair* release_image();
  ::aim::ImageCrosshair* mutable_image();
  void set_allocated_image(::aim::ImageCrosshair* value);
  void unsafe_arena_set_allocated_image(::aim::ImageCrosshair* value);
  ::aim::ImageCrosshair* unsafe_arena_release_image();

  private:
  const ::aim::ImageCrosshair& _internal_image() const;
  ::aim::ImageCrosshair* _internal_mutable_image();

  public:
  // .aim.CircleCrosshair circle = 13;
  bool has_circle() const;
  private:
  bool _internal_has_circle() const;

  public:
  void clear_circle() ;
  const ::aim::CircleCrosshair& circle() const;
  PROTOBUF_NODISCARD ::aim::CircleCrosshair* release_circle();
  ::aim::CircleCrosshair* mutable_circle();
  void set_allocated_circle(::aim::CircleCrosshair* value);
  void unsafe_arena_set_allocated_circle(::aim::CircleCrosshair* value);
  ::aim::CircleCrosshair* unsafe_arena_release_circle();

  private:
  const ::aim::CircleCrosshair& _internal_circle() const;
  ::aim::CircleCrosshair* _internal_mutable_circle();

  public:
  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:aim.CrosshairLayer)
 private:
  class _Internal;
  void set_has_dot();
  void set_has_plus();
  void set_has_image();
  void set_has_circle();
  inline bool has_type() const;
  inline void clear_has_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 8, 6,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CrosshairLayer& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::aim::StoredColor* override_color_;
    ::aim::StoredColor* override_outline_color_;
    float scale_;
    float alpha_;
    union TypeUnion {
      constexpr TypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::aim::DotCrosshair* dot_;
      ::aim::PlusCrosshair* plus_;
      ::aim::ImageCrosshair* image_;
      ::aim::CircleCrosshair* circle_;
    } type_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class Crosshair final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.Crosshair) */ {
 public:
  inline Crosshair() : Crosshair(nullptr) {}
  ~Crosshair() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Crosshair* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Crosshair));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Crosshair(
      ::google::protobuf::internal::ConstantInitialized);

  inline Crosshair(const Crosshair& from) : Crosshair(nullptr, from) {}
  inline Crosshair(Crosshair&& from) noexcept
      : Crosshair(nullptr, std::move(from)) {}
  inline Crosshair& operator=(const Crosshair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Crosshair& operator=(Crosshair&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Crosshair& default_instance() {
    return *internal_default_instance();
  }
  static inline const Crosshair* internal_default_instance() {
    return reinterpret_cast<const Crosshair*>(
        &_Crosshair_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Crosshair& a, Crosshair& b) { a.Swap(&b); }
  inline void Swap(Crosshair* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Crosshair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Crosshair* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Crosshair>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Crosshair& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Crosshair& from) { Crosshair::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Crosshair* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.Crosshair"; }

 protected:
  explicit Crosshair(::google::protobuf::Arena* arena);
  Crosshair(::google::protobuf::Arena* arena, const Crosshair& from);
  Crosshair(::google::protobuf::Arena* arena, Crosshair&& from) noexcept
      : Crosshair(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLayersFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .aim.CrosshairLayer layers = 2;
  int layers_size() const;
  private:
  int _internal_layers_size() const;

  public:
  void clear_layers() ;
  ::aim::CrosshairLayer* mutable_layers(int index);
  ::google::protobuf::RepeatedPtrField<::aim::CrosshairLayer>* mutable_layers();

  private:
  const ::google::protobuf::RepeatedPtrField<::aim::CrosshairLayer>& _internal_layers() const;
  ::google::protobuf::RepeatedPtrField<::aim::CrosshairLayer>* _internal_mutable_layers();
  public:
  const ::aim::CrosshairLayer& layers(int index) const;
  ::aim::CrosshairLayer* add_layers();
  const ::google::protobuf::RepeatedPtrField<::aim::CrosshairLayer>& layers() const;
  // string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:aim.Crosshair)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      26, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Crosshair& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::aim::CrosshairLayer > layers_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class Settings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.Settings) */ {
 public:
  inline Settings() : Settings(nullptr) {}
  ~Settings() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Settings* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Settings));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Settings(
      ::google::protobuf::internal::ConstantInitialized);

  inline Settings(const Settings& from) : Settings(nullptr, from) {}
  inline Settings(Settings&& from) noexcept
      : Settings(nullptr, std::move(from)) {}
  inline Settings& operator=(const Settings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Settings& operator=(Settings&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Settings& default_instance() {
    return *internal_default_instance();
  }
  static inline const Settings* internal_default_instance() {
    return reinterpret_cast<const Settings*>(
        &_Settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Settings& a, Settings& b) { a.Swap(&b); }
  inline void Swap(Settings* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Settings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Settings* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Settings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Settings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Settings& from) { Settings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Settings* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.Settings"; }

 protected:
  explicit Settings(::google::protobuf::Arena* arena);
  Settings(::google::protobuf::Arena* arena, const Settings& from);
  Settings(::google::protobuf::Arena* arena, Settings&& from) noexcept
      : Settings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSavedCrosshairsFieldNumber = 7,
    kThemeNameFieldNumber = 3,
    kCurrentCrosshairNameFieldNumber = 6,
    kKeybindsFieldNumber = 9,
    kHealthBarFieldNumber = 12,
    kDpiFieldNumber = 1,
    kCmPer360FieldNumber = 2,
    kMetronomeBpmFieldNumber = 4,
    kCrosshairSizeFieldNumber = 5,
    kDisableClickToStartFieldNumber = 8,
    kAutoHoldTrackingFieldNumber = 10,
    kDisablePerScenarioSettingsFieldNumber = 13,
    kCmPer360JitterFieldNumber = 11,
  };
  // repeated .aim.Crosshair saved_crosshairs = 7;
  int saved_crosshairs_size() const;
  private:
  int _internal_saved_crosshairs_size() const;

  public:
  void clear_saved_crosshairs() ;
  ::aim::Crosshair* mutable_saved_crosshairs(int index);
  ::google::protobuf::RepeatedPtrField<::aim::Crosshair>* mutable_saved_crosshairs();

  private:
  const ::google::protobuf::RepeatedPtrField<::aim::Crosshair>& _internal_saved_crosshairs() const;
  ::google::protobuf::RepeatedPtrField<::aim::Crosshair>* _internal_mutable_saved_crosshairs();
  public:
  const ::aim::Crosshair& saved_crosshairs(int index) const;
  ::aim::Crosshair* add_saved_crosshairs();
  const ::google::protobuf::RepeatedPtrField<::aim::Crosshair>& saved_crosshairs() const;
  // string theme_name = 3;
  bool has_theme_name() const;
  void clear_theme_name() ;
  const std::string& theme_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_theme_name(Arg_&& arg, Args_... args);
  std::string* mutable_theme_name();
  PROTOBUF_NODISCARD std::string* release_theme_name();
  void set_allocated_theme_name(std::string* value);

  private:
  const std::string& _internal_theme_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme_name(
      const std::string& value);
  std::string* _internal_mutable_theme_name();

  public:
  // string current_crosshair_name = 6;
  bool has_current_crosshair_name() const;
  void clear_current_crosshair_name() ;
  const std::string& current_crosshair_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_crosshair_name(Arg_&& arg, Args_... args);
  std::string* mutable_current_crosshair_name();
  PROTOBUF_NODISCARD std::string* release_current_crosshair_name();
  void set_allocated_current_crosshair_name(std::string* value);

  private:
  const std::string& _internal_current_crosshair_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_crosshair_name(
      const std::string& value);
  std::string* _internal_mutable_current_crosshair_name();

  public:
  // .aim.Keybinds keybinds = 9;
  bool has_keybinds() const;
  void clear_keybinds() ;
  const ::aim::Keybinds& keybinds() const;
  PROTOBUF_NODISCARD ::aim::Keybinds* release_keybinds();
  ::aim::Keybinds* mutable_keybinds();
  void set_allocated_keybinds(::aim::Keybinds* value);
  void unsafe_arena_set_allocated_keybinds(::aim::Keybinds* value);
  ::aim::Keybinds* unsafe_arena_release_keybinds();

  private:
  const ::aim::Keybinds& _internal_keybinds() const;
  ::aim::Keybinds* _internal_mutable_keybinds();

  public:
  // .aim.HealthBarSettings health_bar = 12;
  bool has_health_bar() const;
  void clear_health_bar() ;
  const ::aim::HealthBarSettings& health_bar() const;
  PROTOBUF_NODISCARD ::aim::HealthBarSettings* release_health_bar();
  ::aim::HealthBarSettings* mutable_health_bar();
  void set_allocated_health_bar(::aim::HealthBarSettings* value);
  void unsafe_arena_set_allocated_health_bar(::aim::HealthBarSettings* value);
  ::aim::HealthBarSettings* unsafe_arena_release_health_bar();

  private:
  const ::aim::HealthBarSettings& _internal_health_bar() const;
  ::aim::HealthBarSettings* _internal_mutable_health_bar();

  public:
  // float dpi = 1;
  bool has_dpi() const;
  void clear_dpi() ;
  float dpi() const;
  void set_dpi(float value);

  private:
  float _internal_dpi() const;
  void _internal_set_dpi(float value);

  public:
  // float cm_per_360 = 2;
  bool has_cm_per_360() const;
  void clear_cm_per_360() ;
  float cm_per_360() const;
  void set_cm_per_360(float value);

  private:
  float _internal_cm_per_360() const;
  void _internal_set_cm_per_360(float value);

  public:
  // float metronome_bpm = 4;
  bool has_metronome_bpm() const;
  void clear_metronome_bpm() ;
  float metronome_bpm() const;
  void set_metronome_bpm(float value);

  private:
  float _internal_metronome_bpm() const;
  void _internal_set_metronome_bpm(float value);

  public:
  // float crosshair_size = 5;
  bool has_crosshair_size() const;
  void clear_crosshair_size() ;
  float crosshair_size() const;
  void set_crosshair_size(float value);

  private:
  float _internal_crosshair_size() const;
  void _internal_set_crosshair_size(float value);

  public:
  // bool disable_click_to_start = 8;
  bool has_disable_click_to_start() const;
  void clear_disable_click_to_start() ;
  bool disable_click_to_start() const;
  void set_disable_click_to_start(bool value);

  private:
  bool _internal_disable_click_to_start() const;
  void _internal_set_disable_click_to_start(bool value);

  public:
  // bool auto_hold_tracking = 10;
  bool has_auto_hold_tracking() const;
  void clear_auto_hold_tracking() ;
  bool auto_hold_tracking() const;
  void set_auto_hold_tracking(bool value);

  private:
  bool _internal_auto_hold_tracking() const;
  void _internal_set_auto_hold_tracking(bool value);

  public:
  // bool disable_per_scenario_settings = 13;
  bool has_disable_per_scenario_settings() const;
  void clear_disable_per_scenario_settings() ;
  bool disable_per_scenario_settings() const;
  void set_disable_per_scenario_settings(bool value);

  private:
  bool _internal_disable_per_scenario_settings() const;
  void _internal_set_disable_per_scenario_settings(bool value);

  public:
  // float cm_per_360_jitter = 11;
  bool has_cm_per_360_jitter() const;
  void clear_cm_per_360_jitter() ;
  float cm_per_360_jitter() const;
  void set_cm_per_360_jitter(float value);

  private:
  float _internal_cm_per_360_jitter() const;
  void _internal_set_cm_per_360_jitter(float value);

  public:
  // @@protoc_insertion_point(class_scope:aim.Settings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 3,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Settings& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::aim::Crosshair > saved_crosshairs_;
    ::google::protobuf::internal::ArenaStringPtr theme_name_;
    ::google::protobuf::internal::ArenaStringPtr current_crosshair_name_;
    ::aim::Keybinds* keybinds_;
    ::aim::HealthBarSettings* health_bar_;
    float dpi_;
    float cm_per_360_;
    float metronome_bpm_;
    float crosshair_size_;
    bool disable_click_to_start_;
    bool auto_hold_tracking_;
    bool disable_per_scenario_settings_;
    float cm_per_360_jitter_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class SavedCrosshairs final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.SavedCrosshairs) */ {
 public:
  inline SavedCrosshairs() : SavedCrosshairs(nullptr) {}
  ~SavedCrosshairs() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SavedCrosshairs* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SavedCrosshairs));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SavedCrosshairs(
      ::google::protobuf::internal::ConstantInitialized);

  inline SavedCrosshairs(const SavedCrosshairs& from) : SavedCrosshairs(nullptr, from) {}
  inline SavedCrosshairs(SavedCrosshairs&& from) noexcept
      : SavedCrosshairs(nullptr, std::move(from)) {}
  inline SavedCrosshairs& operator=(const SavedCrosshairs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavedCrosshairs& operator=(SavedCrosshairs&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SavedCrosshairs& default_instance() {
    return *internal_default_instance();
  }
  static inline const SavedCrosshairs* internal_default_instance() {
    return reinterpret_cast<const SavedCrosshairs*>(
        &_SavedCrosshairs_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(SavedCrosshairs& a, SavedCrosshairs& b) { a.Swap(&b); }
  inline void Swap(SavedCrosshairs* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SavedCrosshairs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SavedCrosshairs* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SavedCrosshairs>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SavedCrosshairs& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SavedCrosshairs& from) { SavedCrosshairs::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SavedCrosshairs* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.SavedCrosshairs"; }

 protected:
  explicit SavedCrosshairs(::google::protobuf::Arena* arena);
  SavedCrosshairs(::google::protobuf::Arena* arena, const SavedCrosshairs& from);
  SavedCrosshairs(::google::protobuf::Arena* arena, SavedCrosshairs&& from) noexcept
      : SavedCrosshairs(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCrosshairsFieldNumber = 1,
  };
  // repeated .aim.Crosshair crosshairs = 1;
  int crosshairs_size() const;
  private:
  int _internal_crosshairs_size() const;

  public:
  void clear_crosshairs() ;
  ::aim::Crosshair* mutable_crosshairs(int index);
  ::google::protobuf::RepeatedPtrField<::aim::Crosshair>* mutable_crosshairs();

  private:
  const ::google::protobuf::RepeatedPtrField<::aim::Crosshair>& _internal_crosshairs() const;
  ::google::protobuf::RepeatedPtrField<::aim::Crosshair>* _internal_mutable_crosshairs();
  public:
  const ::aim::Crosshair& crosshairs(int index) const;
  ::aim::Crosshair* add_crosshairs();
  const ::google::protobuf::RepeatedPtrField<::aim::Crosshair>& crosshairs() const;
  // @@protoc_insertion_point(class_scope:aim.SavedCrosshairs)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SavedCrosshairs& from_msg);
    ::google::protobuf::RepeatedPtrField< ::aim::Crosshair > crosshairs_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_settings_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DotCrosshair

// float outline_thickness = 4;
inline bool DotCrosshair::has_outline_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DotCrosshair::clear_outline_thickness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outline_thickness_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float DotCrosshair::outline_thickness() const {
  // @@protoc_insertion_point(field_get:aim.DotCrosshair.outline_thickness)
  return _internal_outline_thickness();
}
inline void DotCrosshair::set_outline_thickness(float value) {
  _internal_set_outline_thickness(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:aim.DotCrosshair.outline_thickness)
}
inline float DotCrosshair::_internal_outline_thickness() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.outline_thickness_;
}
inline void DotCrosshair::_internal_set_outline_thickness(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outline_thickness_ = value;
}

// -------------------------------------------------------------------

// PlusCrosshair

// float rounding = 1;
inline bool PlusCrosshair::has_rounding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PlusCrosshair::clear_rounding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rounding_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float PlusCrosshair::rounding() const {
  // @@protoc_insertion_point(field_get:aim.PlusCrosshair.rounding)
  return _internal_rounding();
}
inline void PlusCrosshair::set_rounding(float value) {
  _internal_set_rounding(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:aim.PlusCrosshair.rounding)
}
inline float PlusCrosshair::_internal_rounding() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rounding_;
}
inline void PlusCrosshair::_internal_set_rounding(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rounding_ = value;
}

// float horizontal_size = 2;
inline bool PlusCrosshair::has_horizontal_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PlusCrosshair::clear_horizontal_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.horizontal_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float PlusCrosshair::horizontal_size() const {
  // @@protoc_insertion_point(field_get:aim.PlusCrosshair.horizontal_size)
  return _internal_horizontal_size();
}
inline void PlusCrosshair::set_horizontal_size(float value) {
  _internal_set_horizontal_size(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:aim.PlusCrosshair.horizontal_size)
}
inline float PlusCrosshair::_internal_horizontal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.horizontal_size_;
}
inline void PlusCrosshair::_internal_set_horizontal_size(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.horizontal_size_ = value;
}

// float vertical_size = 3;
inline bool PlusCrosshair::has_vertical_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PlusCrosshair::clear_vertical_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vertical_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float PlusCrosshair::vertical_size() const {
  // @@protoc_insertion_point(field_get:aim.PlusCrosshair.vertical_size)
  return _internal_vertical_size();
}
inline void PlusCrosshair::set_vertical_size(float value) {
  _internal_set_vertical_size(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:aim.PlusCrosshair.vertical_size)
}
inline float PlusCrosshair::_internal_vertical_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vertical_size_;
}
inline void PlusCrosshair::_internal_set_vertical_size(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vertical_size_ = value;
}

// float thickness = 4;
inline bool PlusCrosshair::has_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PlusCrosshair::clear_thickness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thickness_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float PlusCrosshair::thickness() const {
  // @@protoc_insertion_point(field_get:aim.PlusCrosshair.thickness)
  return _internal_thickness();
}
inline void PlusCrosshair::set_thickness(float value) {
  _internal_set_thickness(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:aim.PlusCrosshair.thickness)
}
inline float PlusCrosshair::_internal_thickness() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.thickness_;
}
inline void PlusCrosshair::_internal_set_thickness(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thickness_ = value;
}

// float outline_thickness = 5;
inline bool PlusCrosshair::has_outline_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PlusCrosshair::clear_outline_thickness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outline_thickness_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float PlusCrosshair::outline_thickness() const {
  // @@protoc_insertion_point(field_get:aim.PlusCrosshair.outline_thickness)
  return _internal_outline_thickness();
}
inline void PlusCrosshair::set_outline_thickness(float value) {
  _internal_set_outline_thickness(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:aim.PlusCrosshair.outline_thickness)
}
inline float PlusCrosshair::_internal_outline_thickness() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.outline_thickness_;
}
inline void PlusCrosshair::_internal_set_outline_thickness(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outline_thickness_ = value;
}

// float vertical_gap_size = 6;
inline bool PlusCrosshair::has_vertical_gap_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void PlusCrosshair::clear_vertical_gap_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vertical_gap_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float PlusCrosshair::vertical_gap_size() const {
  // @@protoc_insertion_point(field_get:aim.PlusCrosshair.vertical_gap_size)
  return _internal_vertical_gap_size();
}
inline void PlusCrosshair::set_vertical_gap_size(float value) {
  _internal_set_vertical_gap_size(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:aim.PlusCrosshair.vertical_gap_size)
}
inline float PlusCrosshair::_internal_vertical_gap_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vertical_gap_size_;
}
inline void PlusCrosshair::_internal_set_vertical_gap_size(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vertical_gap_size_ = value;
}

// float horizontal_gap_size = 7;
inline bool PlusCrosshair::has_horizontal_gap_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void PlusCrosshair::clear_horizontal_gap_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.horizontal_gap_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float PlusCrosshair::horizontal_gap_size() const {
  // @@protoc_insertion_point(field_get:aim.PlusCrosshair.horizontal_gap_size)
  return _internal_horizontal_gap_size();
}
inline void PlusCrosshair::set_horizontal_gap_size(float value) {
  _internal_set_horizontal_gap_size(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:aim.PlusCrosshair.horizontal_gap_size)
}
inline float PlusCrosshair::_internal_horizontal_gap_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.horizontal_gap_size_;
}
inline void PlusCrosshair::_internal_set_horizontal_gap_size(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.horizontal_gap_size_ = value;
}

// -------------------------------------------------------------------

// CircleCrosshair

// float thickness = 1;
inline bool CircleCrosshair::has_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CircleCrosshair::clear_thickness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thickness_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CircleCrosshair::thickness() const {
  // @@protoc_insertion_point(field_get:aim.CircleCrosshair.thickness)
  return _internal_thickness();
}
inline void CircleCrosshair::set_thickness(float value) {
  _internal_set_thickness(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:aim.CircleCrosshair.thickness)
}
inline float CircleCrosshair::_internal_thickness() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.thickness_;
}
inline void CircleCrosshair::_internal_set_thickness(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thickness_ = value;
}

// bool use_outline_color = 2;
inline bool CircleCrosshair::has_use_outline_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CircleCrosshair::clear_use_outline_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_outline_color_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CircleCrosshair::use_outline_color() const {
  // @@protoc_insertion_point(field_get:aim.CircleCrosshair.use_outline_color)
  return _internal_use_outline_color();
}
inline void CircleCrosshair::set_use_outline_color(bool value) {
  _internal_set_use_outline_color(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:aim.CircleCrosshair.use_outline_color)
}
inline bool CircleCrosshair::_internal_use_outline_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_outline_color_;
}
inline void CircleCrosshair::_internal_set_use_outline_color(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_outline_color_ = value;
}

// -------------------------------------------------------------------

// ImageCrosshair

// string file_name = 1;
inline bool ImageCrosshair::has_file_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ImageCrosshair::clear_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageCrosshair::file_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.ImageCrosshair.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageCrosshair::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aim.ImageCrosshair.file_name)
}
inline std::string* ImageCrosshair::mutable_file_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:aim.ImageCrosshair.file_name)
  return _s;
}
inline const std::string& ImageCrosshair::_internal_file_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_name_.Get();
}
inline void ImageCrosshair::_internal_set_file_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_name_.Set(value, GetArena());
}
inline std::string* ImageCrosshair::_internal_mutable_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_name_.Mutable( GetArena());
}
inline std::string* ImageCrosshair::release_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.ImageCrosshair.file_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.file_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.file_name_.Set("", GetArena());
  }
  return released;
}
inline void ImageCrosshair::set_allocated_file_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:aim.ImageCrosshair.file_name)
}

// -------------------------------------------------------------------

// CrosshairLayer

// .aim.StoredColor override_color = 1;
inline bool CrosshairLayer::has_override_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.override_color_ != nullptr);
  return value;
}
inline const ::aim::StoredColor& CrosshairLayer::_internal_override_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::StoredColor* p = _impl_.override_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::StoredColor&>(::aim::_StoredColor_default_instance_);
}
inline const ::aim::StoredColor& CrosshairLayer::override_color() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.CrosshairLayer.override_color)
  return _internal_override_color();
}
inline void CrosshairLayer::unsafe_arena_set_allocated_override_color(::aim::StoredColor* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.override_color_);
  }
  _impl_.override_color_ = reinterpret_cast<::aim::StoredColor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.CrosshairLayer.override_color)
}
inline ::aim::StoredColor* CrosshairLayer::release_override_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aim::StoredColor* released = _impl_.override_color_;
  _impl_.override_color_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::StoredColor* CrosshairLayer::unsafe_arena_release_override_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.CrosshairLayer.override_color)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aim::StoredColor* temp = _impl_.override_color_;
  _impl_.override_color_ = nullptr;
  return temp;
}
inline ::aim::StoredColor* CrosshairLayer::_internal_mutable_override_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.override_color_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::StoredColor>(GetArena());
    _impl_.override_color_ = reinterpret_cast<::aim::StoredColor*>(p);
  }
  return _impl_.override_color_;
}
inline ::aim::StoredColor* CrosshairLayer::mutable_override_color() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::aim::StoredColor* _msg = _internal_mutable_override_color();
  // @@protoc_insertion_point(field_mutable:aim.CrosshairLayer.override_color)
  return _msg;
}
inline void CrosshairLayer::set_allocated_override_color(::aim::StoredColor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.override_color_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.override_color_ = reinterpret_cast<::aim::StoredColor*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.CrosshairLayer.override_color)
}

// .aim.StoredColor override_outline_color = 2;
inline bool CrosshairLayer::has_override_outline_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.override_outline_color_ != nullptr);
  return value;
}
inline const ::aim::StoredColor& CrosshairLayer::_internal_override_outline_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::StoredColor* p = _impl_.override_outline_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::StoredColor&>(::aim::_StoredColor_default_instance_);
}
inline const ::aim::StoredColor& CrosshairLayer::override_outline_color() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.CrosshairLayer.override_outline_color)
  return _internal_override_outline_color();
}
inline void CrosshairLayer::unsafe_arena_set_allocated_override_outline_color(::aim::StoredColor* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.override_outline_color_);
  }
  _impl_.override_outline_color_ = reinterpret_cast<::aim::StoredColor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.CrosshairLayer.override_outline_color)
}
inline ::aim::StoredColor* CrosshairLayer::release_override_outline_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aim::StoredColor* released = _impl_.override_outline_color_;
  _impl_.override_outline_color_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::StoredColor* CrosshairLayer::unsafe_arena_release_override_outline_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.CrosshairLayer.override_outline_color)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aim::StoredColor* temp = _impl_.override_outline_color_;
  _impl_.override_outline_color_ = nullptr;
  return temp;
}
inline ::aim::StoredColor* CrosshairLayer::_internal_mutable_override_outline_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.override_outline_color_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::StoredColor>(GetArena());
    _impl_.override_outline_color_ = reinterpret_cast<::aim::StoredColor*>(p);
  }
  return _impl_.override_outline_color_;
}
inline ::aim::StoredColor* CrosshairLayer::mutable_override_outline_color() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::aim::StoredColor* _msg = _internal_mutable_override_outline_color();
  // @@protoc_insertion_point(field_mutable:aim.CrosshairLayer.override_outline_color)
  return _msg;
}
inline void CrosshairLayer::set_allocated_override_outline_color(::aim::StoredColor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.override_outline_color_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.override_outline_color_ = reinterpret_cast<::aim::StoredColor*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.CrosshairLayer.override_outline_color)
}

// float scale = 3;
inline bool CrosshairLayer::has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CrosshairLayer::clear_scale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CrosshairLayer::scale() const {
  // @@protoc_insertion_point(field_get:aim.CrosshairLayer.scale)
  return _internal_scale();
}
inline void CrosshairLayer::set_scale(float value) {
  _internal_set_scale(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:aim.CrosshairLayer.scale)
}
inline float CrosshairLayer::_internal_scale() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scale_;
}
inline void CrosshairLayer::_internal_set_scale(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scale_ = value;
}

// float alpha = 4;
inline bool CrosshairLayer::has_alpha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CrosshairLayer::clear_alpha() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alpha_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CrosshairLayer::alpha() const {
  // @@protoc_insertion_point(field_get:aim.CrosshairLayer.alpha)
  return _internal_alpha();
}
inline void CrosshairLayer::set_alpha(float value) {
  _internal_set_alpha(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:aim.CrosshairLayer.alpha)
}
inline float CrosshairLayer::_internal_alpha() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alpha_;
}
inline void CrosshairLayer::_internal_set_alpha(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alpha_ = value;
}

// .aim.DotCrosshair dot = 10;
inline bool CrosshairLayer::has_dot() const {
  return type_case() == kDot;
}
inline bool CrosshairLayer::_internal_has_dot() const {
  return type_case() == kDot;
}
inline void CrosshairLayer::set_has_dot() {
  _impl_._oneof_case_[0] = kDot;
}
inline void CrosshairLayer::clear_dot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kDot) {
    if (GetArena() == nullptr) {
      delete _impl_.type_.dot_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.dot_);
    }
    clear_has_type();
  }
}
inline ::aim::DotCrosshair* CrosshairLayer::release_dot() {
  // @@protoc_insertion_point(field_release:aim.CrosshairLayer.dot)
  if (type_case() == kDot) {
    clear_has_type();
    auto* temp = _impl_.type_.dot_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.dot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aim::DotCrosshair& CrosshairLayer::_internal_dot() const {
  return type_case() == kDot ? *_impl_.type_.dot_ : reinterpret_cast<::aim::DotCrosshair&>(::aim::_DotCrosshair_default_instance_);
}
inline const ::aim::DotCrosshair& CrosshairLayer::dot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.CrosshairLayer.dot)
  return _internal_dot();
}
inline ::aim::DotCrosshair* CrosshairLayer::unsafe_arena_release_dot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aim.CrosshairLayer.dot)
  if (type_case() == kDot) {
    clear_has_type();
    auto* temp = _impl_.type_.dot_;
    _impl_.type_.dot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CrosshairLayer::unsafe_arena_set_allocated_dot(::aim::DotCrosshair* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_type();
  if (value) {
    set_has_dot();
    _impl_.type_.dot_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.CrosshairLayer.dot)
}
inline ::aim::DotCrosshair* CrosshairLayer::_internal_mutable_dot() {
  if (type_case() != kDot) {
    clear_type();
    set_has_dot();
    _impl_.type_.dot_ =
        ::google::protobuf::Message::DefaultConstruct<::aim::DotCrosshair>(GetArena());
  }
  return _impl_.type_.dot_;
}
inline ::aim::DotCrosshair* CrosshairLayer::mutable_dot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aim::DotCrosshair* _msg = _internal_mutable_dot();
  // @@protoc_insertion_point(field_mutable:aim.CrosshairLayer.dot)
  return _msg;
}

// .aim.PlusCrosshair plus = 11;
inline bool CrosshairLayer::has_plus() const {
  return type_case() == kPlus;
}
inline bool CrosshairLayer::_internal_has_plus() const {
  return type_case() == kPlus;
}
inline void CrosshairLayer::set_has_plus() {
  _impl_._oneof_case_[0] = kPlus;
}
inline void CrosshairLayer::clear_plus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kPlus) {
    if (GetArena() == nullptr) {
      delete _impl_.type_.plus_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.plus_);
    }
    clear_has_type();
  }
}
inline ::aim::PlusCrosshair* CrosshairLayer::release_plus() {
  // @@protoc_insertion_point(field_release:aim.CrosshairLayer.plus)
  if (type_case() == kPlus) {
    clear_has_type();
    auto* temp = _impl_.type_.plus_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.plus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aim::PlusCrosshair& CrosshairLayer::_internal_plus() const {
  return type_case() == kPlus ? *_impl_.type_.plus_ : reinterpret_cast<::aim::PlusCrosshair&>(::aim::_PlusCrosshair_default_instance_);
}
inline const ::aim::PlusCrosshair& CrosshairLayer::plus() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.CrosshairLayer.plus)
  return _internal_plus();
}
inline ::aim::PlusCrosshair* CrosshairLayer::unsafe_arena_release_plus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aim.CrosshairLayer.plus)
  if (type_case() == kPlus) {
    clear_has_type();
    auto* temp = _impl_.type_.plus_;
    _impl_.type_.plus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CrosshairLayer::unsafe_arena_set_allocated_plus(::aim::PlusCrosshair* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_type();
  if (value) {
    set_has_plus();
    _impl_.type_.plus_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.CrosshairLayer.plus)
}
inline ::aim::PlusCrosshair* CrosshairLayer::_internal_mutable_plus() {
  if (type_case() != kPlus) {
    clear_type();
    set_has_plus();
    _impl_.type_.plus_ =
        ::google::protobuf::Message::DefaultConstruct<::aim::PlusCrosshair>(GetArena());
  }
  return _impl_.type_.plus_;
}
inline ::aim::PlusCrosshair* CrosshairLayer::mutable_plus() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aim::PlusCrosshair* _msg = _internal_mutable_plus();
  // @@protoc_insertion_point(field_mutable:aim.CrosshairLayer.plus)
  return _msg;
}

// .aim.ImageCrosshair image = 12;
inline bool CrosshairLayer::has_image() const {
  return type_case() == kImage;
}
inline bool CrosshairLayer::_internal_has_image() const {
  return type_case() == kImage;
}
inline void CrosshairLayer::set_has_image() {
  _impl_._oneof_case_[0] = kImage;
}
inline void CrosshairLayer::clear_image() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kImage) {
    if (GetArena() == nullptr) {
      delete _impl_.type_.image_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.image_);
    }
    clear_has_type();
  }
}
inline ::aim::ImageCrosshair* CrosshairLayer::release_image() {
  // @@protoc_insertion_point(field_release:aim.CrosshairLayer.image)
  if (type_case() == kImage) {
    clear_has_type();
    auto* temp = _impl_.type_.image_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aim::ImageCrosshair& CrosshairLayer::_internal_image() const {
  return type_case() == kImage ? *_impl_.type_.image_ : reinterpret_cast<::aim::ImageCrosshair&>(::aim::_ImageCrosshair_default_instance_);
}
inline const ::aim::ImageCrosshair& CrosshairLayer::image() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.CrosshairLayer.image)
  return _internal_image();
}
inline ::aim::ImageCrosshair* CrosshairLayer::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aim.CrosshairLayer.image)
  if (type_case() == kImage) {
    clear_has_type();
    auto* temp = _impl_.type_.image_;
    _impl_.type_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CrosshairLayer::unsafe_arena_set_allocated_image(::aim::ImageCrosshair* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_type();
  if (value) {
    set_has_image();
    _impl_.type_.image_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.CrosshairLayer.image)
}
inline ::aim::ImageCrosshair* CrosshairLayer::_internal_mutable_image() {
  if (type_case() != kImage) {
    clear_type();
    set_has_image();
    _impl_.type_.image_ =
        ::google::protobuf::Message::DefaultConstruct<::aim::ImageCrosshair>(GetArena());
  }
  return _impl_.type_.image_;
}
inline ::aim::ImageCrosshair* CrosshairLayer::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aim::ImageCrosshair* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:aim.CrosshairLayer.image)
  return _msg;
}

// .aim.CircleCrosshair circle = 13;
inline bool CrosshairLayer::has_circle() const {
  return type_case() == kCircle;
}
inline bool CrosshairLayer::_internal_has_circle() const {
  return type_case() == kCircle;
}
inline void CrosshairLayer::set_has_circle() {
  _impl_._oneof_case_[0] = kCircle;
}
inline void CrosshairLayer::clear_circle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kCircle) {
    if (GetArena() == nullptr) {
      delete _impl_.type_.circle_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.circle_);
    }
    clear_has_type();
  }
}
inline ::aim::CircleCrosshair* CrosshairLayer::release_circle() {
  // @@protoc_insertion_point(field_release:aim.CrosshairLayer.circle)
  if (type_case() == kCircle) {
    clear_has_type();
    auto* temp = _impl_.type_.circle_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.circle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aim::CircleCrosshair& CrosshairLayer::_internal_circle() const {
  return type_case() == kCircle ? *_impl_.type_.circle_ : reinterpret_cast<::aim::CircleCrosshair&>(::aim::_CircleCrosshair_default_instance_);
}
inline const ::aim::CircleCrosshair& CrosshairLayer::circle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.CrosshairLayer.circle)
  return _internal_circle();
}
inline ::aim::CircleCrosshair* CrosshairLayer::unsafe_arena_release_circle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aim.CrosshairLayer.circle)
  if (type_case() == kCircle) {
    clear_has_type();
    auto* temp = _impl_.type_.circle_;
    _impl_.type_.circle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CrosshairLayer::unsafe_arena_set_allocated_circle(::aim::CircleCrosshair* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_type();
  if (value) {
    set_has_circle();
    _impl_.type_.circle_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.CrosshairLayer.circle)
}
inline ::aim::CircleCrosshair* CrosshairLayer::_internal_mutable_circle() {
  if (type_case() != kCircle) {
    clear_type();
    set_has_circle();
    _impl_.type_.circle_ =
        ::google::protobuf::Message::DefaultConstruct<::aim::CircleCrosshair>(GetArena());
  }
  return _impl_.type_.circle_;
}
inline ::aim::CircleCrosshair* CrosshairLayer::mutable_circle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aim::CircleCrosshair* _msg = _internal_mutable_circle();
  // @@protoc_insertion_point(field_mutable:aim.CrosshairLayer.circle)
  return _msg;
}

inline bool CrosshairLayer::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void CrosshairLayer::clear_has_type() {
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}
inline CrosshairLayer::TypeCase CrosshairLayer::type_case() const {
  return CrosshairLayer::TypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Crosshair

// string name = 1;
inline bool Crosshair::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Crosshair::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Crosshair::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Crosshair.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Crosshair::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aim.Crosshair.name)
}
inline std::string* Crosshair::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:aim.Crosshair.name)
  return _s;
}
inline const std::string& Crosshair::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Crosshair::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Crosshair::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Crosshair::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Crosshair.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void Crosshair::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:aim.Crosshair.name)
}

// repeated .aim.CrosshairLayer layers = 2;
inline int Crosshair::_internal_layers_size() const {
  return _internal_layers().size();
}
inline int Crosshair::layers_size() const {
  return _internal_layers_size();
}
inline void Crosshair::clear_layers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layers_.Clear();
}
inline ::aim::CrosshairLayer* Crosshair::mutable_layers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:aim.Crosshair.layers)
  return _internal_mutable_layers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::aim::CrosshairLayer>* Crosshair::mutable_layers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:aim.Crosshair.layers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_layers();
}
inline const ::aim::CrosshairLayer& Crosshair::layers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Crosshair.layers)
  return _internal_layers().Get(index);
}
inline ::aim::CrosshairLayer* Crosshair::add_layers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::aim::CrosshairLayer* _add = _internal_mutable_layers()->Add();
  // @@protoc_insertion_point(field_add:aim.Crosshair.layers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::aim::CrosshairLayer>& Crosshair::layers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:aim.Crosshair.layers)
  return _internal_layers();
}
inline const ::google::protobuf::RepeatedPtrField<::aim::CrosshairLayer>&
Crosshair::_internal_layers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.layers_;
}
inline ::google::protobuf::RepeatedPtrField<::aim::CrosshairLayer>*
Crosshair::_internal_mutable_layers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.layers_;
}

// -------------------------------------------------------------------

// HealthBarSettings

// bool show = 1;
inline bool HealthBarSettings::has_show() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HealthBarSettings::clear_show() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool HealthBarSettings::show() const {
  // @@protoc_insertion_point(field_get:aim.HealthBarSettings.show)
  return _internal_show();
}
inline void HealthBarSettings::set_show(bool value) {
  _internal_set_show(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:aim.HealthBarSettings.show)
}
inline bool HealthBarSettings::_internal_show() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.show_;
}
inline void HealthBarSettings::_internal_set_show(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_ = value;
}

// bool only_damaged = 2;
inline bool HealthBarSettings::has_only_damaged() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void HealthBarSettings::clear_only_damaged() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.only_damaged_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool HealthBarSettings::only_damaged() const {
  // @@protoc_insertion_point(field_get:aim.HealthBarSettings.only_damaged)
  return _internal_only_damaged();
}
inline void HealthBarSettings::set_only_damaged(bool value) {
  _internal_set_only_damaged(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:aim.HealthBarSettings.only_damaged)
}
inline bool HealthBarSettings::_internal_only_damaged() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.only_damaged_;
}
inline void HealthBarSettings::_internal_set_only_damaged(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.only_damaged_ = value;
}

// float height = 3;
inline bool HealthBarSettings::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void HealthBarSettings::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float HealthBarSettings::height() const {
  // @@protoc_insertion_point(field_get:aim.HealthBarSettings.height)
  return _internal_height();
}
inline void HealthBarSettings::set_height(float value) {
  _internal_set_height(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:aim.HealthBarSettings.height)
}
inline float HealthBarSettings::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void HealthBarSettings::_internal_set_height(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// float width = 4;
inline bool HealthBarSettings::has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void HealthBarSettings::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float HealthBarSettings::width() const {
  // @@protoc_insertion_point(field_get:aim.HealthBarSettings.width)
  return _internal_width();
}
inline void HealthBarSettings::set_width(float value) {
  _internal_set_width(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:aim.HealthBarSettings.width)
}
inline float HealthBarSettings::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void HealthBarSettings::_internal_set_width(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// float height_above_target = 5;
inline bool HealthBarSettings::has_height_above_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void HealthBarSettings::clear_height_above_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_above_target_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float HealthBarSettings::height_above_target() const {
  // @@protoc_insertion_point(field_get:aim.HealthBarSettings.height_above_target)
  return _internal_height_above_target();
}
inline void HealthBarSettings::set_height_above_target(float value) {
  _internal_set_height_above_target(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:aim.HealthBarSettings.height_above_target)
}
inline float HealthBarSettings::_internal_height_above_target() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_above_target_;
}
inline void HealthBarSettings::_internal_set_height_above_target(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_above_target_ = value;
}

// -------------------------------------------------------------------

// SavedCrosshairs

// repeated .aim.Crosshair crosshairs = 1;
inline int SavedCrosshairs::_internal_crosshairs_size() const {
  return _internal_crosshairs().size();
}
inline int SavedCrosshairs::crosshairs_size() const {
  return _internal_crosshairs_size();
}
inline void SavedCrosshairs::clear_crosshairs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crosshairs_.Clear();
}
inline ::aim::Crosshair* SavedCrosshairs::mutable_crosshairs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:aim.SavedCrosshairs.crosshairs)
  return _internal_mutable_crosshairs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::aim::Crosshair>* SavedCrosshairs::mutable_crosshairs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:aim.SavedCrosshairs.crosshairs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_crosshairs();
}
inline const ::aim::Crosshair& SavedCrosshairs::crosshairs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.SavedCrosshairs.crosshairs)
  return _internal_crosshairs().Get(index);
}
inline ::aim::Crosshair* SavedCrosshairs::add_crosshairs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::aim::Crosshair* _add = _internal_mutable_crosshairs()->Add();
  // @@protoc_insertion_point(field_add:aim.SavedCrosshairs.crosshairs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::aim::Crosshair>& SavedCrosshairs::crosshairs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:aim.SavedCrosshairs.crosshairs)
  return _internal_crosshairs();
}
inline const ::google::protobuf::RepeatedPtrField<::aim::Crosshair>&
SavedCrosshairs::_internal_crosshairs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crosshairs_;
}
inline ::google::protobuf::RepeatedPtrField<::aim::Crosshair>*
SavedCrosshairs::_internal_mutable_crosshairs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.crosshairs_;
}

// -------------------------------------------------------------------

// Settings

// float dpi = 1;
inline bool Settings::has_dpi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Settings::clear_dpi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dpi_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Settings::dpi() const {
  // @@protoc_insertion_point(field_get:aim.Settings.dpi)
  return _internal_dpi();
}
inline void Settings::set_dpi(float value) {
  _internal_set_dpi(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:aim.Settings.dpi)
}
inline float Settings::_internal_dpi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dpi_;
}
inline void Settings::_internal_set_dpi(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dpi_ = value;
}

// float cm_per_360 = 2;
inline bool Settings::has_cm_per_360() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Settings::clear_cm_per_360() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cm_per_360_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float Settings::cm_per_360() const {
  // @@protoc_insertion_point(field_get:aim.Settings.cm_per_360)
  return _internal_cm_per_360();
}
inline void Settings::set_cm_per_360(float value) {
  _internal_set_cm_per_360(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:aim.Settings.cm_per_360)
}
inline float Settings::_internal_cm_per_360() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cm_per_360_;
}
inline void Settings::_internal_set_cm_per_360(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cm_per_360_ = value;
}

// float cm_per_360_jitter = 11;
inline bool Settings::has_cm_per_360_jitter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Settings::clear_cm_per_360_jitter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cm_per_360_jitter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float Settings::cm_per_360_jitter() const {
  // @@protoc_insertion_point(field_get:aim.Settings.cm_per_360_jitter)
  return _internal_cm_per_360_jitter();
}
inline void Settings::set_cm_per_360_jitter(float value) {
  _internal_set_cm_per_360_jitter(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:aim.Settings.cm_per_360_jitter)
}
inline float Settings::_internal_cm_per_360_jitter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cm_per_360_jitter_;
}
inline void Settings::_internal_set_cm_per_360_jitter(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cm_per_360_jitter_ = value;
}

// string theme_name = 3;
inline bool Settings::has_theme_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Settings::clear_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Settings::theme_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Settings.theme_name)
  return _internal_theme_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Settings::set_theme_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.theme_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aim.Settings.theme_name)
}
inline std::string* Settings::mutable_theme_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_theme_name();
  // @@protoc_insertion_point(field_mutable:aim.Settings.theme_name)
  return _s;
}
inline const std::string& Settings::_internal_theme_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.theme_name_.Get();
}
inline void Settings::_internal_set_theme_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.theme_name_.Set(value, GetArena());
}
inline std::string* Settings::_internal_mutable_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.theme_name_.Mutable( GetArena());
}
inline std::string* Settings::release_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Settings.theme_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.theme_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.theme_name_.Set("", GetArena());
  }
  return released;
}
inline void Settings::set_allocated_theme_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.theme_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.theme_name_.IsDefault()) {
    _impl_.theme_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:aim.Settings.theme_name)
}

// float metronome_bpm = 4;
inline bool Settings::has_metronome_bpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Settings::clear_metronome_bpm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metronome_bpm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float Settings::metronome_bpm() const {
  // @@protoc_insertion_point(field_get:aim.Settings.metronome_bpm)
  return _internal_metronome_bpm();
}
inline void Settings::set_metronome_bpm(float value) {
  _internal_set_metronome_bpm(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:aim.Settings.metronome_bpm)
}
inline float Settings::_internal_metronome_bpm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metronome_bpm_;
}
inline void Settings::_internal_set_metronome_bpm(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metronome_bpm_ = value;
}

// float crosshair_size = 5;
inline bool Settings::has_crosshair_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Settings::clear_crosshair_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crosshair_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float Settings::crosshair_size() const {
  // @@protoc_insertion_point(field_get:aim.Settings.crosshair_size)
  return _internal_crosshair_size();
}
inline void Settings::set_crosshair_size(float value) {
  _internal_set_crosshair_size(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:aim.Settings.crosshair_size)
}
inline float Settings::_internal_crosshair_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crosshair_size_;
}
inline void Settings::_internal_set_crosshair_size(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crosshair_size_ = value;
}

// string current_crosshair_name = 6;
inline bool Settings::has_current_crosshair_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Settings::clear_current_crosshair_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_crosshair_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Settings::current_crosshair_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Settings.current_crosshair_name)
  return _internal_current_crosshair_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Settings::set_current_crosshair_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.current_crosshair_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aim.Settings.current_crosshair_name)
}
inline std::string* Settings::mutable_current_crosshair_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_current_crosshair_name();
  // @@protoc_insertion_point(field_mutable:aim.Settings.current_crosshair_name)
  return _s;
}
inline const std::string& Settings::_internal_current_crosshair_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_crosshair_name_.Get();
}
inline void Settings::_internal_set_current_crosshair_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.current_crosshair_name_.Set(value, GetArena());
}
inline std::string* Settings::_internal_mutable_current_crosshair_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.current_crosshair_name_.Mutable( GetArena());
}
inline std::string* Settings::release_current_crosshair_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Settings.current_crosshair_name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.current_crosshair_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.current_crosshair_name_.Set("", GetArena());
  }
  return released;
}
inline void Settings::set_allocated_current_crosshair_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.current_crosshair_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.current_crosshair_name_.IsDefault()) {
    _impl_.current_crosshair_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:aim.Settings.current_crosshair_name)
}

// repeated .aim.Crosshair saved_crosshairs = 7;
inline int Settings::_internal_saved_crosshairs_size() const {
  return _internal_saved_crosshairs().size();
}
inline int Settings::saved_crosshairs_size() const {
  return _internal_saved_crosshairs_size();
}
inline void Settings::clear_saved_crosshairs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saved_crosshairs_.Clear();
}
inline ::aim::Crosshair* Settings::mutable_saved_crosshairs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:aim.Settings.saved_crosshairs)
  return _internal_mutable_saved_crosshairs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::aim::Crosshair>* Settings::mutable_saved_crosshairs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:aim.Settings.saved_crosshairs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_saved_crosshairs();
}
inline const ::aim::Crosshair& Settings::saved_crosshairs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Settings.saved_crosshairs)
  return _internal_saved_crosshairs().Get(index);
}
inline ::aim::Crosshair* Settings::add_saved_crosshairs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::aim::Crosshair* _add = _internal_mutable_saved_crosshairs()->Add();
  // @@protoc_insertion_point(field_add:aim.Settings.saved_crosshairs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::aim::Crosshair>& Settings::saved_crosshairs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:aim.Settings.saved_crosshairs)
  return _internal_saved_crosshairs();
}
inline const ::google::protobuf::RepeatedPtrField<::aim::Crosshair>&
Settings::_internal_saved_crosshairs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.saved_crosshairs_;
}
inline ::google::protobuf::RepeatedPtrField<::aim::Crosshair>*
Settings::_internal_mutable_saved_crosshairs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.saved_crosshairs_;
}

// bool disable_click_to_start = 8;
inline bool Settings::has_disable_click_to_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Settings::clear_disable_click_to_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_click_to_start_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool Settings::disable_click_to_start() const {
  // @@protoc_insertion_point(field_get:aim.Settings.disable_click_to_start)
  return _internal_disable_click_to_start();
}
inline void Settings::set_disable_click_to_start(bool value) {
  _internal_set_disable_click_to_start(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:aim.Settings.disable_click_to_start)
}
inline bool Settings::_internal_disable_click_to_start() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disable_click_to_start_;
}
inline void Settings::_internal_set_disable_click_to_start(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_click_to_start_ = value;
}

// .aim.Keybinds keybinds = 9;
inline bool Settings::has_keybinds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.keybinds_ != nullptr);
  return value;
}
inline void Settings::clear_keybinds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.keybinds_ != nullptr) _impl_.keybinds_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::aim::Keybinds& Settings::_internal_keybinds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::Keybinds* p = _impl_.keybinds_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::Keybinds&>(::aim::_Keybinds_default_instance_);
}
inline const ::aim::Keybinds& Settings::keybinds() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Settings.keybinds)
  return _internal_keybinds();
}
inline void Settings::unsafe_arena_set_allocated_keybinds(::aim::Keybinds* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.keybinds_);
  }
  _impl_.keybinds_ = reinterpret_cast<::aim::Keybinds*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.Settings.keybinds)
}
inline ::aim::Keybinds* Settings::release_keybinds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aim::Keybinds* released = _impl_.keybinds_;
  _impl_.keybinds_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::Keybinds* Settings::unsafe_arena_release_keybinds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Settings.keybinds)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aim::Keybinds* temp = _impl_.keybinds_;
  _impl_.keybinds_ = nullptr;
  return temp;
}
inline ::aim::Keybinds* Settings::_internal_mutable_keybinds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.keybinds_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::Keybinds>(GetArena());
    _impl_.keybinds_ = reinterpret_cast<::aim::Keybinds*>(p);
  }
  return _impl_.keybinds_;
}
inline ::aim::Keybinds* Settings::mutable_keybinds() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::aim::Keybinds* _msg = _internal_mutable_keybinds();
  // @@protoc_insertion_point(field_mutable:aim.Settings.keybinds)
  return _msg;
}
inline void Settings::set_allocated_keybinds(::aim::Keybinds* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.keybinds_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.keybinds_ = reinterpret_cast<::aim::Keybinds*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.Settings.keybinds)
}

// bool auto_hold_tracking = 10;
inline bool Settings::has_auto_hold_tracking() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Settings::clear_auto_hold_tracking() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_hold_tracking_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool Settings::auto_hold_tracking() const {
  // @@protoc_insertion_point(field_get:aim.Settings.auto_hold_tracking)
  return _internal_auto_hold_tracking();
}
inline void Settings::set_auto_hold_tracking(bool value) {
  _internal_set_auto_hold_tracking(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:aim.Settings.auto_hold_tracking)
}
inline bool Settings::_internal_auto_hold_tracking() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_hold_tracking_;
}
inline void Settings::_internal_set_auto_hold_tracking(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_hold_tracking_ = value;
}

// .aim.HealthBarSettings health_bar = 12;
inline bool Settings::has_health_bar() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.health_bar_ != nullptr);
  return value;
}
inline void Settings::clear_health_bar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.health_bar_ != nullptr) _impl_.health_bar_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::aim::HealthBarSettings& Settings::_internal_health_bar() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::HealthBarSettings* p = _impl_.health_bar_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::HealthBarSettings&>(::aim::_HealthBarSettings_default_instance_);
}
inline const ::aim::HealthBarSettings& Settings::health_bar() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Settings.health_bar)
  return _internal_health_bar();
}
inline void Settings::unsafe_arena_set_allocated_health_bar(::aim::HealthBarSettings* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.health_bar_);
  }
  _impl_.health_bar_ = reinterpret_cast<::aim::HealthBarSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.Settings.health_bar)
}
inline ::aim::HealthBarSettings* Settings::release_health_bar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::aim::HealthBarSettings* released = _impl_.health_bar_;
  _impl_.health_bar_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::HealthBarSettings* Settings::unsafe_arena_release_health_bar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Settings.health_bar)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::aim::HealthBarSettings* temp = _impl_.health_bar_;
  _impl_.health_bar_ = nullptr;
  return temp;
}
inline ::aim::HealthBarSettings* Settings::_internal_mutable_health_bar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.health_bar_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::HealthBarSettings>(GetArena());
    _impl_.health_bar_ = reinterpret_cast<::aim::HealthBarSettings*>(p);
  }
  return _impl_.health_bar_;
}
inline ::aim::HealthBarSettings* Settings::mutable_health_bar() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::aim::HealthBarSettings* _msg = _internal_mutable_health_bar();
  // @@protoc_insertion_point(field_mutable:aim.Settings.health_bar)
  return _msg;
}
inline void Settings::set_allocated_health_bar(::aim::HealthBarSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.health_bar_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.health_bar_ = reinterpret_cast<::aim::HealthBarSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.Settings.health_bar)
}

// bool disable_per_scenario_settings = 13;
inline bool Settings::has_disable_per_scenario_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Settings::clear_disable_per_scenario_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_per_scenario_settings_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Settings::disable_per_scenario_settings() const {
  // @@protoc_insertion_point(field_get:aim.Settings.disable_per_scenario_settings)
  return _internal_disable_per_scenario_settings();
}
inline void Settings::set_disable_per_scenario_settings(bool value) {
  _internal_set_disable_per_scenario_settings(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:aim.Settings.disable_per_scenario_settings)
}
inline bool Settings::_internal_disable_per_scenario_settings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disable_per_scenario_settings_;
}
inline void Settings::_internal_set_disable_per_scenario_settings(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_per_scenario_settings_ = value;
}

// -------------------------------------------------------------------

// ScenarioSettings

// float cm_per_360 = 1;
inline bool ScenarioSettings::has_cm_per_360() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ScenarioSettings::clear_cm_per_360() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cm_per_360_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float ScenarioSettings::cm_per_360() const {
  // @@protoc_insertion_point(field_get:aim.ScenarioSettings.cm_per_360)
  return _internal_cm_per_360();
}
inline void ScenarioSettings::set_cm_per_360(float value) {
  _internal_set_cm_per_360(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:aim.ScenarioSettings.cm_per_360)
}
inline float ScenarioSettings::_internal_cm_per_360() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cm_per_360_;
}
inline void ScenarioSettings::_internal_set_cm_per_360(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cm_per_360_ = value;
}

// float cm_per_360_jitter = 6;
inline bool ScenarioSettings::has_cm_per_360_jitter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ScenarioSettings::clear_cm_per_360_jitter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cm_per_360_jitter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float ScenarioSettings::cm_per_360_jitter() const {
  // @@protoc_insertion_point(field_get:aim.ScenarioSettings.cm_per_360_jitter)
  return _internal_cm_per_360_jitter();
}
inline void ScenarioSettings::set_cm_per_360_jitter(float value) {
  _internal_set_cm_per_360_jitter(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:aim.ScenarioSettings.cm_per_360_jitter)
}
inline float ScenarioSettings::_internal_cm_per_360_jitter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cm_per_360_jitter_;
}
inline void ScenarioSettings::_internal_set_cm_per_360_jitter(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cm_per_360_jitter_ = value;
}

// string theme_name = 2;
inline bool ScenarioSettings::has_theme_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ScenarioSettings::clear_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.theme_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScenarioSettings::theme_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.ScenarioSettings.theme_name)
  return _internal_theme_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScenarioSettings::set_theme_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.theme_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aim.ScenarioSettings.theme_name)
}
inline std::string* ScenarioSettings::mutable_theme_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_theme_name();
  // @@protoc_insertion_point(field_mutable:aim.ScenarioSettings.theme_name)
  return _s;
}
inline const std::string& ScenarioSettings::_internal_theme_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.theme_name_.Get();
}
inline void ScenarioSettings::_internal_set_theme_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.theme_name_.Set(value, GetArena());
}
inline std::string* ScenarioSettings::_internal_mutable_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.theme_name_.Mutable( GetArena());
}
inline std::string* ScenarioSettings::release_theme_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.ScenarioSettings.theme_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.theme_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.theme_name_.Set("", GetArena());
  }
  return released;
}
inline void ScenarioSettings::set_allocated_theme_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.theme_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.theme_name_.IsDefault()) {
    _impl_.theme_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:aim.ScenarioSettings.theme_name)
}

// float metronome_bpm = 3;
inline bool ScenarioSettings::has_metronome_bpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ScenarioSettings::clear_metronome_bpm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metronome_bpm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float ScenarioSettings::metronome_bpm() const {
  // @@protoc_insertion_point(field_get:aim.ScenarioSettings.metronome_bpm)
  return _internal_metronome_bpm();
}
inline void ScenarioSettings::set_metronome_bpm(float value) {
  _internal_set_metronome_bpm(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:aim.ScenarioSettings.metronome_bpm)
}
inline float ScenarioSettings::_internal_metronome_bpm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metronome_bpm_;
}
inline void ScenarioSettings::_internal_set_metronome_bpm(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metronome_bpm_ = value;
}

// float crosshair_size = 4;
inline bool ScenarioSettings::has_crosshair_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ScenarioSettings::clear_crosshair_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crosshair_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float ScenarioSettings::crosshair_size() const {
  // @@protoc_insertion_point(field_get:aim.ScenarioSettings.crosshair_size)
  return _internal_crosshair_size();
}
inline void ScenarioSettings::set_crosshair_size(float value) {
  _internal_set_crosshair_size(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:aim.ScenarioSettings.crosshair_size)
}
inline float ScenarioSettings::_internal_crosshair_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crosshair_size_;
}
inline void ScenarioSettings::_internal_set_crosshair_size(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crosshair_size_ = value;
}

// string crosshair_name = 5;
inline bool ScenarioSettings::has_crosshair_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ScenarioSettings::clear_crosshair_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crosshair_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ScenarioSettings::crosshair_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.ScenarioSettings.crosshair_name)
  return _internal_crosshair_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScenarioSettings::set_crosshair_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.crosshair_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aim.ScenarioSettings.crosshair_name)
}
inline std::string* ScenarioSettings::mutable_crosshair_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_crosshair_name();
  // @@protoc_insertion_point(field_mutable:aim.ScenarioSettings.crosshair_name)
  return _s;
}
inline const std::string& ScenarioSettings::_internal_crosshair_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crosshair_name_.Get();
}
inline void ScenarioSettings::_internal_set_crosshair_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.crosshair_name_.Set(value, GetArena());
}
inline std::string* ScenarioSettings::_internal_mutable_crosshair_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.crosshair_name_.Mutable( GetArena());
}
inline std::string* ScenarioSettings::release_crosshair_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.ScenarioSettings.crosshair_name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.crosshair_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.crosshair_name_.Set("", GetArena());
  }
  return released;
}
inline void ScenarioSettings::set_allocated_crosshair_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.crosshair_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.crosshair_name_.IsDefault()) {
    _impl_.crosshair_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:aim.ScenarioSettings.crosshair_name)
}

// bool auto_hold_tracking = 7;
inline bool ScenarioSettings::has_auto_hold_tracking() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ScenarioSettings::clear_auto_hold_tracking() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_hold_tracking_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool ScenarioSettings::auto_hold_tracking() const {
  // @@protoc_insertion_point(field_get:aim.ScenarioSettings.auto_hold_tracking)
  return _internal_auto_hold_tracking();
}
inline void ScenarioSettings::set_auto_hold_tracking(bool value) {
  _internal_set_auto_hold_tracking(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:aim.ScenarioSettings.auto_hold_tracking)
}
inline bool ScenarioSettings::_internal_auto_hold_tracking() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_hold_tracking_;
}
inline void ScenarioSettings::_internal_set_auto_hold_tracking(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_hold_tracking_ = value;
}

// .aim.HealthBarSettings health_bar = 8;
inline bool ScenarioSettings::has_health_bar() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.health_bar_ != nullptr);
  return value;
}
inline void ScenarioSettings::clear_health_bar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.health_bar_ != nullptr) _impl_.health_bar_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::aim::HealthBarSettings& ScenarioSettings::_internal_health_bar() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::HealthBarSettings* p = _impl_.health_bar_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::HealthBarSettings&>(::aim::_HealthBarSettings_default_instance_);
}
inline const ::aim::HealthBarSettings& ScenarioSettings::health_bar() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.ScenarioSettings.health_bar)
  return _internal_health_bar();
}
inline void ScenarioSettings::unsafe_arena_set_allocated_health_bar(::aim::HealthBarSettings* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.health_bar_);
  }
  _impl_.health_bar_ = reinterpret_cast<::aim::HealthBarSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.ScenarioSettings.health_bar)
}
inline ::aim::HealthBarSettings* ScenarioSettings::release_health_bar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aim::HealthBarSettings* released = _impl_.health_bar_;
  _impl_.health_bar_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::HealthBarSettings* ScenarioSettings::unsafe_arena_release_health_bar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.ScenarioSettings.health_bar)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aim::HealthBarSettings* temp = _impl_.health_bar_;
  _impl_.health_bar_ = nullptr;
  return temp;
}
inline ::aim::HealthBarSettings* ScenarioSettings::_internal_mutable_health_bar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.health_bar_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::HealthBarSettings>(GetArena());
    _impl_.health_bar_ = reinterpret_cast<::aim::HealthBarSettings*>(p);
  }
  return _impl_.health_bar_;
}
inline ::aim::HealthBarSettings* ScenarioSettings::mutable_health_bar() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::aim::HealthBarSettings* _msg = _internal_mutable_health_bar();
  // @@protoc_insertion_point(field_mutable:aim.ScenarioSettings.health_bar)
  return _msg;
}
inline void ScenarioSettings::set_allocated_health_bar(::aim::HealthBarSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.health_bar_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.health_bar_ = reinterpret_cast<::aim::HealthBarSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.ScenarioSettings.health_bar)
}

// -------------------------------------------------------------------

// KeyMapping

// string mapping1 = 1;
inline bool KeyMapping::has_mapping1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KeyMapping::clear_mapping1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapping1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KeyMapping::mapping1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.KeyMapping.mapping1)
  return _internal_mapping1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyMapping::set_mapping1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mapping1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aim.KeyMapping.mapping1)
}
inline std::string* KeyMapping::mutable_mapping1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mapping1();
  // @@protoc_insertion_point(field_mutable:aim.KeyMapping.mapping1)
  return _s;
}
inline const std::string& KeyMapping::_internal_mapping1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mapping1_.Get();
}
inline void KeyMapping::_internal_set_mapping1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mapping1_.Set(value, GetArena());
}
inline std::string* KeyMapping::_internal_mutable_mapping1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.mapping1_.Mutable( GetArena());
}
inline std::string* KeyMapping::release_mapping1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.KeyMapping.mapping1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.mapping1_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.mapping1_.Set("", GetArena());
  }
  return released;
}
inline void KeyMapping::set_allocated_mapping1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mapping1_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mapping1_.IsDefault()) {
    _impl_.mapping1_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:aim.KeyMapping.mapping1)
}

// string mapping2 = 2;
inline bool KeyMapping::has_mapping2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KeyMapping::clear_mapping2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapping2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KeyMapping::mapping2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.KeyMapping.mapping2)
  return _internal_mapping2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyMapping::set_mapping2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mapping2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aim.KeyMapping.mapping2)
}
inline std::string* KeyMapping::mutable_mapping2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mapping2();
  // @@protoc_insertion_point(field_mutable:aim.KeyMapping.mapping2)
  return _s;
}
inline const std::string& KeyMapping::_internal_mapping2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mapping2_.Get();
}
inline void KeyMapping::_internal_set_mapping2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mapping2_.Set(value, GetArena());
}
inline std::string* KeyMapping::_internal_mutable_mapping2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.mapping2_.Mutable( GetArena());
}
inline std::string* KeyMapping::release_mapping2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.KeyMapping.mapping2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.mapping2_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.mapping2_.Set("", GetArena());
  }
  return released;
}
inline void KeyMapping::set_allocated_mapping2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mapping2_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mapping2_.IsDefault()) {
    _impl_.mapping2_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:aim.KeyMapping.mapping2)
}

// string mapping3 = 3;
inline bool KeyMapping::has_mapping3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KeyMapping::clear_mapping3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapping3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KeyMapping::mapping3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.KeyMapping.mapping3)
  return _internal_mapping3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyMapping::set_mapping3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mapping3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aim.KeyMapping.mapping3)
}
inline std::string* KeyMapping::mutable_mapping3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mapping3();
  // @@protoc_insertion_point(field_mutable:aim.KeyMapping.mapping3)
  return _s;
}
inline const std::string& KeyMapping::_internal_mapping3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mapping3_.Get();
}
inline void KeyMapping::_internal_set_mapping3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mapping3_.Set(value, GetArena());
}
inline std::string* KeyMapping::_internal_mutable_mapping3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.mapping3_.Mutable( GetArena());
}
inline std::string* KeyMapping::release_mapping3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.KeyMapping.mapping3)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.mapping3_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.mapping3_.Set("", GetArena());
  }
  return released;
}
inline void KeyMapping::set_allocated_mapping3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.mapping3_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mapping3_.IsDefault()) {
    _impl_.mapping3_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:aim.KeyMapping.mapping3)
}

// string mapping4 = 4;
inline bool KeyMapping::has_mapping4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void KeyMapping::clear_mapping4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mapping4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& KeyMapping::mapping4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.KeyMapping.mapping4)
  return _internal_mapping4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyMapping::set_mapping4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.mapping4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:aim.KeyMapping.mapping4)
}
inline std::string* KeyMapping::mutable_mapping4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mapping4();
  // @@protoc_insertion_point(field_mutable:aim.KeyMapping.mapping4)
  return _s;
}
inline const std::string& KeyMapping::_internal_mapping4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mapping4_.Get();
}
inline void KeyMapping::_internal_set_mapping4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.mapping4_.Set(value, GetArena());
}
inline std::string* KeyMapping::_internal_mutable_mapping4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.mapping4_.Mutable( GetArena());
}
inline std::string* KeyMapping::release_mapping4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.KeyMapping.mapping4)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.mapping4_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.mapping4_.Set("", GetArena());
  }
  return released;
}
inline void KeyMapping::set_allocated_mapping4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.mapping4_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mapping4_.IsDefault()) {
    _impl_.mapping4_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:aim.KeyMapping.mapping4)
}

// -------------------------------------------------------------------

// Keybinds

// .aim.KeyMapping fire = 1;
inline bool Keybinds::has_fire() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fire_ != nullptr);
  return value;
}
inline void Keybinds::clear_fire() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fire_ != nullptr) _impl_.fire_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::aim::KeyMapping& Keybinds::_internal_fire() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::KeyMapping* p = _impl_.fire_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::KeyMapping&>(::aim::_KeyMapping_default_instance_);
}
inline const ::aim::KeyMapping& Keybinds::fire() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Keybinds.fire)
  return _internal_fire();
}
inline void Keybinds::unsafe_arena_set_allocated_fire(::aim::KeyMapping* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fire_);
  }
  _impl_.fire_ = reinterpret_cast<::aim::KeyMapping*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.Keybinds.fire)
}
inline ::aim::KeyMapping* Keybinds::release_fire() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aim::KeyMapping* released = _impl_.fire_;
  _impl_.fire_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::KeyMapping* Keybinds::unsafe_arena_release_fire() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Keybinds.fire)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aim::KeyMapping* temp = _impl_.fire_;
  _impl_.fire_ = nullptr;
  return temp;
}
inline ::aim::KeyMapping* Keybinds::_internal_mutable_fire() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fire_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::KeyMapping>(GetArena());
    _impl_.fire_ = reinterpret_cast<::aim::KeyMapping*>(p);
  }
  return _impl_.fire_;
}
inline ::aim::KeyMapping* Keybinds::mutable_fire() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::aim::KeyMapping* _msg = _internal_mutable_fire();
  // @@protoc_insertion_point(field_mutable:aim.Keybinds.fire)
  return _msg;
}
inline void Keybinds::set_allocated_fire(::aim::KeyMapping* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.fire_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.fire_ = reinterpret_cast<::aim::KeyMapping*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.Keybinds.fire)
}

// .aim.KeyMapping restart_scenario = 2;
inline bool Keybinds::has_restart_scenario() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.restart_scenario_ != nullptr);
  return value;
}
inline void Keybinds::clear_restart_scenario() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.restart_scenario_ != nullptr) _impl_.restart_scenario_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::aim::KeyMapping& Keybinds::_internal_restart_scenario() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::KeyMapping* p = _impl_.restart_scenario_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::KeyMapping&>(::aim::_KeyMapping_default_instance_);
}
inline const ::aim::KeyMapping& Keybinds::restart_scenario() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Keybinds.restart_scenario)
  return _internal_restart_scenario();
}
inline void Keybinds::unsafe_arena_set_allocated_restart_scenario(::aim::KeyMapping* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.restart_scenario_);
  }
  _impl_.restart_scenario_ = reinterpret_cast<::aim::KeyMapping*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.Keybinds.restart_scenario)
}
inline ::aim::KeyMapping* Keybinds::release_restart_scenario() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aim::KeyMapping* released = _impl_.restart_scenario_;
  _impl_.restart_scenario_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::KeyMapping* Keybinds::unsafe_arena_release_restart_scenario() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Keybinds.restart_scenario)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::aim::KeyMapping* temp = _impl_.restart_scenario_;
  _impl_.restart_scenario_ = nullptr;
  return temp;
}
inline ::aim::KeyMapping* Keybinds::_internal_mutable_restart_scenario() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.restart_scenario_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::KeyMapping>(GetArena());
    _impl_.restart_scenario_ = reinterpret_cast<::aim::KeyMapping*>(p);
  }
  return _impl_.restart_scenario_;
}
inline ::aim::KeyMapping* Keybinds::mutable_restart_scenario() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::aim::KeyMapping* _msg = _internal_mutable_restart_scenario();
  // @@protoc_insertion_point(field_mutable:aim.Keybinds.restart_scenario)
  return _msg;
}
inline void Keybinds::set_allocated_restart_scenario(::aim::KeyMapping* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.restart_scenario_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.restart_scenario_ = reinterpret_cast<::aim::KeyMapping*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.Keybinds.restart_scenario)
}

// .aim.KeyMapping next_scenario = 3;
inline bool Keybinds::has_next_scenario() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.next_scenario_ != nullptr);
  return value;
}
inline void Keybinds::clear_next_scenario() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.next_scenario_ != nullptr) _impl_.next_scenario_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::aim::KeyMapping& Keybinds::_internal_next_scenario() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::KeyMapping* p = _impl_.next_scenario_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::KeyMapping&>(::aim::_KeyMapping_default_instance_);
}
inline const ::aim::KeyMapping& Keybinds::next_scenario() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Keybinds.next_scenario)
  return _internal_next_scenario();
}
inline void Keybinds::unsafe_arena_set_allocated_next_scenario(::aim::KeyMapping* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.next_scenario_);
  }
  _impl_.next_scenario_ = reinterpret_cast<::aim::KeyMapping*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.Keybinds.next_scenario)
}
inline ::aim::KeyMapping* Keybinds::release_next_scenario() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aim::KeyMapping* released = _impl_.next_scenario_;
  _impl_.next_scenario_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::KeyMapping* Keybinds::unsafe_arena_release_next_scenario() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Keybinds.next_scenario)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::aim::KeyMapping* temp = _impl_.next_scenario_;
  _impl_.next_scenario_ = nullptr;
  return temp;
}
inline ::aim::KeyMapping* Keybinds::_internal_mutable_next_scenario() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.next_scenario_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::KeyMapping>(GetArena());
    _impl_.next_scenario_ = reinterpret_cast<::aim::KeyMapping*>(p);
  }
  return _impl_.next_scenario_;
}
inline ::aim::KeyMapping* Keybinds::mutable_next_scenario() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::aim::KeyMapping* _msg = _internal_mutable_next_scenario();
  // @@protoc_insertion_point(field_mutable:aim.Keybinds.next_scenario)
  return _msg;
}
inline void Keybinds::set_allocated_next_scenario(::aim::KeyMapping* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.next_scenario_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.next_scenario_ = reinterpret_cast<::aim::KeyMapping*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.Keybinds.next_scenario)
}

// .aim.KeyMapping quick_settings = 4;
inline bool Keybinds::has_quick_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.quick_settings_ != nullptr);
  return value;
}
inline void Keybinds::clear_quick_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quick_settings_ != nullptr) _impl_.quick_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::aim::KeyMapping& Keybinds::_internal_quick_settings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::KeyMapping* p = _impl_.quick_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::KeyMapping&>(::aim::_KeyMapping_default_instance_);
}
inline const ::aim::KeyMapping& Keybinds::quick_settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Keybinds.quick_settings)
  return _internal_quick_settings();
}
inline void Keybinds::unsafe_arena_set_allocated_quick_settings(::aim::KeyMapping* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.quick_settings_);
  }
  _impl_.quick_settings_ = reinterpret_cast<::aim::KeyMapping*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.Keybinds.quick_settings)
}
inline ::aim::KeyMapping* Keybinds::release_quick_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::aim::KeyMapping* released = _impl_.quick_settings_;
  _impl_.quick_settings_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::KeyMapping* Keybinds::unsafe_arena_release_quick_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Keybinds.quick_settings)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::aim::KeyMapping* temp = _impl_.quick_settings_;
  _impl_.quick_settings_ = nullptr;
  return temp;
}
inline ::aim::KeyMapping* Keybinds::_internal_mutable_quick_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quick_settings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::KeyMapping>(GetArena());
    _impl_.quick_settings_ = reinterpret_cast<::aim::KeyMapping*>(p);
  }
  return _impl_.quick_settings_;
}
inline ::aim::KeyMapping* Keybinds::mutable_quick_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::aim::KeyMapping* _msg = _internal_mutable_quick_settings();
  // @@protoc_insertion_point(field_mutable:aim.Keybinds.quick_settings)
  return _msg;
}
inline void Keybinds::set_allocated_quick_settings(::aim::KeyMapping* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.quick_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.quick_settings_ = reinterpret_cast<::aim::KeyMapping*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.Keybinds.quick_settings)
}

// .aim.KeyMapping adjust_crosshair_size = 5;
inline bool Keybinds::has_adjust_crosshair_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.adjust_crosshair_size_ != nullptr);
  return value;
}
inline void Keybinds::clear_adjust_crosshair_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.adjust_crosshair_size_ != nullptr) _impl_.adjust_crosshair_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::aim::KeyMapping& Keybinds::_internal_adjust_crosshair_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::KeyMapping* p = _impl_.adjust_crosshair_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::KeyMapping&>(::aim::_KeyMapping_default_instance_);
}
inline const ::aim::KeyMapping& Keybinds::adjust_crosshair_size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Keybinds.adjust_crosshair_size)
  return _internal_adjust_crosshair_size();
}
inline void Keybinds::unsafe_arena_set_allocated_adjust_crosshair_size(::aim::KeyMapping* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.adjust_crosshair_size_);
  }
  _impl_.adjust_crosshair_size_ = reinterpret_cast<::aim::KeyMapping*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.Keybinds.adjust_crosshair_size)
}
inline ::aim::KeyMapping* Keybinds::release_adjust_crosshair_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::aim::KeyMapping* released = _impl_.adjust_crosshair_size_;
  _impl_.adjust_crosshair_size_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::KeyMapping* Keybinds::unsafe_arena_release_adjust_crosshair_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Keybinds.adjust_crosshair_size)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::aim::KeyMapping* temp = _impl_.adjust_crosshair_size_;
  _impl_.adjust_crosshair_size_ = nullptr;
  return temp;
}
inline ::aim::KeyMapping* Keybinds::_internal_mutable_adjust_crosshair_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.adjust_crosshair_size_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::KeyMapping>(GetArena());
    _impl_.adjust_crosshair_size_ = reinterpret_cast<::aim::KeyMapping*>(p);
  }
  return _impl_.adjust_crosshair_size_;
}
inline ::aim::KeyMapping* Keybinds::mutable_adjust_crosshair_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::aim::KeyMapping* _msg = _internal_mutable_adjust_crosshair_size();
  // @@protoc_insertion_point(field_mutable:aim.Keybinds.adjust_crosshair_size)
  return _msg;
}
inline void Keybinds::set_allocated_adjust_crosshair_size(::aim::KeyMapping* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.adjust_crosshair_size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.adjust_crosshair_size_ = reinterpret_cast<::aim::KeyMapping*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.Keybinds.adjust_crosshair_size)
}

// .aim.KeyMapping quick_metronome = 6;
inline bool Keybinds::has_quick_metronome() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.quick_metronome_ != nullptr);
  return value;
}
inline void Keybinds::clear_quick_metronome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quick_metronome_ != nullptr) _impl_.quick_metronome_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::aim::KeyMapping& Keybinds::_internal_quick_metronome() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::KeyMapping* p = _impl_.quick_metronome_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::KeyMapping&>(::aim::_KeyMapping_default_instance_);
}
inline const ::aim::KeyMapping& Keybinds::quick_metronome() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Keybinds.quick_metronome)
  return _internal_quick_metronome();
}
inline void Keybinds::unsafe_arena_set_allocated_quick_metronome(::aim::KeyMapping* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.quick_metronome_);
  }
  _impl_.quick_metronome_ = reinterpret_cast<::aim::KeyMapping*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.Keybinds.quick_metronome)
}
inline ::aim::KeyMapping* Keybinds::release_quick_metronome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::aim::KeyMapping* released = _impl_.quick_metronome_;
  _impl_.quick_metronome_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::KeyMapping* Keybinds::unsafe_arena_release_quick_metronome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Keybinds.quick_metronome)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::aim::KeyMapping* temp = _impl_.quick_metronome_;
  _impl_.quick_metronome_ = nullptr;
  return temp;
}
inline ::aim::KeyMapping* Keybinds::_internal_mutable_quick_metronome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quick_metronome_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::KeyMapping>(GetArena());
    _impl_.quick_metronome_ = reinterpret_cast<::aim::KeyMapping*>(p);
  }
  return _impl_.quick_metronome_;
}
inline ::aim::KeyMapping* Keybinds::mutable_quick_metronome() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::aim::KeyMapping* _msg = _internal_mutable_quick_metronome();
  // @@protoc_insertion_point(field_mutable:aim.Keybinds.quick_metronome)
  return _msg;
}
inline void Keybinds::set_allocated_quick_metronome(::aim::KeyMapping* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.quick_metronome_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.quick_metronome_ = reinterpret_cast<::aim::KeyMapping*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.Keybinds.quick_metronome)
}

// .aim.KeyMapping edit_scenario = 7;
inline bool Keybinds::has_edit_scenario() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_scenario_ != nullptr);
  return value;
}
inline void Keybinds::clear_edit_scenario() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.edit_scenario_ != nullptr) _impl_.edit_scenario_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::aim::KeyMapping& Keybinds::_internal_edit_scenario() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::KeyMapping* p = _impl_.edit_scenario_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::KeyMapping&>(::aim::_KeyMapping_default_instance_);
}
inline const ::aim::KeyMapping& Keybinds::edit_scenario() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Keybinds.edit_scenario)
  return _internal_edit_scenario();
}
inline void Keybinds::unsafe_arena_set_allocated_edit_scenario(::aim::KeyMapping* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.edit_scenario_);
  }
  _impl_.edit_scenario_ = reinterpret_cast<::aim::KeyMapping*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.Keybinds.edit_scenario)
}
inline ::aim::KeyMapping* Keybinds::release_edit_scenario() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::aim::KeyMapping* released = _impl_.edit_scenario_;
  _impl_.edit_scenario_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::KeyMapping* Keybinds::unsafe_arena_release_edit_scenario() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Keybinds.edit_scenario)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::aim::KeyMapping* temp = _impl_.edit_scenario_;
  _impl_.edit_scenario_ = nullptr;
  return temp;
}
inline ::aim::KeyMapping* Keybinds::_internal_mutable_edit_scenario() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.edit_scenario_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::KeyMapping>(GetArena());
    _impl_.edit_scenario_ = reinterpret_cast<::aim::KeyMapping*>(p);
  }
  return _impl_.edit_scenario_;
}
inline ::aim::KeyMapping* Keybinds::mutable_edit_scenario() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::aim::KeyMapping* _msg = _internal_mutable_edit_scenario();
  // @@protoc_insertion_point(field_mutable:aim.Keybinds.edit_scenario)
  return _msg;
}
inline void Keybinds::set_allocated_edit_scenario(::aim::KeyMapping* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.edit_scenario_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.edit_scenario_ = reinterpret_cast<::aim::KeyMapping*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.Keybinds.edit_scenario)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace aim


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // settings_2eproto_2epb_2eh
