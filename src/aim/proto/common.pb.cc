// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common.proto
// Protobuf C++ Version: 5.29.3

#include "common.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace aim {

inline constexpr StoredVec3::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        x_{0},
        y_{0},
        z_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StoredVec3::StoredVec3(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StoredVec3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoredVec3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoredVec3DefaultTypeInternal() {}
  union {
    StoredVec3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoredVec3DefaultTypeInternal _StoredVec3_default_instance_;

inline constexpr StoredVec2::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        x_{0},
        y_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StoredVec2::StoredVec2(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StoredVec2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoredVec2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoredVec2DefaultTypeInternal() {}
  union {
    StoredVec2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoredVec2DefaultTypeInternal _StoredVec2_default_instance_;

inline constexpr StoredRgb::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        r_{0},
        g_{0},
        b_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StoredRgb::StoredRgb(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StoredRgbDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoredRgbDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoredRgbDefaultTypeInternal() {}
  union {
    StoredRgb _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoredRgbDefaultTypeInternal _StoredRgb_default_instance_;

inline constexpr StoredColor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        hex_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        r_{0},
        g_{0},
        b_{0},
        multiplier_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StoredColor::StoredColor(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StoredColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoredColorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoredColorDefaultTypeInternal() {}
  union {
    StoredColor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoredColorDefaultTypeInternal _StoredColor_default_instance_;
}  // namespace aim
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_common_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_2eproto = nullptr;
const ::uint32_t
    TableStruct_common_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::aim::StoredVec3, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::StoredVec3, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::StoredVec3, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::aim::StoredVec3, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::aim::StoredVec3, _impl_.z_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::aim::StoredVec2, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::StoredVec2, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::StoredVec2, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::aim::StoredVec2, _impl_.y_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::aim::StoredRgb, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::StoredRgb, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::StoredRgb, _impl_.r_),
        PROTOBUF_FIELD_OFFSET(::aim::StoredRgb, _impl_.g_),
        PROTOBUF_FIELD_OFFSET(::aim::StoredRgb, _impl_.b_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::aim::StoredColor, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::StoredColor, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::StoredColor, _impl_.r_),
        PROTOBUF_FIELD_OFFSET(::aim::StoredColor, _impl_.g_),
        PROTOBUF_FIELD_OFFSET(::aim::StoredColor, _impl_.b_),
        PROTOBUF_FIELD_OFFSET(::aim::StoredColor, _impl_.hex_),
        PROTOBUF_FIELD_OFFSET(::aim::StoredColor, _impl_.multiplier_),
        1,
        2,
        3,
        0,
        4,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::aim::StoredVec3)},
        {14, 24, -1, sizeof(::aim::StoredVec2)},
        {26, 37, -1, sizeof(::aim::StoredRgb)},
        {40, 53, -1, sizeof(::aim::StoredColor)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::aim::_StoredVec3_default_instance_._instance,
    &::aim::_StoredVec2_default_instance_._instance,
    &::aim::_StoredRgb_default_instance_._instance,
    &::aim::_StoredColor_default_instance_._instance,
};
const char descriptor_table_protodef_common_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014common.proto\022\003aim\"-\n\nStoredVec3\022\t\n\001x\030\001"
    " \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\"\n\nStoredVec2"
    "\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\",\n\tStoredRgb\022\t\n\001r"
    "\030\001 \001(\005\022\t\n\001g\030\002 \001(\005\022\t\n\001b\030\003 \001(\005\"O\n\013StoredCo"
    "lor\022\t\n\001r\030\001 \001(\005\022\t\n\001g\030\002 \001(\005\022\t\n\001b\030\003 \001(\005\022\013\n\003"
    "hex\030\004 \001(\t\022\022\n\nmultiplier\030\005 \001(\002b\010editionsp"
    "\350\007"
};
static ::absl::once_flag descriptor_table_common_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_common_2eproto = {
    false,
    false,
    242,
    descriptor_table_protodef_common_2eproto,
    "common.proto",
    &descriptor_table_common_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_common_2eproto::offsets,
    file_level_enum_descriptors_common_2eproto,
    file_level_service_descriptors_common_2eproto,
};
namespace aim {
// ===================================================================

class StoredVec3::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StoredVec3>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StoredVec3, _impl_._has_bits_);
};

StoredVec3::StoredVec3(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.StoredVec3)
}
StoredVec3::StoredVec3(
    ::google::protobuf::Arena* arena, const StoredVec3& from)
    : StoredVec3(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE StoredVec3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StoredVec3::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
StoredVec3::~StoredVec3() {
  // @@protoc_insertion_point(destructor:aim.StoredVec3)
  SharedDtor(*this);
}
inline void StoredVec3::SharedDtor(MessageLite& self) {
  StoredVec3& this_ = static_cast<StoredVec3&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* StoredVec3::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StoredVec3(arena);
}
constexpr auto StoredVec3::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(StoredVec3),
                                            alignof(StoredVec3));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StoredVec3::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StoredVec3_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StoredVec3::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StoredVec3>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StoredVec3::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StoredVec3>(), &StoredVec3::ByteSizeLong,
            &StoredVec3::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StoredVec3, _impl_._cached_size_),
        false,
    },
    &StoredVec3::kDescriptorMethods,
    &descriptor_table_common_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StoredVec3::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> StoredVec3::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StoredVec3, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::StoredVec3>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(StoredVec3, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(StoredVec3, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(StoredVec3, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(StoredVec3, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(StoredVec3, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(StoredVec3, _impl_.z_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void StoredVec3::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.StoredVec3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StoredVec3::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StoredVec3& this_ = static_cast<const StoredVec3&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StoredVec3::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StoredVec3& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.StoredVec3)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // float x = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x(), target);
          }

          // float y = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y(), target);
          }

          // float z = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_z(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.StoredVec3)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StoredVec3::ByteSizeLong(const MessageLite& base) {
          const StoredVec3& this_ = static_cast<const StoredVec3&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StoredVec3::ByteSizeLong() const {
          const StoredVec3& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.StoredVec3)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // float x = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 5;
            }
            // float y = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 5;
            }
            // float z = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StoredVec3::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StoredVec3*>(&to_msg);
  auto& from = static_cast<const StoredVec3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.StoredVec3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StoredVec3::CopyFrom(const StoredVec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.StoredVec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StoredVec3::InternalSwap(StoredVec3* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoredVec3, _impl_.z_)
      + sizeof(StoredVec3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(StoredVec3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata StoredVec3::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StoredVec2::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StoredVec2>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StoredVec2, _impl_._has_bits_);
};

StoredVec2::StoredVec2(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.StoredVec2)
}
StoredVec2::StoredVec2(
    ::google::protobuf::Arena* arena, const StoredVec2& from)
    : StoredVec2(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE StoredVec2::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StoredVec2::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::y_));
}
StoredVec2::~StoredVec2() {
  // @@protoc_insertion_point(destructor:aim.StoredVec2)
  SharedDtor(*this);
}
inline void StoredVec2::SharedDtor(MessageLite& self) {
  StoredVec2& this_ = static_cast<StoredVec2&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* StoredVec2::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StoredVec2(arena);
}
constexpr auto StoredVec2::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(StoredVec2),
                                            alignof(StoredVec2));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StoredVec2::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StoredVec2_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StoredVec2::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StoredVec2>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StoredVec2::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StoredVec2>(), &StoredVec2::ByteSizeLong,
            &StoredVec2::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StoredVec2, _impl_._cached_size_),
        false,
    },
    &StoredVec2::kDescriptorMethods,
    &descriptor_table_common_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StoredVec2::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> StoredVec2::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StoredVec2, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::StoredVec2>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(StoredVec2, _impl_.y_)}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(StoredVec2, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(StoredVec2, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(StoredVec2, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void StoredVec2::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.StoredVec2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StoredVec2::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StoredVec2& this_ = static_cast<const StoredVec2&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StoredVec2::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StoredVec2& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.StoredVec2)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // float x = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x(), target);
          }

          // float y = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.StoredVec2)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StoredVec2::ByteSizeLong(const MessageLite& base) {
          const StoredVec2& this_ = static_cast<const StoredVec2&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StoredVec2::ByteSizeLong() const {
          const StoredVec2& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.StoredVec2)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // float x = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 5;
            }
            // float y = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StoredVec2::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StoredVec2*>(&to_msg);
  auto& from = static_cast<const StoredVec2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.StoredVec2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StoredVec2::CopyFrom(const StoredVec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.StoredVec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StoredVec2::InternalSwap(StoredVec2* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoredVec2, _impl_.y_)
      + sizeof(StoredVec2::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(StoredVec2, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata StoredVec2::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StoredRgb::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StoredRgb>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StoredRgb, _impl_._has_bits_);
};

StoredRgb::StoredRgb(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.StoredRgb)
}
StoredRgb::StoredRgb(
    ::google::protobuf::Arena* arena, const StoredRgb& from)
    : StoredRgb(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE StoredRgb::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StoredRgb::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, r_),
           0,
           offsetof(Impl_, b_) -
               offsetof(Impl_, r_) +
               sizeof(Impl_::b_));
}
StoredRgb::~StoredRgb() {
  // @@protoc_insertion_point(destructor:aim.StoredRgb)
  SharedDtor(*this);
}
inline void StoredRgb::SharedDtor(MessageLite& self) {
  StoredRgb& this_ = static_cast<StoredRgb&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* StoredRgb::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StoredRgb(arena);
}
constexpr auto StoredRgb::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(StoredRgb),
                                            alignof(StoredRgb));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StoredRgb::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StoredRgb_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StoredRgb::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StoredRgb>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StoredRgb::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StoredRgb>(), &StoredRgb::ByteSizeLong,
            &StoredRgb::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StoredRgb, _impl_._cached_size_),
        false,
    },
    &StoredRgb::kDescriptorMethods,
    &descriptor_table_common_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StoredRgb::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> StoredRgb::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StoredRgb, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::StoredRgb>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 r = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StoredRgb, _impl_.r_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(StoredRgb, _impl_.r_)}},
    // int32 g = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StoredRgb, _impl_.g_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(StoredRgb, _impl_.g_)}},
    // int32 b = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StoredRgb, _impl_.b_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(StoredRgb, _impl_.b_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 r = 1;
    {PROTOBUF_FIELD_OFFSET(StoredRgb, _impl_.r_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 g = 2;
    {PROTOBUF_FIELD_OFFSET(StoredRgb, _impl_.g_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 b = 3;
    {PROTOBUF_FIELD_OFFSET(StoredRgb, _impl_.b_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void StoredRgb::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.StoredRgb)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.r_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.b_) -
        reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.b_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StoredRgb::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StoredRgb& this_ = static_cast<const StoredRgb&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StoredRgb::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StoredRgb& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.StoredRgb)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // int32 r = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_r(), target);
          }

          // int32 g = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_g(), target);
          }

          // int32 b = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_b(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.StoredRgb)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StoredRgb::ByteSizeLong(const MessageLite& base) {
          const StoredRgb& this_ = static_cast<const StoredRgb&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StoredRgb::ByteSizeLong() const {
          const StoredRgb& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.StoredRgb)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // int32 r = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_r());
            }
            // int32 g = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_g());
            }
            // int32 b = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_b());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StoredRgb::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StoredRgb*>(&to_msg);
  auto& from = static_cast<const StoredRgb&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.StoredRgb)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.r_ = from._impl_.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.g_ = from._impl_.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.b_ = from._impl_.b_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StoredRgb::CopyFrom(const StoredRgb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.StoredRgb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StoredRgb::InternalSwap(StoredRgb* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoredRgb, _impl_.b_)
      + sizeof(StoredRgb::_impl_.b_)
      - PROTOBUF_FIELD_OFFSET(StoredRgb, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::google::protobuf::Metadata StoredRgb::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StoredColor::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StoredColor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StoredColor, _impl_._has_bits_);
};

StoredColor::StoredColor(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.StoredColor)
}
inline PROTOBUF_NDEBUG_INLINE StoredColor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::aim::StoredColor& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        hex_(arena, from.hex_) {}

StoredColor::StoredColor(
    ::google::protobuf::Arena* arena,
    const StoredColor& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StoredColor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, r_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, r_),
           offsetof(Impl_, multiplier_) -
               offsetof(Impl_, r_) +
               sizeof(Impl_::multiplier_));

  // @@protoc_insertion_point(copy_constructor:aim.StoredColor)
}
inline PROTOBUF_NDEBUG_INLINE StoredColor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        hex_(arena) {}

inline void StoredColor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, r_),
           0,
           offsetof(Impl_, multiplier_) -
               offsetof(Impl_, r_) +
               sizeof(Impl_::multiplier_));
}
StoredColor::~StoredColor() {
  // @@protoc_insertion_point(destructor:aim.StoredColor)
  SharedDtor(*this);
}
inline void StoredColor::SharedDtor(MessageLite& self) {
  StoredColor& this_ = static_cast<StoredColor&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.hex_.Destroy();
  this_._impl_.~Impl_();
}

inline void* StoredColor::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StoredColor(arena);
}
constexpr auto StoredColor::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StoredColor),
                                            alignof(StoredColor));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StoredColor::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StoredColor_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StoredColor::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StoredColor>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StoredColor::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StoredColor>(), &StoredColor::ByteSizeLong,
            &StoredColor::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StoredColor, _impl_._cached_size_),
        false,
    },
    &StoredColor::kDescriptorMethods,
    &descriptor_table_common_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StoredColor::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 27, 2> StoredColor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StoredColor, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::StoredColor>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 r = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StoredColor, _impl_.r_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(StoredColor, _impl_.r_)}},
    // int32 g = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StoredColor, _impl_.g_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(StoredColor, _impl_.g_)}},
    // int32 b = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StoredColor, _impl_.b_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(StoredColor, _impl_.b_)}},
    // string hex = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(StoredColor, _impl_.hex_)}},
    // float multiplier = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(StoredColor, _impl_.multiplier_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 r = 1;
    {PROTOBUF_FIELD_OFFSET(StoredColor, _impl_.r_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 g = 2;
    {PROTOBUF_FIELD_OFFSET(StoredColor, _impl_.g_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 b = 3;
    {PROTOBUF_FIELD_OFFSET(StoredColor, _impl_.b_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string hex = 4;
    {PROTOBUF_FIELD_OFFSET(StoredColor, _impl_.hex_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float multiplier = 5;
    {PROTOBUF_FIELD_OFFSET(StoredColor, _impl_.multiplier_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\17\0\0\0\3\0\0\0"
    "aim.StoredColor"
    "hex"
  }},
};

PROTOBUF_NOINLINE void StoredColor::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.StoredColor)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.hex_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.r_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.multiplier_) -
        reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.multiplier_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StoredColor::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StoredColor& this_ = static_cast<const StoredColor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StoredColor::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StoredColor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.StoredColor)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // int32 r = 1;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_r(), target);
          }

          // int32 g = 2;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_g(), target);
          }

          // int32 b = 3;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_b(), target);
          }

          // string hex = 4;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_hex();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "aim.StoredColor.hex");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // float multiplier = 5;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_multiplier(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.StoredColor)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StoredColor::ByteSizeLong(const MessageLite& base) {
          const StoredColor& this_ = static_cast<const StoredColor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StoredColor::ByteSizeLong() const {
          const StoredColor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.StoredColor)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // string hex = 4;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_hex());
            }
            // int32 r = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_r());
            }
            // int32 g = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_g());
            }
            // int32 b = 3;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_b());
            }
            // float multiplier = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StoredColor::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StoredColor*>(&to_msg);
  auto& from = static_cast<const StoredColor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.StoredColor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hex(from._internal_hex());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.r_ = from._impl_.r_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.g_ = from._impl_.g_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.b_ = from._impl_.b_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.multiplier_ = from._impl_.multiplier_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StoredColor::CopyFrom(const StoredColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.StoredColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StoredColor::InternalSwap(StoredColor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hex_, &other->_impl_.hex_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoredColor, _impl_.multiplier_)
      + sizeof(StoredColor::_impl_.multiplier_)
      - PROTOBUF_FIELD_OFFSET(StoredColor, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::google::protobuf::Metadata StoredColor::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace aim
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_common_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
