// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: replay.proto
// Protobuf C++ Version: 5.29.3

#ifndef replay_2eproto_2epb_2eh
#define replay_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
#include "scenario.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_replay_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_replay_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_replay_2eproto;
namespace aim {
class AddStaticTargetEvent;
struct AddStaticTargetEventDefaultTypeInternal;
extern AddStaticTargetEventDefaultTypeInternal _AddStaticTargetEvent_default_instance_;
class KillTargetEvent;
struct KillTargetEventDefaultTypeInternal;
extern KillTargetEventDefaultTypeInternal _KillTargetEvent_default_instance_;
class RemoveTargetEvent;
struct RemoveTargetEventDefaultTypeInternal;
extern RemoveTargetEventDefaultTypeInternal _RemoveTargetEvent_default_instance_;
class Replay;
struct ReplayDefaultTypeInternal;
extern ReplayDefaultTypeInternal _Replay_default_instance_;
class ReplayEvent;
struct ReplayEventDefaultTypeInternal;
extern ReplayEventDefaultTypeInternal _ReplayEvent_default_instance_;
class ShotMissedEvent;
struct ShotMissedEventDefaultTypeInternal;
extern ShotMissedEventDefaultTypeInternal _ShotMissedEvent_default_instance_;
}  // namespace aim
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace aim {

// ===================================================================


// -------------------------------------------------------------------

class ShotMissedEvent final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:aim.ShotMissedEvent) */ {
 public:
  inline ShotMissedEvent() : ShotMissedEvent(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ShotMissedEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ShotMissedEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ShotMissedEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline ShotMissedEvent(const ShotMissedEvent& from) : ShotMissedEvent(nullptr, from) {}
  inline ShotMissedEvent(ShotMissedEvent&& from) noexcept
      : ShotMissedEvent(nullptr, std::move(from)) {}
  inline ShotMissedEvent& operator=(const ShotMissedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShotMissedEvent& operator=(ShotMissedEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShotMissedEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShotMissedEvent* internal_default_instance() {
    return reinterpret_cast<const ShotMissedEvent*>(
        &_ShotMissedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ShotMissedEvent& a, ShotMissedEvent& b) { a.Swap(&b); }
  inline void Swap(ShotMissedEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShotMissedEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShotMissedEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ShotMissedEvent>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ShotMissedEvent& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ShotMissedEvent& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.ShotMissedEvent"; }

 protected:
  explicit ShotMissedEvent(::google::protobuf::Arena* arena);
  ShotMissedEvent(::google::protobuf::Arena* arena, const ShotMissedEvent& from);
  ShotMissedEvent(::google::protobuf::Arena* arena, ShotMissedEvent&& from) noexcept
      : ShotMissedEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:aim.ShotMissedEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ShotMissedEvent& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_replay_2eproto;
};
// -------------------------------------------------------------------

class RemoveTargetEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.RemoveTargetEvent) */ {
 public:
  inline RemoveTargetEvent() : RemoveTargetEvent(nullptr) {}
  ~RemoveTargetEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RemoveTargetEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RemoveTargetEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveTargetEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline RemoveTargetEvent(const RemoveTargetEvent& from) : RemoveTargetEvent(nullptr, from) {}
  inline RemoveTargetEvent(RemoveTargetEvent&& from) noexcept
      : RemoveTargetEvent(nullptr, std::move(from)) {}
  inline RemoveTargetEvent& operator=(const RemoveTargetEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveTargetEvent& operator=(RemoveTargetEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveTargetEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveTargetEvent* internal_default_instance() {
    return reinterpret_cast<const RemoveTargetEvent*>(
        &_RemoveTargetEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RemoveTargetEvent& a, RemoveTargetEvent& b) { a.Swap(&b); }
  inline void Swap(RemoveTargetEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveTargetEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveTargetEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RemoveTargetEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveTargetEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RemoveTargetEvent& from) { RemoveTargetEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RemoveTargetEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.RemoveTargetEvent"; }

 protected:
  explicit RemoveTargetEvent(::google::protobuf::Arena* arena);
  RemoveTargetEvent(::google::protobuf::Arena* arena, const RemoveTargetEvent& from);
  RemoveTargetEvent(::google::protobuf::Arena* arena, RemoveTargetEvent&& from) noexcept
      : RemoveTargetEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTargetIdFieldNumber = 1,
  };
  // int32 target_id = 1;
  bool has_target_id() const;
  void clear_target_id() ;
  ::int32_t target_id() const;
  void set_target_id(::int32_t value);

  private:
  ::int32_t _internal_target_id() const;
  void _internal_set_target_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:aim.RemoveTargetEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RemoveTargetEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t target_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replay_2eproto;
};
// -------------------------------------------------------------------

class KillTargetEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.KillTargetEvent) */ {
 public:
  inline KillTargetEvent() : KillTargetEvent(nullptr) {}
  ~KillTargetEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(KillTargetEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(KillTargetEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KillTargetEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline KillTargetEvent(const KillTargetEvent& from) : KillTargetEvent(nullptr, from) {}
  inline KillTargetEvent(KillTargetEvent&& from) noexcept
      : KillTargetEvent(nullptr, std::move(from)) {}
  inline KillTargetEvent& operator=(const KillTargetEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KillTargetEvent& operator=(KillTargetEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KillTargetEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KillTargetEvent* internal_default_instance() {
    return reinterpret_cast<const KillTargetEvent*>(
        &_KillTargetEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(KillTargetEvent& a, KillTargetEvent& b) { a.Swap(&b); }
  inline void Swap(KillTargetEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KillTargetEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KillTargetEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<KillTargetEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KillTargetEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const KillTargetEvent& from) { KillTargetEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(KillTargetEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.KillTargetEvent"; }

 protected:
  explicit KillTargetEvent(::google::protobuf::Arena* arena);
  KillTargetEvent(::google::protobuf::Arena* arena, const KillTargetEvent& from);
  KillTargetEvent(::google::protobuf::Arena* arena, KillTargetEvent&& from) noexcept
      : KillTargetEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTargetIdFieldNumber = 1,
  };
  // int32 target_id = 1;
  bool has_target_id() const;
  void clear_target_id() ;
  ::int32_t target_id() const;
  void set_target_id(::int32_t value);

  private:
  ::int32_t _internal_target_id() const;
  void _internal_set_target_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:aim.KillTargetEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const KillTargetEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t target_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replay_2eproto;
};
// -------------------------------------------------------------------

class AddStaticTargetEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.AddStaticTargetEvent) */ {
 public:
  inline AddStaticTargetEvent() : AddStaticTargetEvent(nullptr) {}
  ~AddStaticTargetEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AddStaticTargetEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AddStaticTargetEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddStaticTargetEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddStaticTargetEvent(const AddStaticTargetEvent& from) : AddStaticTargetEvent(nullptr, from) {}
  inline AddStaticTargetEvent(AddStaticTargetEvent&& from) noexcept
      : AddStaticTargetEvent(nullptr, std::move(from)) {}
  inline AddStaticTargetEvent& operator=(const AddStaticTargetEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddStaticTargetEvent& operator=(AddStaticTargetEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddStaticTargetEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddStaticTargetEvent* internal_default_instance() {
    return reinterpret_cast<const AddStaticTargetEvent*>(
        &_AddStaticTargetEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AddStaticTargetEvent& a, AddStaticTargetEvent& b) { a.Swap(&b); }
  inline void Swap(AddStaticTargetEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddStaticTargetEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddStaticTargetEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AddStaticTargetEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddStaticTargetEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddStaticTargetEvent& from) { AddStaticTargetEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AddStaticTargetEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.AddStaticTargetEvent"; }

 protected:
  explicit AddStaticTargetEvent(::google::protobuf::Arena* arena);
  AddStaticTargetEvent(::google::protobuf::Arena* arena, const AddStaticTargetEvent& from);
  AddStaticTargetEvent(::google::protobuf::Arena* arena, AddStaticTargetEvent&& from) noexcept
      : AddStaticTargetEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionFieldNumber = 2,
    kTargetIdFieldNumber = 1,
    kRadiusFieldNumber = 3,
  };
  // .aim.StoredVec3 position = 2;
  bool has_position() const;
  void clear_position() ;
  const ::aim::StoredVec3& position() const;
  PROTOBUF_NODISCARD ::aim::StoredVec3* release_position();
  ::aim::StoredVec3* mutable_position();
  void set_allocated_position(::aim::StoredVec3* value);
  void unsafe_arena_set_allocated_position(::aim::StoredVec3* value);
  ::aim::StoredVec3* unsafe_arena_release_position();

  private:
  const ::aim::StoredVec3& _internal_position() const;
  ::aim::StoredVec3* _internal_mutable_position();

  public:
  // int32 target_id = 1;
  bool has_target_id() const;
  void clear_target_id() ;
  ::int32_t target_id() const;
  void set_target_id(::int32_t value);

  private:
  ::int32_t _internal_target_id() const;
  void _internal_set_target_id(::int32_t value);

  public:
  // float radius = 3;
  bool has_radius() const;
  void clear_radius() ;
  float radius() const;
  void set_radius(float value);

  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);

  public:
  // @@protoc_insertion_point(class_scope:aim.AddStaticTargetEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddStaticTargetEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::aim::StoredVec3* position_;
    ::int32_t target_id_;
    float radius_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replay_2eproto;
};
// -------------------------------------------------------------------

class ReplayEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.ReplayEvent) */ {
 public:
  inline ReplayEvent() : ReplayEvent(nullptr) {}
  ~ReplayEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReplayEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReplayEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReplayEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReplayEvent(const ReplayEvent& from) : ReplayEvent(nullptr, from) {}
  inline ReplayEvent(ReplayEvent&& from) noexcept
      : ReplayEvent(nullptr, std::move(from)) {}
  inline ReplayEvent& operator=(const ReplayEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayEvent& operator=(ReplayEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplayEvent& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kKillTarget = 2,
    kRemoveTarget = 3,
    kAddStaticTarget = 4,
    kShotMissed = 5,
    TYPE_NOT_SET = 0,
  };
  static inline const ReplayEvent* internal_default_instance() {
    return reinterpret_cast<const ReplayEvent*>(
        &_ReplayEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ReplayEvent& a, ReplayEvent& b) { a.Swap(&b); }
  inline void Swap(ReplayEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplayEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReplayEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReplayEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReplayEvent& from) { ReplayEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReplayEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.ReplayEvent"; }

 protected:
  explicit ReplayEvent(::google::protobuf::Arena* arena);
  ReplayEvent(::google::protobuf::Arena* arena, const ReplayEvent& from);
  ReplayEvent(::google::protobuf::Arena* arena, ReplayEvent&& from) noexcept
      : ReplayEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFrameNumberFieldNumber = 1,
    kKillTargetFieldNumber = 2,
    kRemoveTargetFieldNumber = 3,
    kAddStaticTargetFieldNumber = 4,
    kShotMissedFieldNumber = 5,
  };
  // int32 frame_number = 1;
  bool has_frame_number() const;
  void clear_frame_number() ;
  ::int32_t frame_number() const;
  void set_frame_number(::int32_t value);

  private:
  ::int32_t _internal_frame_number() const;
  void _internal_set_frame_number(::int32_t value);

  public:
  // .aim.KillTargetEvent kill_target = 2;
  bool has_kill_target() const;
  private:
  bool _internal_has_kill_target() const;

  public:
  void clear_kill_target() ;
  const ::aim::KillTargetEvent& kill_target() const;
  PROTOBUF_NODISCARD ::aim::KillTargetEvent* release_kill_target();
  ::aim::KillTargetEvent* mutable_kill_target();
  void set_allocated_kill_target(::aim::KillTargetEvent* value);
  void unsafe_arena_set_allocated_kill_target(::aim::KillTargetEvent* value);
  ::aim::KillTargetEvent* unsafe_arena_release_kill_target();

  private:
  const ::aim::KillTargetEvent& _internal_kill_target() const;
  ::aim::KillTargetEvent* _internal_mutable_kill_target();

  public:
  // .aim.RemoveTargetEvent remove_target = 3;
  bool has_remove_target() const;
  private:
  bool _internal_has_remove_target() const;

  public:
  void clear_remove_target() ;
  const ::aim::RemoveTargetEvent& remove_target() const;
  PROTOBUF_NODISCARD ::aim::RemoveTargetEvent* release_remove_target();
  ::aim::RemoveTargetEvent* mutable_remove_target();
  void set_allocated_remove_target(::aim::RemoveTargetEvent* value);
  void unsafe_arena_set_allocated_remove_target(::aim::RemoveTargetEvent* value);
  ::aim::RemoveTargetEvent* unsafe_arena_release_remove_target();

  private:
  const ::aim::RemoveTargetEvent& _internal_remove_target() const;
  ::aim::RemoveTargetEvent* _internal_mutable_remove_target();

  public:
  // .aim.AddStaticTargetEvent add_static_target = 4;
  bool has_add_static_target() const;
  private:
  bool _internal_has_add_static_target() const;

  public:
  void clear_add_static_target() ;
  const ::aim::AddStaticTargetEvent& add_static_target() const;
  PROTOBUF_NODISCARD ::aim::AddStaticTargetEvent* release_add_static_target();
  ::aim::AddStaticTargetEvent* mutable_add_static_target();
  void set_allocated_add_static_target(::aim::AddStaticTargetEvent* value);
  void unsafe_arena_set_allocated_add_static_target(::aim::AddStaticTargetEvent* value);
  ::aim::AddStaticTargetEvent* unsafe_arena_release_add_static_target();

  private:
  const ::aim::AddStaticTargetEvent& _internal_add_static_target() const;
  ::aim::AddStaticTargetEvent* _internal_mutable_add_static_target();

  public:
  // .aim.ShotMissedEvent shot_missed = 5;
  bool has_shot_missed() const;
  private:
  bool _internal_has_shot_missed() const;

  public:
  void clear_shot_missed() ;
  const ::aim::ShotMissedEvent& shot_missed() const;
  PROTOBUF_NODISCARD ::aim::ShotMissedEvent* release_shot_missed();
  ::aim::ShotMissedEvent* mutable_shot_missed();
  void set_allocated_shot_missed(::aim::ShotMissedEvent* value);
  void unsafe_arena_set_allocated_shot_missed(::aim::ShotMissedEvent* value);
  ::aim::ShotMissedEvent* unsafe_arena_release_shot_missed();

  private:
  const ::aim::ShotMissedEvent& _internal_shot_missed() const;
  ::aim::ShotMissedEvent* _internal_mutable_shot_missed();

  public:
  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:aim.ReplayEvent)
 private:
  class _Internal;
  void set_has_kill_target();
  void set_has_remove_target();
  void set_has_add_static_target();
  void set_has_shot_missed();
  inline bool has_type() const;
  inline void clear_has_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 4,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReplayEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t frame_number_;
    union TypeUnion {
      constexpr TypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::aim::KillTargetEvent* kill_target_;
      ::aim::RemoveTargetEvent* remove_target_;
      ::aim::AddStaticTargetEvent* add_static_target_;
      ::aim::ShotMissedEvent* shot_missed_;
    } type_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replay_2eproto;
};
// -------------------------------------------------------------------

class Replay final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:aim.Replay) */ {
 public:
  inline Replay() : Replay(nullptr) {}
  ~Replay() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Replay* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Replay));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Replay(
      ::google::protobuf::internal::ConstantInitialized);

  inline Replay(const Replay& from) : Replay(nullptr, from) {}
  inline Replay(Replay&& from) noexcept
      : Replay(nullptr, std::move(from)) {}
  inline Replay& operator=(const Replay& from) {
    CopyFrom(from);
    return *this;
  }
  inline Replay& operator=(Replay&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Replay& default_instance() {
    return *internal_default_instance();
  }
  static inline const Replay* internal_default_instance() {
    return reinterpret_cast<const Replay*>(
        &_Replay_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Replay& a, Replay& b) { a.Swap(&b); }
  inline void Swap(Replay* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Replay* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Replay* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Replay>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Replay& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Replay& from) { Replay::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Replay* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "aim.Replay"; }

 protected:
  explicit Replay(::google::protobuf::Arena* arena);
  Replay(::google::protobuf::Arena* arena, const Replay& from);
  Replay(::google::protobuf::Arena* arena, Replay&& from) noexcept
      : Replay(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPitchYawsFieldNumber = 3,
    kEventsFieldNumber = 4,
    kRoomFieldNumber = 1,
    kReplayFpsFieldNumber = 2,
    kIsPokeBallFieldNumber = 5,
  };
  // repeated float pitch_yaws = 3;
  int pitch_yaws_size() const;
  private:
  int _internal_pitch_yaws_size() const;

  public:
  void clear_pitch_yaws() ;
  float pitch_yaws(int index) const;
  void set_pitch_yaws(int index, float value);
  void add_pitch_yaws(float value);
  const ::google::protobuf::RepeatedField<float>& pitch_yaws() const;
  ::google::protobuf::RepeatedField<float>* mutable_pitch_yaws();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_pitch_yaws() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_pitch_yaws();

  public:
  // repeated .aim.ReplayEvent events = 4;
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::aim::ReplayEvent* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField<::aim::ReplayEvent>* mutable_events();

  private:
  const ::google::protobuf::RepeatedPtrField<::aim::ReplayEvent>& _internal_events() const;
  ::google::protobuf::RepeatedPtrField<::aim::ReplayEvent>* _internal_mutable_events();
  public:
  const ::aim::ReplayEvent& events(int index) const;
  ::aim::ReplayEvent* add_events();
  const ::google::protobuf::RepeatedPtrField<::aim::ReplayEvent>& events() const;
  // .aim.Room room = 1;
  bool has_room() const;
  void clear_room() ;
  const ::aim::Room& room() const;
  PROTOBUF_NODISCARD ::aim::Room* release_room();
  ::aim::Room* mutable_room();
  void set_allocated_room(::aim::Room* value);
  void unsafe_arena_set_allocated_room(::aim::Room* value);
  ::aim::Room* unsafe_arena_release_room();

  private:
  const ::aim::Room& _internal_room() const;
  ::aim::Room* _internal_mutable_room();

  public:
  // int32 replay_fps = 2;
  bool has_replay_fps() const;
  void clear_replay_fps() ;
  ::int32_t replay_fps() const;
  void set_replay_fps(::int32_t value);

  private:
  ::int32_t _internal_replay_fps() const;
  void _internal_set_replay_fps(::int32_t value);

  public:
  // bool is_poke_ball = 5;
  bool has_is_poke_ball() const;
  void clear_is_poke_ball() ;
  bool is_poke_ball() const;
  void set_is_poke_ball(bool value);

  private:
  bool _internal_is_poke_ball() const;
  void _internal_set_is_poke_ball(bool value);

  public:
  // @@protoc_insertion_point(class_scope:aim.Replay)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Replay& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> pitch_yaws_;
    ::google::protobuf::RepeatedPtrField< ::aim::ReplayEvent > events_;
    ::aim::Room* room_;
    ::int32_t replay_fps_;
    bool is_poke_ball_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replay_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// KillTargetEvent

// int32 target_id = 1;
inline bool KillTargetEvent::has_target_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KillTargetEvent::clear_target_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t KillTargetEvent::target_id() const {
  // @@protoc_insertion_point(field_get:aim.KillTargetEvent.target_id)
  return _internal_target_id();
}
inline void KillTargetEvent::set_target_id(::int32_t value) {
  _internal_set_target_id(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:aim.KillTargetEvent.target_id)
}
inline ::int32_t KillTargetEvent::_internal_target_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_id_;
}
inline void KillTargetEvent::_internal_set_target_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_id_ = value;
}

// -------------------------------------------------------------------

// RemoveTargetEvent

// int32 target_id = 1;
inline bool RemoveTargetEvent::has_target_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RemoveTargetEvent::clear_target_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t RemoveTargetEvent::target_id() const {
  // @@protoc_insertion_point(field_get:aim.RemoveTargetEvent.target_id)
  return _internal_target_id();
}
inline void RemoveTargetEvent::set_target_id(::int32_t value) {
  _internal_set_target_id(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:aim.RemoveTargetEvent.target_id)
}
inline ::int32_t RemoveTargetEvent::_internal_target_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_id_;
}
inline void RemoveTargetEvent::_internal_set_target_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_id_ = value;
}

// -------------------------------------------------------------------

// ShotMissedEvent

// -------------------------------------------------------------------

// AddStaticTargetEvent

// int32 target_id = 1;
inline bool AddStaticTargetEvent::has_target_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AddStaticTargetEvent::clear_target_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t AddStaticTargetEvent::target_id() const {
  // @@protoc_insertion_point(field_get:aim.AddStaticTargetEvent.target_id)
  return _internal_target_id();
}
inline void AddStaticTargetEvent::set_target_id(::int32_t value) {
  _internal_set_target_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:aim.AddStaticTargetEvent.target_id)
}
inline ::int32_t AddStaticTargetEvent::_internal_target_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_id_;
}
inline void AddStaticTargetEvent::_internal_set_target_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_id_ = value;
}

// .aim.StoredVec3 position = 2;
inline bool AddStaticTargetEvent::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::aim::StoredVec3& AddStaticTargetEvent::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::StoredVec3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::StoredVec3&>(::aim::_StoredVec3_default_instance_);
}
inline const ::aim::StoredVec3& AddStaticTargetEvent::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.AddStaticTargetEvent.position)
  return _internal_position();
}
inline void AddStaticTargetEvent::unsafe_arena_set_allocated_position(::aim::StoredVec3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::aim::StoredVec3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.AddStaticTargetEvent.position)
}
inline ::aim::StoredVec3* AddStaticTargetEvent::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aim::StoredVec3* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::StoredVec3* AddStaticTargetEvent::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.AddStaticTargetEvent.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aim::StoredVec3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::aim::StoredVec3* AddStaticTargetEvent::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::StoredVec3>(GetArena());
    _impl_.position_ = reinterpret_cast<::aim::StoredVec3*>(p);
  }
  return _impl_.position_;
}
inline ::aim::StoredVec3* AddStaticTargetEvent::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::aim::StoredVec3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:aim.AddStaticTargetEvent.position)
  return _msg;
}
inline void AddStaticTargetEvent::set_allocated_position(::aim::StoredVec3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::aim::StoredVec3*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.AddStaticTargetEvent.position)
}

// float radius = 3;
inline bool AddStaticTargetEvent::has_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AddStaticTargetEvent::clear_radius() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.radius_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float AddStaticTargetEvent::radius() const {
  // @@protoc_insertion_point(field_get:aim.AddStaticTargetEvent.radius)
  return _internal_radius();
}
inline void AddStaticTargetEvent::set_radius(float value) {
  _internal_set_radius(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:aim.AddStaticTargetEvent.radius)
}
inline float AddStaticTargetEvent::_internal_radius() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.radius_;
}
inline void AddStaticTargetEvent::_internal_set_radius(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.radius_ = value;
}

// -------------------------------------------------------------------

// ReplayEvent

// int32 frame_number = 1;
inline bool ReplayEvent::has_frame_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ReplayEvent::clear_frame_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ReplayEvent::frame_number() const {
  // @@protoc_insertion_point(field_get:aim.ReplayEvent.frame_number)
  return _internal_frame_number();
}
inline void ReplayEvent::set_frame_number(::int32_t value) {
  _internal_set_frame_number(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:aim.ReplayEvent.frame_number)
}
inline ::int32_t ReplayEvent::_internal_frame_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frame_number_;
}
inline void ReplayEvent::_internal_set_frame_number(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_number_ = value;
}

// .aim.KillTargetEvent kill_target = 2;
inline bool ReplayEvent::has_kill_target() const {
  return type_case() == kKillTarget;
}
inline bool ReplayEvent::_internal_has_kill_target() const {
  return type_case() == kKillTarget;
}
inline void ReplayEvent::set_has_kill_target() {
  _impl_._oneof_case_[0] = kKillTarget;
}
inline void ReplayEvent::clear_kill_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kKillTarget) {
    if (GetArena() == nullptr) {
      delete _impl_.type_.kill_target_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.kill_target_);
    }
    clear_has_type();
  }
}
inline ::aim::KillTargetEvent* ReplayEvent::release_kill_target() {
  // @@protoc_insertion_point(field_release:aim.ReplayEvent.kill_target)
  if (type_case() == kKillTarget) {
    clear_has_type();
    auto* temp = _impl_.type_.kill_target_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.kill_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aim::KillTargetEvent& ReplayEvent::_internal_kill_target() const {
  return type_case() == kKillTarget ? *_impl_.type_.kill_target_ : reinterpret_cast<::aim::KillTargetEvent&>(::aim::_KillTargetEvent_default_instance_);
}
inline const ::aim::KillTargetEvent& ReplayEvent::kill_target() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.ReplayEvent.kill_target)
  return _internal_kill_target();
}
inline ::aim::KillTargetEvent* ReplayEvent::unsafe_arena_release_kill_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aim.ReplayEvent.kill_target)
  if (type_case() == kKillTarget) {
    clear_has_type();
    auto* temp = _impl_.type_.kill_target_;
    _impl_.type_.kill_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayEvent::unsafe_arena_set_allocated_kill_target(::aim::KillTargetEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_type();
  if (value) {
    set_has_kill_target();
    _impl_.type_.kill_target_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.ReplayEvent.kill_target)
}
inline ::aim::KillTargetEvent* ReplayEvent::_internal_mutable_kill_target() {
  if (type_case() != kKillTarget) {
    clear_type();
    set_has_kill_target();
    _impl_.type_.kill_target_ =
        ::google::protobuf::Message::DefaultConstruct<::aim::KillTargetEvent>(GetArena());
  }
  return _impl_.type_.kill_target_;
}
inline ::aim::KillTargetEvent* ReplayEvent::mutable_kill_target() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aim::KillTargetEvent* _msg = _internal_mutable_kill_target();
  // @@protoc_insertion_point(field_mutable:aim.ReplayEvent.kill_target)
  return _msg;
}

// .aim.RemoveTargetEvent remove_target = 3;
inline bool ReplayEvent::has_remove_target() const {
  return type_case() == kRemoveTarget;
}
inline bool ReplayEvent::_internal_has_remove_target() const {
  return type_case() == kRemoveTarget;
}
inline void ReplayEvent::set_has_remove_target() {
  _impl_._oneof_case_[0] = kRemoveTarget;
}
inline void ReplayEvent::clear_remove_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kRemoveTarget) {
    if (GetArena() == nullptr) {
      delete _impl_.type_.remove_target_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.remove_target_);
    }
    clear_has_type();
  }
}
inline ::aim::RemoveTargetEvent* ReplayEvent::release_remove_target() {
  // @@protoc_insertion_point(field_release:aim.ReplayEvent.remove_target)
  if (type_case() == kRemoveTarget) {
    clear_has_type();
    auto* temp = _impl_.type_.remove_target_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.remove_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aim::RemoveTargetEvent& ReplayEvent::_internal_remove_target() const {
  return type_case() == kRemoveTarget ? *_impl_.type_.remove_target_ : reinterpret_cast<::aim::RemoveTargetEvent&>(::aim::_RemoveTargetEvent_default_instance_);
}
inline const ::aim::RemoveTargetEvent& ReplayEvent::remove_target() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.ReplayEvent.remove_target)
  return _internal_remove_target();
}
inline ::aim::RemoveTargetEvent* ReplayEvent::unsafe_arena_release_remove_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aim.ReplayEvent.remove_target)
  if (type_case() == kRemoveTarget) {
    clear_has_type();
    auto* temp = _impl_.type_.remove_target_;
    _impl_.type_.remove_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayEvent::unsafe_arena_set_allocated_remove_target(::aim::RemoveTargetEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_type();
  if (value) {
    set_has_remove_target();
    _impl_.type_.remove_target_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.ReplayEvent.remove_target)
}
inline ::aim::RemoveTargetEvent* ReplayEvent::_internal_mutable_remove_target() {
  if (type_case() != kRemoveTarget) {
    clear_type();
    set_has_remove_target();
    _impl_.type_.remove_target_ =
        ::google::protobuf::Message::DefaultConstruct<::aim::RemoveTargetEvent>(GetArena());
  }
  return _impl_.type_.remove_target_;
}
inline ::aim::RemoveTargetEvent* ReplayEvent::mutable_remove_target() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aim::RemoveTargetEvent* _msg = _internal_mutable_remove_target();
  // @@protoc_insertion_point(field_mutable:aim.ReplayEvent.remove_target)
  return _msg;
}

// .aim.AddStaticTargetEvent add_static_target = 4;
inline bool ReplayEvent::has_add_static_target() const {
  return type_case() == kAddStaticTarget;
}
inline bool ReplayEvent::_internal_has_add_static_target() const {
  return type_case() == kAddStaticTarget;
}
inline void ReplayEvent::set_has_add_static_target() {
  _impl_._oneof_case_[0] = kAddStaticTarget;
}
inline void ReplayEvent::clear_add_static_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kAddStaticTarget) {
    if (GetArena() == nullptr) {
      delete _impl_.type_.add_static_target_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.add_static_target_);
    }
    clear_has_type();
  }
}
inline ::aim::AddStaticTargetEvent* ReplayEvent::release_add_static_target() {
  // @@protoc_insertion_point(field_release:aim.ReplayEvent.add_static_target)
  if (type_case() == kAddStaticTarget) {
    clear_has_type();
    auto* temp = _impl_.type_.add_static_target_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.add_static_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aim::AddStaticTargetEvent& ReplayEvent::_internal_add_static_target() const {
  return type_case() == kAddStaticTarget ? *_impl_.type_.add_static_target_ : reinterpret_cast<::aim::AddStaticTargetEvent&>(::aim::_AddStaticTargetEvent_default_instance_);
}
inline const ::aim::AddStaticTargetEvent& ReplayEvent::add_static_target() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.ReplayEvent.add_static_target)
  return _internal_add_static_target();
}
inline ::aim::AddStaticTargetEvent* ReplayEvent::unsafe_arena_release_add_static_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aim.ReplayEvent.add_static_target)
  if (type_case() == kAddStaticTarget) {
    clear_has_type();
    auto* temp = _impl_.type_.add_static_target_;
    _impl_.type_.add_static_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayEvent::unsafe_arena_set_allocated_add_static_target(::aim::AddStaticTargetEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_type();
  if (value) {
    set_has_add_static_target();
    _impl_.type_.add_static_target_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.ReplayEvent.add_static_target)
}
inline ::aim::AddStaticTargetEvent* ReplayEvent::_internal_mutable_add_static_target() {
  if (type_case() != kAddStaticTarget) {
    clear_type();
    set_has_add_static_target();
    _impl_.type_.add_static_target_ =
        ::google::protobuf::Message::DefaultConstruct<::aim::AddStaticTargetEvent>(GetArena());
  }
  return _impl_.type_.add_static_target_;
}
inline ::aim::AddStaticTargetEvent* ReplayEvent::mutable_add_static_target() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aim::AddStaticTargetEvent* _msg = _internal_mutable_add_static_target();
  // @@protoc_insertion_point(field_mutable:aim.ReplayEvent.add_static_target)
  return _msg;
}

// .aim.ShotMissedEvent shot_missed = 5;
inline bool ReplayEvent::has_shot_missed() const {
  return type_case() == kShotMissed;
}
inline bool ReplayEvent::_internal_has_shot_missed() const {
  return type_case() == kShotMissed;
}
inline void ReplayEvent::set_has_shot_missed() {
  _impl_._oneof_case_[0] = kShotMissed;
}
inline void ReplayEvent::clear_shot_missed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kShotMissed) {
    if (GetArena() == nullptr) {
      delete _impl_.type_.shot_missed_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.shot_missed_);
    }
    clear_has_type();
  }
}
inline ::aim::ShotMissedEvent* ReplayEvent::release_shot_missed() {
  // @@protoc_insertion_point(field_release:aim.ReplayEvent.shot_missed)
  if (type_case() == kShotMissed) {
    clear_has_type();
    auto* temp = _impl_.type_.shot_missed_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.shot_missed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aim::ShotMissedEvent& ReplayEvent::_internal_shot_missed() const {
  return type_case() == kShotMissed ? *_impl_.type_.shot_missed_ : reinterpret_cast<::aim::ShotMissedEvent&>(::aim::_ShotMissedEvent_default_instance_);
}
inline const ::aim::ShotMissedEvent& ReplayEvent::shot_missed() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.ReplayEvent.shot_missed)
  return _internal_shot_missed();
}
inline ::aim::ShotMissedEvent* ReplayEvent::unsafe_arena_release_shot_missed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:aim.ReplayEvent.shot_missed)
  if (type_case() == kShotMissed) {
    clear_has_type();
    auto* temp = _impl_.type_.shot_missed_;
    _impl_.type_.shot_missed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayEvent::unsafe_arena_set_allocated_shot_missed(::aim::ShotMissedEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_type();
  if (value) {
    set_has_shot_missed();
    _impl_.type_.shot_missed_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.ReplayEvent.shot_missed)
}
inline ::aim::ShotMissedEvent* ReplayEvent::_internal_mutable_shot_missed() {
  if (type_case() != kShotMissed) {
    clear_type();
    set_has_shot_missed();
    _impl_.type_.shot_missed_ =
        ::google::protobuf::Message::DefaultConstruct<::aim::ShotMissedEvent>(GetArena());
  }
  return _impl_.type_.shot_missed_;
}
inline ::aim::ShotMissedEvent* ReplayEvent::mutable_shot_missed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::aim::ShotMissedEvent* _msg = _internal_mutable_shot_missed();
  // @@protoc_insertion_point(field_mutable:aim.ReplayEvent.shot_missed)
  return _msg;
}

inline bool ReplayEvent::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void ReplayEvent::clear_has_type() {
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}
inline ReplayEvent::TypeCase ReplayEvent::type_case() const {
  return ReplayEvent::TypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Replay

// .aim.Room room = 1;
inline bool Replay::has_room() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.room_ != nullptr);
  return value;
}
inline const ::aim::Room& Replay::_internal_room() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::aim::Room* p = _impl_.room_;
  return p != nullptr ? *p : reinterpret_cast<const ::aim::Room&>(::aim::_Room_default_instance_);
}
inline const ::aim::Room& Replay::room() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Replay.room)
  return _internal_room();
}
inline void Replay::unsafe_arena_set_allocated_room(::aim::Room* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.room_);
  }
  _impl_.room_ = reinterpret_cast<::aim::Room*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aim.Replay.room)
}
inline ::aim::Room* Replay::release_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aim::Room* released = _impl_.room_;
  _impl_.room_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::aim::Room* Replay::unsafe_arena_release_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:aim.Replay.room)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::aim::Room* temp = _impl_.room_;
  _impl_.room_ = nullptr;
  return temp;
}
inline ::aim::Room* Replay::_internal_mutable_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.room_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::aim::Room>(GetArena());
    _impl_.room_ = reinterpret_cast<::aim::Room*>(p);
  }
  return _impl_.room_;
}
inline ::aim::Room* Replay::mutable_room() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::aim::Room* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:aim.Replay.room)
  return _msg;
}
inline void Replay::set_allocated_room(::aim::Room* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.room_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.room_ = reinterpret_cast<::aim::Room*>(value);
  // @@protoc_insertion_point(field_set_allocated:aim.Replay.room)
}

// int32 replay_fps = 2;
inline bool Replay::has_replay_fps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Replay::clear_replay_fps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.replay_fps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Replay::replay_fps() const {
  // @@protoc_insertion_point(field_get:aim.Replay.replay_fps)
  return _internal_replay_fps();
}
inline void Replay::set_replay_fps(::int32_t value) {
  _internal_set_replay_fps(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:aim.Replay.replay_fps)
}
inline ::int32_t Replay::_internal_replay_fps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.replay_fps_;
}
inline void Replay::_internal_set_replay_fps(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.replay_fps_ = value;
}

// repeated float pitch_yaws = 3;
inline int Replay::_internal_pitch_yaws_size() const {
  return _internal_pitch_yaws().size();
}
inline int Replay::pitch_yaws_size() const {
  return _internal_pitch_yaws_size();
}
inline void Replay::clear_pitch_yaws() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_yaws_.Clear();
}
inline float Replay::pitch_yaws(int index) const {
  // @@protoc_insertion_point(field_get:aim.Replay.pitch_yaws)
  return _internal_pitch_yaws().Get(index);
}
inline void Replay::set_pitch_yaws(int index, float value) {
  _internal_mutable_pitch_yaws()->Set(index, value);
  // @@protoc_insertion_point(field_set:aim.Replay.pitch_yaws)
}
inline void Replay::add_pitch_yaws(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_pitch_yaws()->Add(value);
  // @@protoc_insertion_point(field_add:aim.Replay.pitch_yaws)
}
inline const ::google::protobuf::RepeatedField<float>& Replay::pitch_yaws() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:aim.Replay.pitch_yaws)
  return _internal_pitch_yaws();
}
inline ::google::protobuf::RepeatedField<float>* Replay::mutable_pitch_yaws()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:aim.Replay.pitch_yaws)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_pitch_yaws();
}
inline const ::google::protobuf::RepeatedField<float>&
Replay::_internal_pitch_yaws() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pitch_yaws_;
}
inline ::google::protobuf::RepeatedField<float>* Replay::_internal_mutable_pitch_yaws() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.pitch_yaws_;
}

// repeated .aim.ReplayEvent events = 4;
inline int Replay::_internal_events_size() const {
  return _internal_events().size();
}
inline int Replay::events_size() const {
  return _internal_events_size();
}
inline void Replay::clear_events() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.events_.Clear();
}
inline ::aim::ReplayEvent* Replay::mutable_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:aim.Replay.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::aim::ReplayEvent>* Replay::mutable_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:aim.Replay.events)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_events();
}
inline const ::aim::ReplayEvent& Replay::events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:aim.Replay.events)
  return _internal_events().Get(index);
}
inline ::aim::ReplayEvent* Replay::add_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::aim::ReplayEvent* _add = _internal_mutable_events()->Add();
  // @@protoc_insertion_point(field_add:aim.Replay.events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::aim::ReplayEvent>& Replay::events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:aim.Replay.events)
  return _internal_events();
}
inline const ::google::protobuf::RepeatedPtrField<::aim::ReplayEvent>&
Replay::_internal_events() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.events_;
}
inline ::google::protobuf::RepeatedPtrField<::aim::ReplayEvent>*
Replay::_internal_mutable_events() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.events_;
}

// bool is_poke_ball = 5;
inline bool Replay::has_is_poke_ball() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Replay::clear_is_poke_ball() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_poke_ball_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Replay::is_poke_ball() const {
  // @@protoc_insertion_point(field_get:aim.Replay.is_poke_ball)
  return _internal_is_poke_ball();
}
inline void Replay::set_is_poke_ball(bool value) {
  _internal_set_is_poke_ball(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:aim.Replay.is_poke_ball)
}
inline bool Replay::_internal_is_poke_ball() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_poke_ball_;
}
inline void Replay::_internal_set_is_poke_ball(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_poke_ball_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace aim


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // replay_2eproto_2epb_2eh
