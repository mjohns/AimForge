// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: replay.proto
// Protobuf C++ Version: 5.29.3

#include "replay.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace aim {
              template <typename>
PROTOBUF_CONSTEXPR ShotFiredEvent::ShotFiredEvent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ShotFiredEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShotFiredEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShotFiredEventDefaultTypeInternal() {}
  union {
    ShotFiredEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShotFiredEventDefaultTypeInternal _ShotFiredEvent_default_instance_;

inline constexpr RemoveTargetEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_id_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RemoveTargetEvent::RemoveTargetEvent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RemoveTargetEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveTargetEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveTargetEventDefaultTypeInternal() {}
  union {
    RemoveTargetEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveTargetEventDefaultTypeInternal _RemoveTargetEvent_default_instance_;

inline constexpr KillTargetEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_id_{0} {}

template <typename>
PROTOBUF_CONSTEXPR KillTargetEvent::KillTargetEvent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct KillTargetEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KillTargetEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KillTargetEventDefaultTypeInternal() {}
  union {
    KillTargetEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KillTargetEventDefaultTypeInternal _KillTargetEvent_default_instance_;

inline constexpr MoveLinearTargetEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        direction_{nullptr},
        starting_position_{nullptr},
        target_id_{0},
        distance_per_second_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MoveLinearTargetEvent::MoveLinearTargetEvent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MoveLinearTargetEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveLinearTargetEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveLinearTargetEventDefaultTypeInternal() {}
  union {
    MoveLinearTargetEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveLinearTargetEventDefaultTypeInternal _MoveLinearTargetEvent_default_instance_;

inline constexpr AddTargetEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        target_id_{0},
        radius_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AddTargetEvent::AddTargetEvent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddTargetEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddTargetEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddTargetEventDefaultTypeInternal() {}
  union {
    AddTargetEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddTargetEventDefaultTypeInternal _AddTargetEvent_default_instance_;

inline constexpr ReplayEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        time_seconds_{0},
        type_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ReplayEvent::ReplayEvent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReplayEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplayEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplayEventDefaultTypeInternal() {}
  union {
    ReplayEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplayEventDefaultTypeInternal _ReplayEvent_default_instance_;

inline constexpr Replay::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pitch_yaws_{},
        events_{},
        room_{nullptr},
        replay_fps_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Replay::Replay(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReplayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplayDefaultTypeInternal() {}
  union {
    Replay _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplayDefaultTypeInternal _Replay_default_instance_;
}  // namespace aim
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_replay_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_replay_2eproto = nullptr;
const ::uint32_t
    TableStruct_replay_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::aim::KillTargetEvent, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::KillTargetEvent, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::KillTargetEvent, _impl_.target_id_),
        0,
        PROTOBUF_FIELD_OFFSET(::aim::RemoveTargetEvent, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::RemoveTargetEvent, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::RemoveTargetEvent, _impl_.target_id_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::aim::ShotFiredEvent, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::AddTargetEvent, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::AddTargetEvent, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::AddTargetEvent, _impl_.target_id_),
        PROTOBUF_FIELD_OFFSET(::aim::AddTargetEvent, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::aim::AddTargetEvent, _impl_.radius_),
        1,
        0,
        2,
        PROTOBUF_FIELD_OFFSET(::aim::MoveLinearTargetEvent, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::MoveLinearTargetEvent, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::MoveLinearTargetEvent, _impl_.target_id_),
        PROTOBUF_FIELD_OFFSET(::aim::MoveLinearTargetEvent, _impl_.direction_),
        PROTOBUF_FIELD_OFFSET(::aim::MoveLinearTargetEvent, _impl_.distance_per_second_),
        PROTOBUF_FIELD_OFFSET(::aim::MoveLinearTargetEvent, _impl_.starting_position_),
        2,
        0,
        3,
        1,
        PROTOBUF_FIELD_OFFSET(::aim::ReplayEvent, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::ReplayEvent, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::aim::ReplayEvent, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::ReplayEvent, _impl_.time_seconds_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::aim::ReplayEvent, _impl_.type_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::aim::Replay, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::Replay, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::Replay, _impl_.room_),
        PROTOBUF_FIELD_OFFSET(::aim::Replay, _impl_.replay_fps_),
        PROTOBUF_FIELD_OFFSET(::aim::Replay, _impl_.pitch_yaws_),
        PROTOBUF_FIELD_OFFSET(::aim::Replay, _impl_.events_),
        0,
        1,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 9, -1, sizeof(::aim::KillTargetEvent)},
        {10, 19, -1, sizeof(::aim::RemoveTargetEvent)},
        {20, -1, -1, sizeof(::aim::ShotFiredEvent)},
        {28, 39, -1, sizeof(::aim::AddTargetEvent)},
        {42, 54, -1, sizeof(::aim::MoveLinearTargetEvent)},
        {58, 73, -1, sizeof(::aim::ReplayEvent)},
        {79, 91, -1, sizeof(::aim::Replay)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::aim::_KillTargetEvent_default_instance_._instance,
    &::aim::_RemoveTargetEvent_default_instance_._instance,
    &::aim::_ShotFiredEvent_default_instance_._instance,
    &::aim::_AddTargetEvent_default_instance_._instance,
    &::aim::_MoveLinearTargetEvent_default_instance_._instance,
    &::aim::_ReplayEvent_default_instance_._instance,
    &::aim::_Replay_default_instance_._instance,
};
const char descriptor_table_protodef_replay_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014replay.proto\022\003aim\032\014common.proto\032\016scena"
    "rio.proto\"$\n\017KillTargetEvent\022\021\n\ttarget_i"
    "d\030\001 \001(\005\"&\n\021RemoveTargetEvent\022\021\n\ttarget_i"
    "d\030\001 \001(\005\"\020\n\016ShotFiredEvent\"V\n\016AddTargetEv"
    "ent\022\021\n\ttarget_id\030\001 \001(\005\022!\n\010position\030\002 \001(\013"
    "2\017.aim.StoredVec3\022\016\n\006radius\030\003 \001(\002\"\227\001\n\025Mo"
    "veLinearTargetEvent\022\021\n\ttarget_id\030\001 \001(\005\022\""
    "\n\tdirection\030\002 \001(\0132\017.aim.StoredVec3\022\033\n\023di"
    "stance_per_second\030\003 \001(\002\022*\n\021starting_posi"
    "tion\030\004 \001(\0132\017.aim.StoredVec3\"\231\002\n\013ReplayEv"
    "ent\022\024\n\014time_seconds\030\001 \001(\002\022+\n\013kill_target"
    "\030\002 \001(\0132\024.aim.KillTargetEventH\000\022/\n\rremove"
    "_target\030\003 \001(\0132\026.aim.RemoveTargetEventH\000\022"
    ")\n\nadd_target\030\004 \001(\0132\023.aim.AddTargetEvent"
    "H\000\022)\n\nshot_fired\030\005 \001(\0132\023.aim.ShotFiredEv"
    "entH\000\0228\n\022move_linear_target\030\006 \001(\0132\032.aim."
    "MoveLinearTargetEventH\000B\006\n\004type\"k\n\006Repla"
    "y\022\027\n\004room\030\001 \001(\0132\t.aim.Room\022\022\n\nreplay_fps"
    "\030\002 \001(\005\022\022\n\npitch_yaws\030\003 \003(\002\022 \n\006events\030\004 \003"
    "(\0132\020.aim.ReplayEventb\010editionsp\350\007"
};
static const ::_pbi::DescriptorTable* const descriptor_table_replay_2eproto_deps[2] =
    {
        &::descriptor_table_common_2eproto,
        &::descriptor_table_scenario_2eproto,
};
static ::absl::once_flag descriptor_table_replay_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_replay_2eproto = {
    false,
    false,
    793,
    descriptor_table_protodef_replay_2eproto,
    "replay.proto",
    &descriptor_table_replay_2eproto_once,
    descriptor_table_replay_2eproto_deps,
    2,
    7,
    schemas,
    file_default_instances,
    TableStruct_replay_2eproto::offsets,
    file_level_enum_descriptors_replay_2eproto,
    file_level_service_descriptors_replay_2eproto,
};
namespace aim {
// ===================================================================

class KillTargetEvent::_Internal {
 public:
  using HasBits =
      decltype(std::declval<KillTargetEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(KillTargetEvent, _impl_._has_bits_);
};

KillTargetEvent::KillTargetEvent(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.KillTargetEvent)
}
KillTargetEvent::KillTargetEvent(
    ::google::protobuf::Arena* arena, const KillTargetEvent& from)
    : KillTargetEvent(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE KillTargetEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void KillTargetEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.target_id_ = {};
}
KillTargetEvent::~KillTargetEvent() {
  // @@protoc_insertion_point(destructor:aim.KillTargetEvent)
  SharedDtor(*this);
}
inline void KillTargetEvent::SharedDtor(MessageLite& self) {
  KillTargetEvent& this_ = static_cast<KillTargetEvent&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* KillTargetEvent::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) KillTargetEvent(arena);
}
constexpr auto KillTargetEvent::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(KillTargetEvent),
                                            alignof(KillTargetEvent));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull KillTargetEvent::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_KillTargetEvent_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &KillTargetEvent::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<KillTargetEvent>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &KillTargetEvent::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<KillTargetEvent>(), &KillTargetEvent::ByteSizeLong,
            &KillTargetEvent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(KillTargetEvent, _impl_._cached_size_),
        false,
    },
    &KillTargetEvent::kDescriptorMethods,
    &descriptor_table_replay_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* KillTargetEvent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> KillTargetEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(KillTargetEvent, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::KillTargetEvent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 target_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(KillTargetEvent, _impl_.target_id_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(KillTargetEvent, _impl_.target_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 target_id = 1;
    {PROTOBUF_FIELD_OFFSET(KillTargetEvent, _impl_.target_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void KillTargetEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.KillTargetEvent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* KillTargetEvent::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const KillTargetEvent& this_ = static_cast<const KillTargetEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* KillTargetEvent::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const KillTargetEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.KillTargetEvent)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // int32 target_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_target_id(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.KillTargetEvent)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t KillTargetEvent::ByteSizeLong(const MessageLite& base) {
          const KillTargetEvent& this_ = static_cast<const KillTargetEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t KillTargetEvent::ByteSizeLong() const {
          const KillTargetEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.KillTargetEvent)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // int32 target_id = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_target_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void KillTargetEvent::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<KillTargetEvent*>(&to_msg);
  auto& from = static_cast<const KillTargetEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.KillTargetEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.target_id_ = from._impl_.target_id_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KillTargetEvent::CopyFrom(const KillTargetEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.KillTargetEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void KillTargetEvent::InternalSwap(KillTargetEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.target_id_, other->_impl_.target_id_);
}

::google::protobuf::Metadata KillTargetEvent::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RemoveTargetEvent::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RemoveTargetEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RemoveTargetEvent, _impl_._has_bits_);
};

RemoveTargetEvent::RemoveTargetEvent(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.RemoveTargetEvent)
}
RemoveTargetEvent::RemoveTargetEvent(
    ::google::protobuf::Arena* arena, const RemoveTargetEvent& from)
    : RemoveTargetEvent(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RemoveTargetEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RemoveTargetEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.target_id_ = {};
}
RemoveTargetEvent::~RemoveTargetEvent() {
  // @@protoc_insertion_point(destructor:aim.RemoveTargetEvent)
  SharedDtor(*this);
}
inline void RemoveTargetEvent::SharedDtor(MessageLite& self) {
  RemoveTargetEvent& this_ = static_cast<RemoveTargetEvent&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* RemoveTargetEvent::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RemoveTargetEvent(arena);
}
constexpr auto RemoveTargetEvent::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RemoveTargetEvent),
                                            alignof(RemoveTargetEvent));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RemoveTargetEvent::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RemoveTargetEvent_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RemoveTargetEvent::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RemoveTargetEvent>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RemoveTargetEvent::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RemoveTargetEvent>(), &RemoveTargetEvent::ByteSizeLong,
            &RemoveTargetEvent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RemoveTargetEvent, _impl_._cached_size_),
        false,
    },
    &RemoveTargetEvent::kDescriptorMethods,
    &descriptor_table_replay_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RemoveTargetEvent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> RemoveTargetEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RemoveTargetEvent, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::RemoveTargetEvent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 target_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RemoveTargetEvent, _impl_.target_id_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(RemoveTargetEvent, _impl_.target_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 target_id = 1;
    {PROTOBUF_FIELD_OFFSET(RemoveTargetEvent, _impl_.target_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void RemoveTargetEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.RemoveTargetEvent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RemoveTargetEvent::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RemoveTargetEvent& this_ = static_cast<const RemoveTargetEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RemoveTargetEvent::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RemoveTargetEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.RemoveTargetEvent)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // int32 target_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_target_id(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.RemoveTargetEvent)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RemoveTargetEvent::ByteSizeLong(const MessageLite& base) {
          const RemoveTargetEvent& this_ = static_cast<const RemoveTargetEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RemoveTargetEvent::ByteSizeLong() const {
          const RemoveTargetEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.RemoveTargetEvent)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // int32 target_id = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_target_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RemoveTargetEvent::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RemoveTargetEvent*>(&to_msg);
  auto& from = static_cast<const RemoveTargetEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.RemoveTargetEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.target_id_ = from._impl_.target_id_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveTargetEvent::CopyFrom(const RemoveTargetEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.RemoveTargetEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RemoveTargetEvent::InternalSwap(RemoveTargetEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.target_id_, other->_impl_.target_id_);
}

::google::protobuf::Metadata RemoveTargetEvent::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ShotFiredEvent::_Internal {
 public:
};

ShotFiredEvent::ShotFiredEvent(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:aim.ShotFiredEvent)
}
ShotFiredEvent::ShotFiredEvent(
    ::google::protobuf::Arena* arena,
    const ShotFiredEvent& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ShotFiredEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:aim.ShotFiredEvent)
}

inline void* ShotFiredEvent::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ShotFiredEvent(arena);
}
constexpr auto ShotFiredEvent::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ShotFiredEvent),
                                            alignof(ShotFiredEvent));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ShotFiredEvent::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ShotFiredEvent_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ShotFiredEvent::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<ShotFiredEvent>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ShotFiredEvent::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<ShotFiredEvent>(), &ShotFiredEvent::ByteSizeLong,
            &ShotFiredEvent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ShotFiredEvent, _impl_._cached_size_),
        false,
    },
    &ShotFiredEvent::kDescriptorMethods,
    &descriptor_table_replay_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ShotFiredEvent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> ShotFiredEvent::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::ShotFiredEvent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata ShotFiredEvent::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddTargetEvent::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddTargetEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AddTargetEvent, _impl_._has_bits_);
};

void AddTargetEvent::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AddTargetEvent::AddTargetEvent(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.AddTargetEvent)
}
inline PROTOBUF_NDEBUG_INLINE AddTargetEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::aim::AddTargetEvent& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AddTargetEvent::AddTargetEvent(
    ::google::protobuf::Arena* arena,
    const AddTargetEvent& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddTargetEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::aim::StoredVec3>(
                              arena, *from._impl_.position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, target_id_),
           offsetof(Impl_, radius_) -
               offsetof(Impl_, target_id_) +
               sizeof(Impl_::radius_));

  // @@protoc_insertion_point(copy_constructor:aim.AddTargetEvent)
}
inline PROTOBUF_NDEBUG_INLINE AddTargetEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AddTargetEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, radius_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::radius_));
}
AddTargetEvent::~AddTargetEvent() {
  // @@protoc_insertion_point(destructor:aim.AddTargetEvent)
  SharedDtor(*this);
}
inline void AddTargetEvent::SharedDtor(MessageLite& self) {
  AddTargetEvent& this_ = static_cast<AddTargetEvent&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.position_;
  this_._impl_.~Impl_();
}

inline void* AddTargetEvent::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AddTargetEvent(arena);
}
constexpr auto AddTargetEvent::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AddTargetEvent),
                                            alignof(AddTargetEvent));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AddTargetEvent::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AddTargetEvent_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AddTargetEvent::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AddTargetEvent>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AddTargetEvent::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AddTargetEvent>(), &AddTargetEvent::ByteSizeLong,
            &AddTargetEvent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AddTargetEvent, _impl_._cached_size_),
        false,
    },
    &AddTargetEvent::kDescriptorMethods,
    &descriptor_table_replay_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AddTargetEvent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> AddTargetEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddTargetEvent, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::AddTargetEvent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 target_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddTargetEvent, _impl_.target_id_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(AddTargetEvent, _impl_.target_id_)}},
    // .aim.StoredVec3 position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AddTargetEvent, _impl_.position_)}},
    // float radius = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(AddTargetEvent, _impl_.radius_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 target_id = 1;
    {PROTOBUF_FIELD_OFFSET(AddTargetEvent, _impl_.target_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .aim.StoredVec3 position = 2;
    {PROTOBUF_FIELD_OFFSET(AddTargetEvent, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float radius = 3;
    {PROTOBUF_FIELD_OFFSET(AddTargetEvent, _impl_.radius_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::aim::StoredVec3>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void AddTargetEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.AddTargetEvent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.target_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.radius_) -
        reinterpret_cast<char*>(&_impl_.target_id_)) + sizeof(_impl_.radius_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AddTargetEvent::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AddTargetEvent& this_ = static_cast<const AddTargetEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AddTargetEvent::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AddTargetEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.AddTargetEvent)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // int32 target_id = 1;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_target_id(), target);
          }

          // .aim.StoredVec3 position = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          // float radius = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_radius(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.AddTargetEvent)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AddTargetEvent::ByteSizeLong(const MessageLite& base) {
          const AddTargetEvent& this_ = static_cast<const AddTargetEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AddTargetEvent::ByteSizeLong() const {
          const AddTargetEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.AddTargetEvent)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .aim.StoredVec3 position = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
            // int32 target_id = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_target_id());
            }
            // float radius = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AddTargetEvent::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddTargetEvent*>(&to_msg);
  auto& from = static_cast<const AddTargetEvent&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.AddTargetEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ =
            ::google::protobuf::Message::CopyConstruct<::aim::StoredVec3>(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.target_id_ = from._impl_.target_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.radius_ = from._impl_.radius_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddTargetEvent::CopyFrom(const AddTargetEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.AddTargetEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddTargetEvent::InternalSwap(AddTargetEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddTargetEvent, _impl_.radius_)
      + sizeof(AddTargetEvent::_impl_.radius_)
      - PROTOBUF_FIELD_OFFSET(AddTargetEvent, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata AddTargetEvent::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MoveLinearTargetEvent::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MoveLinearTargetEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MoveLinearTargetEvent, _impl_._has_bits_);
};

void MoveLinearTargetEvent::clear_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.direction_ != nullptr) _impl_.direction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MoveLinearTargetEvent::clear_starting_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.starting_position_ != nullptr) _impl_.starting_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MoveLinearTargetEvent::MoveLinearTargetEvent(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.MoveLinearTargetEvent)
}
inline PROTOBUF_NDEBUG_INLINE MoveLinearTargetEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::aim::MoveLinearTargetEvent& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MoveLinearTargetEvent::MoveLinearTargetEvent(
    ::google::protobuf::Arena* arena,
    const MoveLinearTargetEvent& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MoveLinearTargetEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.direction_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::aim::StoredVec3>(
                              arena, *from._impl_.direction_)
                        : nullptr;
  _impl_.starting_position_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::aim::StoredVec3>(
                              arena, *from._impl_.starting_position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, target_id_),
           offsetof(Impl_, distance_per_second_) -
               offsetof(Impl_, target_id_) +
               sizeof(Impl_::distance_per_second_));

  // @@protoc_insertion_point(copy_constructor:aim.MoveLinearTargetEvent)
}
inline PROTOBUF_NDEBUG_INLINE MoveLinearTargetEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MoveLinearTargetEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, direction_),
           0,
           offsetof(Impl_, distance_per_second_) -
               offsetof(Impl_, direction_) +
               sizeof(Impl_::distance_per_second_));
}
MoveLinearTargetEvent::~MoveLinearTargetEvent() {
  // @@protoc_insertion_point(destructor:aim.MoveLinearTargetEvent)
  SharedDtor(*this);
}
inline void MoveLinearTargetEvent::SharedDtor(MessageLite& self) {
  MoveLinearTargetEvent& this_ = static_cast<MoveLinearTargetEvent&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.direction_;
  delete this_._impl_.starting_position_;
  this_._impl_.~Impl_();
}

inline void* MoveLinearTargetEvent::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MoveLinearTargetEvent(arena);
}
constexpr auto MoveLinearTargetEvent::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MoveLinearTargetEvent),
                                            alignof(MoveLinearTargetEvent));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MoveLinearTargetEvent::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MoveLinearTargetEvent_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MoveLinearTargetEvent::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MoveLinearTargetEvent>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MoveLinearTargetEvent::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MoveLinearTargetEvent>(), &MoveLinearTargetEvent::ByteSizeLong,
            &MoveLinearTargetEvent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MoveLinearTargetEvent, _impl_._cached_size_),
        false,
    },
    &MoveLinearTargetEvent::kDescriptorMethods,
    &descriptor_table_replay_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MoveLinearTargetEvent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> MoveLinearTargetEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MoveLinearTargetEvent, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::MoveLinearTargetEvent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .aim.StoredVec3 starting_position = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(MoveLinearTargetEvent, _impl_.starting_position_)}},
    // int32 target_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MoveLinearTargetEvent, _impl_.target_id_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(MoveLinearTargetEvent, _impl_.target_id_)}},
    // .aim.StoredVec3 direction = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MoveLinearTargetEvent, _impl_.direction_)}},
    // float distance_per_second = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 3, 0, PROTOBUF_FIELD_OFFSET(MoveLinearTargetEvent, _impl_.distance_per_second_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 target_id = 1;
    {PROTOBUF_FIELD_OFFSET(MoveLinearTargetEvent, _impl_.target_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .aim.StoredVec3 direction = 2;
    {PROTOBUF_FIELD_OFFSET(MoveLinearTargetEvent, _impl_.direction_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float distance_per_second = 3;
    {PROTOBUF_FIELD_OFFSET(MoveLinearTargetEvent, _impl_.distance_per_second_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // .aim.StoredVec3 starting_position = 4;
    {PROTOBUF_FIELD_OFFSET(MoveLinearTargetEvent, _impl_.starting_position_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::aim::StoredVec3>()},
    {::_pbi::TcParser::GetTable<::aim::StoredVec3>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MoveLinearTargetEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.MoveLinearTargetEvent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.direction_ != nullptr);
      _impl_.direction_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.starting_position_ != nullptr);
      _impl_.starting_position_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.target_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.distance_per_second_) -
        reinterpret_cast<char*>(&_impl_.target_id_)) + sizeof(_impl_.distance_per_second_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MoveLinearTargetEvent::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MoveLinearTargetEvent& this_ = static_cast<const MoveLinearTargetEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MoveLinearTargetEvent::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MoveLinearTargetEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.MoveLinearTargetEvent)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // int32 target_id = 1;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_target_id(), target);
          }

          // .aim.StoredVec3 direction = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.direction_, this_._impl_.direction_->GetCachedSize(), target,
                stream);
          }

          // float distance_per_second = 3;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_distance_per_second(), target);
          }

          // .aim.StoredVec3 starting_position = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.starting_position_, this_._impl_.starting_position_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.MoveLinearTargetEvent)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MoveLinearTargetEvent::ByteSizeLong(const MessageLite& base) {
          const MoveLinearTargetEvent& this_ = static_cast<const MoveLinearTargetEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MoveLinearTargetEvent::ByteSizeLong() const {
          const MoveLinearTargetEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.MoveLinearTargetEvent)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000000fu) {
            // .aim.StoredVec3 direction = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.direction_);
            }
            // .aim.StoredVec3 starting_position = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.starting_position_);
            }
            // int32 target_id = 1;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_target_id());
            }
            // float distance_per_second = 3;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MoveLinearTargetEvent::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MoveLinearTargetEvent*>(&to_msg);
  auto& from = static_cast<const MoveLinearTargetEvent&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.MoveLinearTargetEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.direction_ != nullptr);
      if (_this->_impl_.direction_ == nullptr) {
        _this->_impl_.direction_ =
            ::google::protobuf::Message::CopyConstruct<::aim::StoredVec3>(arena, *from._impl_.direction_);
      } else {
        _this->_impl_.direction_->MergeFrom(*from._impl_.direction_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.starting_position_ != nullptr);
      if (_this->_impl_.starting_position_ == nullptr) {
        _this->_impl_.starting_position_ =
            ::google::protobuf::Message::CopyConstruct<::aim::StoredVec3>(arena, *from._impl_.starting_position_);
      } else {
        _this->_impl_.starting_position_->MergeFrom(*from._impl_.starting_position_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.target_id_ = from._impl_.target_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.distance_per_second_ = from._impl_.distance_per_second_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveLinearTargetEvent::CopyFrom(const MoveLinearTargetEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.MoveLinearTargetEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MoveLinearTargetEvent::InternalSwap(MoveLinearTargetEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveLinearTargetEvent, _impl_.distance_per_second_)
      + sizeof(MoveLinearTargetEvent::_impl_.distance_per_second_)
      - PROTOBUF_FIELD_OFFSET(MoveLinearTargetEvent, _impl_.direction_)>(
          reinterpret_cast<char*>(&_impl_.direction_),
          reinterpret_cast<char*>(&other->_impl_.direction_));
}

::google::protobuf::Metadata MoveLinearTargetEvent::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReplayEvent::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ReplayEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ReplayEvent, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::aim::ReplayEvent, _impl_._oneof_case_);
};

void ReplayEvent::set_allocated_kill_target(::aim::KillTargetEvent* kill_target) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (kill_target) {
    ::google::protobuf::Arena* submessage_arena = kill_target->GetArena();
    if (message_arena != submessage_arena) {
      kill_target = ::google::protobuf::internal::GetOwnedMessage(message_arena, kill_target, submessage_arena);
    }
    set_has_kill_target();
    _impl_.type_.kill_target_ = kill_target;
  }
  // @@protoc_insertion_point(field_set_allocated:aim.ReplayEvent.kill_target)
}
void ReplayEvent::set_allocated_remove_target(::aim::RemoveTargetEvent* remove_target) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (remove_target) {
    ::google::protobuf::Arena* submessage_arena = remove_target->GetArena();
    if (message_arena != submessage_arena) {
      remove_target = ::google::protobuf::internal::GetOwnedMessage(message_arena, remove_target, submessage_arena);
    }
    set_has_remove_target();
    _impl_.type_.remove_target_ = remove_target;
  }
  // @@protoc_insertion_point(field_set_allocated:aim.ReplayEvent.remove_target)
}
void ReplayEvent::set_allocated_add_target(::aim::AddTargetEvent* add_target) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (add_target) {
    ::google::protobuf::Arena* submessage_arena = add_target->GetArena();
    if (message_arena != submessage_arena) {
      add_target = ::google::protobuf::internal::GetOwnedMessage(message_arena, add_target, submessage_arena);
    }
    set_has_add_target();
    _impl_.type_.add_target_ = add_target;
  }
  // @@protoc_insertion_point(field_set_allocated:aim.ReplayEvent.add_target)
}
void ReplayEvent::set_allocated_shot_fired(::aim::ShotFiredEvent* shot_fired) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (shot_fired) {
    ::google::protobuf::Arena* submessage_arena = shot_fired->GetArena();
    if (message_arena != submessage_arena) {
      shot_fired = ::google::protobuf::internal::GetOwnedMessage(message_arena, shot_fired, submessage_arena);
    }
    set_has_shot_fired();
    _impl_.type_.shot_fired_ = shot_fired;
  }
  // @@protoc_insertion_point(field_set_allocated:aim.ReplayEvent.shot_fired)
}
void ReplayEvent::set_allocated_move_linear_target(::aim::MoveLinearTargetEvent* move_linear_target) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (move_linear_target) {
    ::google::protobuf::Arena* submessage_arena = move_linear_target->GetArena();
    if (message_arena != submessage_arena) {
      move_linear_target = ::google::protobuf::internal::GetOwnedMessage(message_arena, move_linear_target, submessage_arena);
    }
    set_has_move_linear_target();
    _impl_.type_.move_linear_target_ = move_linear_target;
  }
  // @@protoc_insertion_point(field_set_allocated:aim.ReplayEvent.move_linear_target)
}
ReplayEvent::ReplayEvent(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.ReplayEvent)
}
inline PROTOBUF_NDEBUG_INLINE ReplayEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::aim::ReplayEvent& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        type_{},
        _oneof_case_{from._oneof_case_[0]} {}

ReplayEvent::ReplayEvent(
    ::google::protobuf::Arena* arena,
    const ReplayEvent& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReplayEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.time_seconds_ = from._impl_.time_seconds_;
  switch (type_case()) {
    case TYPE_NOT_SET:
      break;
      case kKillTarget:
        _impl_.type_.kill_target_ = ::google::protobuf::Message::CopyConstruct<::aim::KillTargetEvent>(arena, *from._impl_.type_.kill_target_);
        break;
      case kRemoveTarget:
        _impl_.type_.remove_target_ = ::google::protobuf::Message::CopyConstruct<::aim::RemoveTargetEvent>(arena, *from._impl_.type_.remove_target_);
        break;
      case kAddTarget:
        _impl_.type_.add_target_ = ::google::protobuf::Message::CopyConstruct<::aim::AddTargetEvent>(arena, *from._impl_.type_.add_target_);
        break;
      case kShotFired:
        _impl_.type_.shot_fired_ = ::google::protobuf::Message::CopyConstruct<::aim::ShotFiredEvent>(arena, *from._impl_.type_.shot_fired_);
        break;
      case kMoveLinearTarget:
        _impl_.type_.move_linear_target_ = ::google::protobuf::Message::CopyConstruct<::aim::MoveLinearTargetEvent>(arena, *from._impl_.type_.move_linear_target_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:aim.ReplayEvent)
}
inline PROTOBUF_NDEBUG_INLINE ReplayEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        type_{},
        _oneof_case_{} {}

inline void ReplayEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.time_seconds_ = {};
}
ReplayEvent::~ReplayEvent() {
  // @@protoc_insertion_point(destructor:aim.ReplayEvent)
  SharedDtor(*this);
}
inline void ReplayEvent::SharedDtor(MessageLite& self) {
  ReplayEvent& this_ = static_cast<ReplayEvent&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_type()) {
    this_.clear_type();
  }
  this_._impl_.~Impl_();
}

void ReplayEvent::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:aim.ReplayEvent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (type_case()) {
    case kKillTarget: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.kill_target_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.kill_target_);
      }
      break;
    }
    case kRemoveTarget: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.remove_target_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.remove_target_);
      }
      break;
    }
    case kAddTarget: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.add_target_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.add_target_);
      }
      break;
    }
    case kShotFired: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.shot_fired_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.shot_fired_);
      }
      break;
    }
    case kMoveLinearTarget: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.move_linear_target_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.move_linear_target_);
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


inline void* ReplayEvent::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ReplayEvent(arena);
}
constexpr auto ReplayEvent::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ReplayEvent),
                                            alignof(ReplayEvent));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ReplayEvent::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ReplayEvent_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ReplayEvent::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ReplayEvent>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ReplayEvent::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ReplayEvent>(), &ReplayEvent::ByteSizeLong,
            &ReplayEvent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ReplayEvent, _impl_._cached_size_),
        false,
    },
    &ReplayEvent::kDescriptorMethods,
    &descriptor_table_replay_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ReplayEvent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 6, 5, 0, 2> ReplayEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReplayEvent, _impl_._has_bits_),
    0, // no _extensions_
    6, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::ReplayEvent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float time_seconds = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(ReplayEvent, _impl_.time_seconds_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float time_seconds = 1;
    {PROTOBUF_FIELD_OFFSET(ReplayEvent, _impl_.time_seconds_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // .aim.KillTargetEvent kill_target = 2;
    {PROTOBUF_FIELD_OFFSET(ReplayEvent, _impl_.type_.kill_target_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .aim.RemoveTargetEvent remove_target = 3;
    {PROTOBUF_FIELD_OFFSET(ReplayEvent, _impl_.type_.remove_target_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .aim.AddTargetEvent add_target = 4;
    {PROTOBUF_FIELD_OFFSET(ReplayEvent, _impl_.type_.add_target_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .aim.ShotFiredEvent shot_fired = 5;
    {PROTOBUF_FIELD_OFFSET(ReplayEvent, _impl_.type_.shot_fired_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .aim.MoveLinearTargetEvent move_linear_target = 6;
    {PROTOBUF_FIELD_OFFSET(ReplayEvent, _impl_.type_.move_linear_target_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::aim::KillTargetEvent>()},
    {::_pbi::TcParser::GetTable<::aim::RemoveTargetEvent>()},
    {::_pbi::TcParser::GetTable<::aim::AddTargetEvent>()},
    {::_pbi::TcParser::GetTable<::aim::ShotFiredEvent>()},
    {::_pbi::TcParser::GetTable<::aim::MoveLinearTargetEvent>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ReplayEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.ReplayEvent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_seconds_ = 0;
  clear_type();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ReplayEvent::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ReplayEvent& this_ = static_cast<const ReplayEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ReplayEvent::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ReplayEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.ReplayEvent)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // float time_seconds = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_time_seconds(), target);
          }

          switch (this_.type_case()) {
            case kKillTarget: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.type_.kill_target_, this_._impl_.type_.kill_target_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRemoveTarget: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.type_.remove_target_, this_._impl_.type_.remove_target_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAddTarget: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.type_.add_target_, this_._impl_.type_.add_target_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kShotFired: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.type_.shot_fired_, this_._impl_.type_.shot_fired_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMoveLinearTarget: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.type_.move_linear_target_, this_._impl_.type_.move_linear_target_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.ReplayEvent)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ReplayEvent::ByteSizeLong(const MessageLite& base) {
          const ReplayEvent& this_ = static_cast<const ReplayEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ReplayEvent::ByteSizeLong() const {
          const ReplayEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.ReplayEvent)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // float time_seconds = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 5;
            }
          }
          switch (this_.type_case()) {
            // .aim.KillTargetEvent kill_target = 2;
            case kKillTarget: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.kill_target_);
              break;
            }
            // .aim.RemoveTargetEvent remove_target = 3;
            case kRemoveTarget: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.remove_target_);
              break;
            }
            // .aim.AddTargetEvent add_target = 4;
            case kAddTarget: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.add_target_);
              break;
            }
            // .aim.ShotFiredEvent shot_fired = 5;
            case kShotFired: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.shot_fired_);
              break;
            }
            // .aim.MoveLinearTargetEvent move_linear_target = 6;
            case kMoveLinearTarget: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.move_linear_target_);
              break;
            }
            case TYPE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ReplayEvent::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReplayEvent*>(&to_msg);
  auto& from = static_cast<const ReplayEvent&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.ReplayEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.time_seconds_ = from._impl_.time_seconds_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_type();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kKillTarget: {
        if (oneof_needs_init) {
          _this->_impl_.type_.kill_target_ =
              ::google::protobuf::Message::CopyConstruct<::aim::KillTargetEvent>(arena, *from._impl_.type_.kill_target_);
        } else {
          _this->_impl_.type_.kill_target_->MergeFrom(from._internal_kill_target());
        }
        break;
      }
      case kRemoveTarget: {
        if (oneof_needs_init) {
          _this->_impl_.type_.remove_target_ =
              ::google::protobuf::Message::CopyConstruct<::aim::RemoveTargetEvent>(arena, *from._impl_.type_.remove_target_);
        } else {
          _this->_impl_.type_.remove_target_->MergeFrom(from._internal_remove_target());
        }
        break;
      }
      case kAddTarget: {
        if (oneof_needs_init) {
          _this->_impl_.type_.add_target_ =
              ::google::protobuf::Message::CopyConstruct<::aim::AddTargetEvent>(arena, *from._impl_.type_.add_target_);
        } else {
          _this->_impl_.type_.add_target_->MergeFrom(from._internal_add_target());
        }
        break;
      }
      case kShotFired: {
        if (oneof_needs_init) {
          _this->_impl_.type_.shot_fired_ =
              ::google::protobuf::Message::CopyConstruct<::aim::ShotFiredEvent>(arena, *from._impl_.type_.shot_fired_);
        } else {
          _this->_impl_.type_.shot_fired_->MergeFrom(from._internal_shot_fired());
        }
        break;
      }
      case kMoveLinearTarget: {
        if (oneof_needs_init) {
          _this->_impl_.type_.move_linear_target_ =
              ::google::protobuf::Message::CopyConstruct<::aim::MoveLinearTargetEvent>(arena, *from._impl_.type_.move_linear_target_);
        } else {
          _this->_impl_.type_.move_linear_target_->MergeFrom(from._internal_move_linear_target());
        }
        break;
      }
      case TYPE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReplayEvent::CopyFrom(const ReplayEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.ReplayEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReplayEvent::InternalSwap(ReplayEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.time_seconds_, other->_impl_.time_seconds_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ReplayEvent::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Replay::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Replay>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Replay, _impl_._has_bits_);
};

void Replay::clear_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.room_ != nullptr) _impl_.room_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Replay::Replay(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.Replay)
}
inline PROTOBUF_NDEBUG_INLINE Replay::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::aim::Replay& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        pitch_yaws_{visibility, arena, from.pitch_yaws_},
        events_{visibility, arena, from.events_} {}

Replay::Replay(
    ::google::protobuf::Arena* arena,
    const Replay& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Replay* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.room_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::aim::Room>(
                              arena, *from._impl_.room_)
                        : nullptr;
  _impl_.replay_fps_ = from._impl_.replay_fps_;

  // @@protoc_insertion_point(copy_constructor:aim.Replay)
}
inline PROTOBUF_NDEBUG_INLINE Replay::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        pitch_yaws_{visibility, arena},
        events_{visibility, arena} {}

inline void Replay::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_),
           0,
           offsetof(Impl_, replay_fps_) -
               offsetof(Impl_, room_) +
               sizeof(Impl_::replay_fps_));
}
Replay::~Replay() {
  // @@protoc_insertion_point(destructor:aim.Replay)
  SharedDtor(*this);
}
inline void Replay::SharedDtor(MessageLite& self) {
  Replay& this_ = static_cast<Replay&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.room_;
  this_._impl_.~Impl_();
}

inline void* Replay::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Replay(arena);
}
constexpr auto Replay::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Replay, _impl_.pitch_yaws_) +
          decltype(Replay::_impl_.pitch_yaws_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Replay, _impl_.events_) +
          decltype(Replay::_impl_.events_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Replay), alignof(Replay), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Replay::PlacementNew_,
                                 sizeof(Replay),
                                 alignof(Replay));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Replay::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Replay_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Replay::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Replay>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Replay::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Replay>(), &Replay::ByteSizeLong,
            &Replay::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Replay, _impl_._cached_size_),
        false,
    },
    &Replay::kDescriptorMethods,
    &descriptor_table_replay_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Replay::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> Replay::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Replay, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::Replay>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .aim.ReplayEvent events = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(Replay, _impl_.events_)}},
    // .aim.Room room = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Replay, _impl_.room_)}},
    // int32 replay_fps = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Replay, _impl_.replay_fps_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Replay, _impl_.replay_fps_)}},
    // repeated float pitch_yaws = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Replay, _impl_.pitch_yaws_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .aim.Room room = 1;
    {PROTOBUF_FIELD_OFFSET(Replay, _impl_.room_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 replay_fps = 2;
    {PROTOBUF_FIELD_OFFSET(Replay, _impl_.replay_fps_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated float pitch_yaws = 3;
    {PROTOBUF_FIELD_OFFSET(Replay, _impl_.pitch_yaws_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated .aim.ReplayEvent events = 4;
    {PROTOBUF_FIELD_OFFSET(Replay, _impl_.events_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::aim::Room>()},
    {::_pbi::TcParser::GetTable<::aim::ReplayEvent>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Replay::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.Replay)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pitch_yaws_.Clear();
  _impl_.events_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.room_ != nullptr);
    _impl_.room_->Clear();
  }
  _impl_.replay_fps_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Replay::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Replay& this_ = static_cast<const Replay&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Replay::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Replay& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.Replay)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .aim.Room room = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.room_, this_._impl_.room_->GetCachedSize(), target,
                stream);
          }

          // int32 replay_fps = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_replay_fps(), target);
          }

          // repeated float pitch_yaws = 3;
          if (this_._internal_pitch_yaws_size() > 0) {
            target = stream->WriteFixedPacked(3, this_._internal_pitch_yaws(), target);
          }

          // repeated .aim.ReplayEvent events = 4;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_events_size());
               i < n; i++) {
            const auto& repfield = this_._internal_events().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.Replay)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Replay::ByteSizeLong(const MessageLite& base) {
          const Replay& this_ = static_cast<const Replay&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Replay::ByteSizeLong() const {
          const Replay& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.Replay)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float pitch_yaws = 3;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_pitch_yaws_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated .aim.ReplayEvent events = 4;
            {
              total_size += 1UL * this_._internal_events_size();
              for (const auto& msg : this_._internal_events()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .aim.Room room = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.room_);
            }
            // int32 replay_fps = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_replay_fps());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Replay::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Replay*>(&to_msg);
  auto& from = static_cast<const Replay&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.Replay)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_pitch_yaws()->MergeFrom(from._internal_pitch_yaws());
  _this->_internal_mutable_events()->MergeFrom(
      from._internal_events());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.room_ != nullptr);
      if (_this->_impl_.room_ == nullptr) {
        _this->_impl_.room_ =
            ::google::protobuf::Message::CopyConstruct<::aim::Room>(arena, *from._impl_.room_);
      } else {
        _this->_impl_.room_->MergeFrom(*from._impl_.room_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.replay_fps_ = from._impl_.replay_fps_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Replay::CopyFrom(const Replay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.Replay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Replay::InternalSwap(Replay* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pitch_yaws_.InternalSwap(&other->_impl_.pitch_yaws_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Replay, _impl_.replay_fps_)
      + sizeof(Replay::_impl_.replay_fps_)
      - PROTOBUF_FIELD_OFFSET(Replay, _impl_.room_)>(
          reinterpret_cast<char*>(&_impl_.room_),
          reinterpret_cast<char*>(&other->_impl_.room_));
}

::google::protobuf::Metadata Replay::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace aim
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_replay_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
