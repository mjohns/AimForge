// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: settings.proto
// Protobuf C++ Version: 5.29.3

#include "settings.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace aim {

inline constexpr ScenarioSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        theme_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        crosshair_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cm_per_360_{0},
        metronome_bpm_{0},
        crosshair_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ScenarioSettings::ScenarioSettings(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ScenarioSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioSettingsDefaultTypeInternal() {}
  union {
    ScenarioSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioSettingsDefaultTypeInternal _ScenarioSettings_default_instance_;

inline constexpr PlusCrosshair::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rounding_{0},
        horizontal_size_{0},
        vertical_size_{0},
        thickness_{0},
        outline_thickness_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlusCrosshair::PlusCrosshair(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlusCrosshairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlusCrosshairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlusCrosshairDefaultTypeInternal() {}
  union {
    PlusCrosshair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlusCrosshairDefaultTypeInternal _PlusCrosshair_default_instance_;

inline constexpr DotCrosshair::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        draw_outline_{false} {}

template <typename>
PROTOBUF_CONSTEXPR DotCrosshair::DotCrosshair(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DotCrosshairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DotCrosshairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DotCrosshairDefaultTypeInternal() {}
  union {
    DotCrosshair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DotCrosshairDefaultTypeInternal _DotCrosshair_default_instance_;

inline constexpr Crosshair::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Crosshair::Crosshair(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CrosshairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrosshairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrosshairDefaultTypeInternal() {}
  union {
    Crosshair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrosshairDefaultTypeInternal _Crosshair_default_instance_;

inline constexpr Settings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        saved_crosshairs_{},
        theme_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_crosshair_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dpi_{0},
        cm_per_360_{0},
        metronome_bpm_{0},
        crosshair_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Settings::Settings(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SettingsDefaultTypeInternal() {}
  union {
    Settings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SettingsDefaultTypeInternal _Settings_default_instance_;
}  // namespace aim
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_settings_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_settings_2eproto = nullptr;
const ::uint32_t
    TableStruct_settings_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::aim::DotCrosshair, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::DotCrosshair, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::DotCrosshair, _impl_.draw_outline_),
        0,
        PROTOBUF_FIELD_OFFSET(::aim::PlusCrosshair, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::PlusCrosshair, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::PlusCrosshair, _impl_.rounding_),
        PROTOBUF_FIELD_OFFSET(::aim::PlusCrosshair, _impl_.horizontal_size_),
        PROTOBUF_FIELD_OFFSET(::aim::PlusCrosshair, _impl_.vertical_size_),
        PROTOBUF_FIELD_OFFSET(::aim::PlusCrosshair, _impl_.thickness_),
        PROTOBUF_FIELD_OFFSET(::aim::PlusCrosshair, _impl_.outline_thickness_),
        0,
        1,
        2,
        3,
        4,
        PROTOBUF_FIELD_OFFSET(::aim::Crosshair, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::Crosshair, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::aim::Crosshair, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::Crosshair, _impl_.name_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::aim::Crosshair, _impl_.type_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::aim::Settings, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::Settings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::Settings, _impl_.dpi_),
        PROTOBUF_FIELD_OFFSET(::aim::Settings, _impl_.cm_per_360_),
        PROTOBUF_FIELD_OFFSET(::aim::Settings, _impl_.theme_name_),
        PROTOBUF_FIELD_OFFSET(::aim::Settings, _impl_.metronome_bpm_),
        PROTOBUF_FIELD_OFFSET(::aim::Settings, _impl_.crosshair_size_),
        PROTOBUF_FIELD_OFFSET(::aim::Settings, _impl_.current_crosshair_name_),
        PROTOBUF_FIELD_OFFSET(::aim::Settings, _impl_.saved_crosshairs_),
        2,
        3,
        0,
        4,
        5,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::aim::ScenarioSettings, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::aim::ScenarioSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::aim::ScenarioSettings, _impl_.cm_per_360_),
        PROTOBUF_FIELD_OFFSET(::aim::ScenarioSettings, _impl_.theme_name_),
        PROTOBUF_FIELD_OFFSET(::aim::ScenarioSettings, _impl_.metronome_bpm_),
        PROTOBUF_FIELD_OFFSET(::aim::ScenarioSettings, _impl_.crosshair_size_),
        PROTOBUF_FIELD_OFFSET(::aim::ScenarioSettings, _impl_.crosshair_name_),
        2,
        0,
        3,
        4,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 9, -1, sizeof(::aim::DotCrosshair)},
        {10, 23, -1, sizeof(::aim::PlusCrosshair)},
        {28, 40, -1, sizeof(::aim::Crosshair)},
        {43, 58, -1, sizeof(::aim::Settings)},
        {65, 78, -1, sizeof(::aim::ScenarioSettings)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::aim::_DotCrosshair_default_instance_._instance,
    &::aim::_PlusCrosshair_default_instance_._instance,
    &::aim::_Crosshair_default_instance_._instance,
    &::aim::_Settings_default_instance_._instance,
    &::aim::_ScenarioSettings_default_instance_._instance,
};
const char descriptor_table_protodef_settings_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\016settings.proto\022\003aim\"$\n\014DotCrosshair\022\024\n"
    "\014draw_outline\030\001 \001(\010\"\177\n\rPlusCrosshair\022\020\n\010"
    "rounding\030\001 \001(\002\022\027\n\017horizontal_size\030\002 \001(\002\022"
    "\025\n\rvertical_size\030\003 \001(\002\022\021\n\tthickness\030\004 \001("
    "\002\022\031\n\021outline_thickness\030\005 \001(\002\"g\n\tCrosshai"
    "r\022\014\n\004name\030\001 \001(\t\022 \n\003dot\030\003 \001(\0132\021.aim.DotCr"
    "osshairH\000\022\"\n\004plus\030\004 \001(\0132\022.aim.PlusCrossh"
    "airH\000B\006\n\004type\"\270\001\n\010Settings\022\013\n\003dpi\030\001 \001(\002\022"
    "\022\n\ncm_per_360\030\002 \001(\002\022\022\n\ntheme_name\030\003 \001(\t\022"
    "\025\n\rmetronome_bpm\030\004 \001(\002\022\026\n\016crosshair_size"
    "\030\005 \001(\002\022\036\n\026current_crosshair_name\030\006 \001(\t\022("
    "\n\020saved_crosshairs\030\007 \003(\0132\016.aim.Crosshair"
    "\"\201\001\n\020ScenarioSettings\022\022\n\ncm_per_360\030\001 \001("
    "\002\022\022\n\ntheme_name\030\002 \001(\t\022\025\n\rmetronome_bpm\030\003"
    " \001(\002\022\026\n\016crosshair_size\030\004 \001(\002\022\026\n\016crosshai"
    "r_name\030\005 \001(\tb\010editionsp\350\007"
};
static ::absl::once_flag descriptor_table_settings_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_settings_2eproto = {
    false,
    false,
    625,
    descriptor_table_protodef_settings_2eproto,
    "settings.proto",
    &descriptor_table_settings_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_settings_2eproto::offsets,
    file_level_enum_descriptors_settings_2eproto,
    file_level_service_descriptors_settings_2eproto,
};
namespace aim {
// ===================================================================

class DotCrosshair::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DotCrosshair>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DotCrosshair, _impl_._has_bits_);
};

DotCrosshair::DotCrosshair(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.DotCrosshair)
}
DotCrosshair::DotCrosshair(
    ::google::protobuf::Arena* arena, const DotCrosshair& from)
    : DotCrosshair(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE DotCrosshair::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DotCrosshair::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.draw_outline_ = {};
}
DotCrosshair::~DotCrosshair() {
  // @@protoc_insertion_point(destructor:aim.DotCrosshair)
  SharedDtor(*this);
}
inline void DotCrosshair::SharedDtor(MessageLite& self) {
  DotCrosshair& this_ = static_cast<DotCrosshair&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* DotCrosshair::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DotCrosshair(arena);
}
constexpr auto DotCrosshair::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DotCrosshair),
                                            alignof(DotCrosshair));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DotCrosshair::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DotCrosshair_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DotCrosshair::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DotCrosshair>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DotCrosshair::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DotCrosshair>(), &DotCrosshair::ByteSizeLong,
            &DotCrosshair::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DotCrosshair, _impl_._cached_size_),
        false,
    },
    &DotCrosshair::kDescriptorMethods,
    &descriptor_table_settings_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DotCrosshair::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> DotCrosshair::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DotCrosshair, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::DotCrosshair>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool draw_outline = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DotCrosshair, _impl_.draw_outline_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(DotCrosshair, _impl_.draw_outline_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool draw_outline = 1;
    {PROTOBUF_FIELD_OFFSET(DotCrosshair, _impl_.draw_outline_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void DotCrosshair::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.DotCrosshair)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.draw_outline_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DotCrosshair::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DotCrosshair& this_ = static_cast<const DotCrosshair&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DotCrosshair::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DotCrosshair& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.DotCrosshair)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // bool draw_outline = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_draw_outline(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.DotCrosshair)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DotCrosshair::ByteSizeLong(const MessageLite& base) {
          const DotCrosshair& this_ = static_cast<const DotCrosshair&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DotCrosshair::ByteSizeLong() const {
          const DotCrosshair& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.DotCrosshair)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // bool draw_outline = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DotCrosshair::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DotCrosshair*>(&to_msg);
  auto& from = static_cast<const DotCrosshair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.DotCrosshair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.draw_outline_ = from._impl_.draw_outline_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DotCrosshair::CopyFrom(const DotCrosshair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.DotCrosshair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DotCrosshair::InternalSwap(DotCrosshair* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.draw_outline_, other->_impl_.draw_outline_);
}

::google::protobuf::Metadata DotCrosshair::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PlusCrosshair::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PlusCrosshair>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_._has_bits_);
};

PlusCrosshair::PlusCrosshair(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.PlusCrosshair)
}
PlusCrosshair::PlusCrosshair(
    ::google::protobuf::Arena* arena, const PlusCrosshair& from)
    : PlusCrosshair(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PlusCrosshair::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PlusCrosshair::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rounding_),
           0,
           offsetof(Impl_, outline_thickness_) -
               offsetof(Impl_, rounding_) +
               sizeof(Impl_::outline_thickness_));
}
PlusCrosshair::~PlusCrosshair() {
  // @@protoc_insertion_point(destructor:aim.PlusCrosshair)
  SharedDtor(*this);
}
inline void PlusCrosshair::SharedDtor(MessageLite& self) {
  PlusCrosshair& this_ = static_cast<PlusCrosshair&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PlusCrosshair::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PlusCrosshair(arena);
}
constexpr auto PlusCrosshair::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PlusCrosshair),
                                            alignof(PlusCrosshair));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PlusCrosshair::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PlusCrosshair_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PlusCrosshair::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PlusCrosshair>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PlusCrosshair::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PlusCrosshair>(), &PlusCrosshair::ByteSizeLong,
            &PlusCrosshair::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_._cached_size_),
        false,
    },
    &PlusCrosshair::kDescriptorMethods,
    &descriptor_table_settings_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PlusCrosshair::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> PlusCrosshair::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::PlusCrosshair>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float rounding = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_.rounding_)}},
    // float horizontal_size = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_.horizontal_size_)}},
    // float vertical_size = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_.vertical_size_)}},
    // float thickness = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_.thickness_)}},
    // float outline_thickness = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_.outline_thickness_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float rounding = 1;
    {PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_.rounding_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float horizontal_size = 2;
    {PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_.horizontal_size_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float vertical_size = 3;
    {PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_.vertical_size_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float thickness = 4;
    {PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_.thickness_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float outline_thickness = 5;
    {PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_.outline_thickness_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PlusCrosshair::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.PlusCrosshair)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.rounding_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.outline_thickness_) -
        reinterpret_cast<char*>(&_impl_.rounding_)) + sizeof(_impl_.outline_thickness_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PlusCrosshair::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PlusCrosshair& this_ = static_cast<const PlusCrosshair&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PlusCrosshair::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PlusCrosshair& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.PlusCrosshair)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // float rounding = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_rounding(), target);
          }

          // float horizontal_size = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_horizontal_size(), target);
          }

          // float vertical_size = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_vertical_size(), target);
          }

          // float thickness = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_thickness(), target);
          }

          // float outline_thickness = 5;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_outline_thickness(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.PlusCrosshair)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PlusCrosshair::ByteSizeLong(const MessageLite& base) {
          const PlusCrosshair& this_ = static_cast<const PlusCrosshair&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PlusCrosshair::ByteSizeLong() const {
          const PlusCrosshair& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.PlusCrosshair)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // float rounding = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 5;
            }
            // float horizontal_size = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 5;
            }
            // float vertical_size = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
            // float thickness = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
            // float outline_thickness = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PlusCrosshair::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlusCrosshair*>(&to_msg);
  auto& from = static_cast<const PlusCrosshair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.PlusCrosshair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rounding_ = from._impl_.rounding_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.horizontal_size_ = from._impl_.horizontal_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.vertical_size_ = from._impl_.vertical_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.thickness_ = from._impl_.thickness_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.outline_thickness_ = from._impl_.outline_thickness_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlusCrosshair::CopyFrom(const PlusCrosshair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.PlusCrosshair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlusCrosshair::InternalSwap(PlusCrosshair* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_.outline_thickness_)
      + sizeof(PlusCrosshair::_impl_.outline_thickness_)
      - PROTOBUF_FIELD_OFFSET(PlusCrosshair, _impl_.rounding_)>(
          reinterpret_cast<char*>(&_impl_.rounding_),
          reinterpret_cast<char*>(&other->_impl_.rounding_));
}

::google::protobuf::Metadata PlusCrosshair::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Crosshair::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Crosshair>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Crosshair, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::aim::Crosshair, _impl_._oneof_case_);
};

void Crosshair::set_allocated_dot(::aim::DotCrosshair* dot) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (dot) {
    ::google::protobuf::Arena* submessage_arena = dot->GetArena();
    if (message_arena != submessage_arena) {
      dot = ::google::protobuf::internal::GetOwnedMessage(message_arena, dot, submessage_arena);
    }
    set_has_dot();
    _impl_.type_.dot_ = dot;
  }
  // @@protoc_insertion_point(field_set_allocated:aim.Crosshair.dot)
}
void Crosshair::set_allocated_plus(::aim::PlusCrosshair* plus) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (plus) {
    ::google::protobuf::Arena* submessage_arena = plus->GetArena();
    if (message_arena != submessage_arena) {
      plus = ::google::protobuf::internal::GetOwnedMessage(message_arena, plus, submessage_arena);
    }
    set_has_plus();
    _impl_.type_.plus_ = plus;
  }
  // @@protoc_insertion_point(field_set_allocated:aim.Crosshair.plus)
}
Crosshair::Crosshair(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.Crosshair)
}
inline PROTOBUF_NDEBUG_INLINE Crosshair::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::aim::Crosshair& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        type_{},
        _oneof_case_{from._oneof_case_[0]} {}

Crosshair::Crosshair(
    ::google::protobuf::Arena* arena,
    const Crosshair& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Crosshair* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (type_case()) {
    case TYPE_NOT_SET:
      break;
      case kDot:
        _impl_.type_.dot_ = ::google::protobuf::Message::CopyConstruct<::aim::DotCrosshair>(arena, *from._impl_.type_.dot_);
        break;
      case kPlus:
        _impl_.type_.plus_ = ::google::protobuf::Message::CopyConstruct<::aim::PlusCrosshair>(arena, *from._impl_.type_.plus_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:aim.Crosshair)
}
inline PROTOBUF_NDEBUG_INLINE Crosshair::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena),
        type_{},
        _oneof_case_{} {}

inline void Crosshair::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Crosshair::~Crosshair() {
  // @@protoc_insertion_point(destructor:aim.Crosshair)
  SharedDtor(*this);
}
inline void Crosshair::SharedDtor(MessageLite& self) {
  Crosshair& this_ = static_cast<Crosshair&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  if (this_.has_type()) {
    this_.clear_type();
  }
  this_._impl_.~Impl_();
}

void Crosshair::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:aim.Crosshair)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (type_case()) {
    case kDot: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.dot_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.dot_);
      }
      break;
    }
    case kPlus: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.plus_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.plus_);
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


inline void* Crosshair::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Crosshair(arena);
}
constexpr auto Crosshair::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Crosshair),
                                            alignof(Crosshair));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Crosshair::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Crosshair_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Crosshair::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Crosshair>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Crosshair::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Crosshair>(), &Crosshair::ByteSizeLong,
            &Crosshair::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Crosshair, _impl_._cached_size_),
        false,
    },
    &Crosshair::kDescriptorMethods,
    &descriptor_table_settings_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Crosshair::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 2, 26, 2> Crosshair::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Crosshair, _impl_._has_bits_),
    0, // no _extensions_
    4, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967282,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::Crosshair>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Crosshair, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(Crosshair, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .aim.DotCrosshair dot = 3;
    {PROTOBUF_FIELD_OFFSET(Crosshair, _impl_.type_.dot_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .aim.PlusCrosshair plus = 4;
    {PROTOBUF_FIELD_OFFSET(Crosshair, _impl_.type_.plus_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::aim::DotCrosshair>()},
    {::_pbi::TcParser::GetTable<::aim::PlusCrosshair>()},
  }}, {{
    "\15\4\0\0\0\0\0\0"
    "aim.Crosshair"
    "name"
  }},
};

PROTOBUF_NOINLINE void Crosshair::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.Crosshair)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  clear_type();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Crosshair::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Crosshair& this_ = static_cast<const Crosshair&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Crosshair::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Crosshair& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.Crosshair)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // string name = 1;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "aim.Crosshair.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          switch (this_.type_case()) {
            case kDot: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.type_.dot_, this_._impl_.type_.dot_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPlus: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.type_.plus_, this_._impl_.type_.plus_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.Crosshair)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Crosshair::ByteSizeLong(const MessageLite& base) {
          const Crosshair& this_ = static_cast<const Crosshair&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Crosshair::ByteSizeLong() const {
          const Crosshair& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.Crosshair)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string name = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
          switch (this_.type_case()) {
            // .aim.DotCrosshair dot = 3;
            case kDot: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.dot_);
              break;
            }
            // .aim.PlusCrosshair plus = 4;
            case kPlus: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.plus_);
              break;
            }
            case TYPE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Crosshair::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Crosshair*>(&to_msg);
  auto& from = static_cast<const Crosshair&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.Crosshair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_type();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kDot: {
        if (oneof_needs_init) {
          _this->_impl_.type_.dot_ =
              ::google::protobuf::Message::CopyConstruct<::aim::DotCrosshair>(arena, *from._impl_.type_.dot_);
        } else {
          _this->_impl_.type_.dot_->MergeFrom(from._internal_dot());
        }
        break;
      }
      case kPlus: {
        if (oneof_needs_init) {
          _this->_impl_.type_.plus_ =
              ::google::protobuf::Message::CopyConstruct<::aim::PlusCrosshair>(arena, *from._impl_.type_.plus_);
        } else {
          _this->_impl_.type_.plus_->MergeFrom(from._internal_plus());
        }
        break;
      }
      case TYPE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Crosshair::CopyFrom(const Crosshair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.Crosshair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Crosshair::InternalSwap(Crosshair* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Crosshair::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Settings::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Settings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Settings, _impl_._has_bits_);
};

Settings::Settings(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.Settings)
}
inline PROTOBUF_NDEBUG_INLINE Settings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::aim::Settings& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        saved_crosshairs_{visibility, arena, from.saved_crosshairs_},
        theme_name_(arena, from.theme_name_),
        current_crosshair_name_(arena, from.current_crosshair_name_) {}

Settings::Settings(
    ::google::protobuf::Arena* arena,
    const Settings& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Settings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dpi_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, dpi_),
           offsetof(Impl_, crosshair_size_) -
               offsetof(Impl_, dpi_) +
               sizeof(Impl_::crosshair_size_));

  // @@protoc_insertion_point(copy_constructor:aim.Settings)
}
inline PROTOBUF_NDEBUG_INLINE Settings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        saved_crosshairs_{visibility, arena},
        theme_name_(arena),
        current_crosshair_name_(arena) {}

inline void Settings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dpi_),
           0,
           offsetof(Impl_, crosshair_size_) -
               offsetof(Impl_, dpi_) +
               sizeof(Impl_::crosshair_size_));
}
Settings::~Settings() {
  // @@protoc_insertion_point(destructor:aim.Settings)
  SharedDtor(*this);
}
inline void Settings::SharedDtor(MessageLite& self) {
  Settings& this_ = static_cast<Settings&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.theme_name_.Destroy();
  this_._impl_.current_crosshair_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Settings::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Settings(arena);
}
constexpr auto Settings::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Settings, _impl_.saved_crosshairs_) +
          decltype(Settings::_impl_.saved_crosshairs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Settings), alignof(Settings), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Settings::PlacementNew_,
                                 sizeof(Settings),
                                 alignof(Settings));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Settings::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Settings_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Settings::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Settings>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Settings::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Settings>(), &Settings::ByteSizeLong,
            &Settings::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Settings, _impl_._cached_size_),
        false,
    },
    &Settings::kDescriptorMethods,
    &descriptor_table_settings_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Settings::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 53, 2> Settings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Settings, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::Settings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float dpi = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 2, 0, PROTOBUF_FIELD_OFFSET(Settings, _impl_.dpi_)}},
    // float cm_per_360 = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 3, 0, PROTOBUF_FIELD_OFFSET(Settings, _impl_.cm_per_360_)}},
    // string theme_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Settings, _impl_.theme_name_)}},
    // float metronome_bpm = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 4, 0, PROTOBUF_FIELD_OFFSET(Settings, _impl_.metronome_bpm_)}},
    // float crosshair_size = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 5, 0, PROTOBUF_FIELD_OFFSET(Settings, _impl_.crosshair_size_)}},
    // string current_crosshair_name = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 1, 0, PROTOBUF_FIELD_OFFSET(Settings, _impl_.current_crosshair_name_)}},
    // repeated .aim.Crosshair saved_crosshairs = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Settings, _impl_.saved_crosshairs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float dpi = 1;
    {PROTOBUF_FIELD_OFFSET(Settings, _impl_.dpi_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float cm_per_360 = 2;
    {PROTOBUF_FIELD_OFFSET(Settings, _impl_.cm_per_360_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // string theme_name = 3;
    {PROTOBUF_FIELD_OFFSET(Settings, _impl_.theme_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float metronome_bpm = 4;
    {PROTOBUF_FIELD_OFFSET(Settings, _impl_.metronome_bpm_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float crosshair_size = 5;
    {PROTOBUF_FIELD_OFFSET(Settings, _impl_.crosshair_size_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // string current_crosshair_name = 6;
    {PROTOBUF_FIELD_OFFSET(Settings, _impl_.current_crosshair_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .aim.Crosshair saved_crosshairs = 7;
    {PROTOBUF_FIELD_OFFSET(Settings, _impl_.saved_crosshairs_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::aim::Crosshair>()},
  }}, {{
    "\14\0\0\12\0\0\26\0"
    "aim.Settings"
    "theme_name"
    "current_crosshair_name"
  }},
};

PROTOBUF_NOINLINE void Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.Settings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.saved_crosshairs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.theme_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.current_crosshair_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.dpi_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.crosshair_size_) -
        reinterpret_cast<char*>(&_impl_.dpi_)) + sizeof(_impl_.crosshair_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Settings::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Settings& this_ = static_cast<const Settings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Settings::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Settings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.Settings)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // float dpi = 1;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_dpi(), target);
          }

          // float cm_per_360 = 2;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_cm_per_360(), target);
          }

          // string theme_name = 3;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_theme_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "aim.Settings.theme_name");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // float metronome_bpm = 4;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_metronome_bpm(), target);
          }

          // float crosshair_size = 5;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_crosshair_size(), target);
          }

          // string current_crosshair_name = 6;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_current_crosshair_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "aim.Settings.current_crosshair_name");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // repeated .aim.Crosshair saved_crosshairs = 7;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_saved_crosshairs_size());
               i < n; i++) {
            const auto& repfield = this_._internal_saved_crosshairs().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    7, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.Settings)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Settings::ByteSizeLong(const MessageLite& base) {
          const Settings& this_ = static_cast<const Settings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Settings::ByteSizeLong() const {
          const Settings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.Settings)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .aim.Crosshair saved_crosshairs = 7;
            {
              total_size += 1UL * this_._internal_saved_crosshairs_size();
              for (const auto& msg : this_._internal_saved_crosshairs()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000003fu) {
            // string theme_name = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_theme_name());
            }
            // string current_crosshair_name = 6;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_current_crosshair_name());
            }
            // float dpi = 1;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
            // float cm_per_360 = 2;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
            // float metronome_bpm = 4;
            if (cached_has_bits & 0x00000010u) {
              total_size += 5;
            }
            // float crosshair_size = 5;
            if (cached_has_bits & 0x00000020u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Settings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Settings*>(&to_msg);
  auto& from = static_cast<const Settings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.Settings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_saved_crosshairs()->MergeFrom(
      from._internal_saved_crosshairs());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_theme_name(from._internal_theme_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_current_crosshair_name(from._internal_current_crosshair_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dpi_ = from._impl_.dpi_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cm_per_360_ = from._impl_.cm_per_360_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.metronome_bpm_ = from._impl_.metronome_bpm_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.crosshair_size_ = from._impl_.crosshair_size_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Settings::CopyFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Settings::InternalSwap(Settings* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.saved_crosshairs_.InternalSwap(&other->_impl_.saved_crosshairs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.theme_name_, &other->_impl_.theme_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.current_crosshair_name_, &other->_impl_.current_crosshair_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Settings, _impl_.crosshair_size_)
      + sizeof(Settings::_impl_.crosshair_size_)
      - PROTOBUF_FIELD_OFFSET(Settings, _impl_.dpi_)>(
          reinterpret_cast<char*>(&_impl_.dpi_),
          reinterpret_cast<char*>(&other->_impl_.dpi_));
}

::google::protobuf::Metadata Settings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ScenarioSettings::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ScenarioSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_._has_bits_);
};

ScenarioSettings::ScenarioSettings(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:aim.ScenarioSettings)
}
inline PROTOBUF_NDEBUG_INLINE ScenarioSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::aim::ScenarioSettings& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        theme_name_(arena, from.theme_name_),
        crosshair_name_(arena, from.crosshair_name_) {}

ScenarioSettings::ScenarioSettings(
    ::google::protobuf::Arena* arena,
    const ScenarioSettings& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ScenarioSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cm_per_360_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, cm_per_360_),
           offsetof(Impl_, crosshair_size_) -
               offsetof(Impl_, cm_per_360_) +
               sizeof(Impl_::crosshair_size_));

  // @@protoc_insertion_point(copy_constructor:aim.ScenarioSettings)
}
inline PROTOBUF_NDEBUG_INLINE ScenarioSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        theme_name_(arena),
        crosshair_name_(arena) {}

inline void ScenarioSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cm_per_360_),
           0,
           offsetof(Impl_, crosshair_size_) -
               offsetof(Impl_, cm_per_360_) +
               sizeof(Impl_::crosshair_size_));
}
ScenarioSettings::~ScenarioSettings() {
  // @@protoc_insertion_point(destructor:aim.ScenarioSettings)
  SharedDtor(*this);
}
inline void ScenarioSettings::SharedDtor(MessageLite& self) {
  ScenarioSettings& this_ = static_cast<ScenarioSettings&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.theme_name_.Destroy();
  this_._impl_.crosshair_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ScenarioSettings::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ScenarioSettings(arena);
}
constexpr auto ScenarioSettings::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ScenarioSettings),
                                            alignof(ScenarioSettings));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ScenarioSettings::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ScenarioSettings_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ScenarioSettings::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ScenarioSettings>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ScenarioSettings::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ScenarioSettings>(), &ScenarioSettings::ByteSizeLong,
            &ScenarioSettings::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_._cached_size_),
        false,
    },
    &ScenarioSettings::kDescriptorMethods,
    &descriptor_table_settings_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ScenarioSettings::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 53, 2> ScenarioSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::aim::ScenarioSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float cm_per_360 = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 2, 0, PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_.cm_per_360_)}},
    // string theme_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_.theme_name_)}},
    // float metronome_bpm = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 3, 0, PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_.metronome_bpm_)}},
    // float crosshair_size = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 4, 0, PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_.crosshair_size_)}},
    // string crosshair_name = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_.crosshair_name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float cm_per_360 = 1;
    {PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_.cm_per_360_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // string theme_name = 2;
    {PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_.theme_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float metronome_bpm = 3;
    {PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_.metronome_bpm_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float crosshair_size = 4;
    {PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_.crosshair_size_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // string crosshair_name = 5;
    {PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_.crosshair_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\0\12\0\0\16\0\0"
    "aim.ScenarioSettings"
    "theme_name"
    "crosshair_name"
  }},
};

PROTOBUF_NOINLINE void ScenarioSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:aim.ScenarioSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.theme_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.crosshair_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.cm_per_360_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.crosshair_size_) -
        reinterpret_cast<char*>(&_impl_.cm_per_360_)) + sizeof(_impl_.crosshair_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ScenarioSettings::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ScenarioSettings& this_ = static_cast<const ScenarioSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ScenarioSettings::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ScenarioSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:aim.ScenarioSettings)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // float cm_per_360 = 1;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_cm_per_360(), target);
          }

          // string theme_name = 2;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_theme_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "aim.ScenarioSettings.theme_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // float metronome_bpm = 3;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_metronome_bpm(), target);
          }

          // float crosshair_size = 4;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_crosshair_size(), target);
          }

          // string crosshair_name = 5;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_crosshair_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "aim.ScenarioSettings.crosshair_name");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:aim.ScenarioSettings)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ScenarioSettings::ByteSizeLong(const MessageLite& base) {
          const ScenarioSettings& this_ = static_cast<const ScenarioSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ScenarioSettings::ByteSizeLong() const {
          const ScenarioSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:aim.ScenarioSettings)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // string theme_name = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_theme_name());
            }
            // string crosshair_name = 5;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_crosshair_name());
            }
            // float cm_per_360 = 1;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
            // float metronome_bpm = 3;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
            // float crosshair_size = 4;
            if (cached_has_bits & 0x00000010u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ScenarioSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ScenarioSettings*>(&to_msg);
  auto& from = static_cast<const ScenarioSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aim.ScenarioSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_theme_name(from._internal_theme_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_crosshair_name(from._internal_crosshair_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cm_per_360_ = from._impl_.cm_per_360_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.metronome_bpm_ = from._impl_.metronome_bpm_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.crosshair_size_ = from._impl_.crosshair_size_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioSettings::CopyFrom(const ScenarioSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aim.ScenarioSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ScenarioSettings::InternalSwap(ScenarioSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.theme_name_, &other->_impl_.theme_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.crosshair_name_, &other->_impl_.crosshair_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_.crosshair_size_)
      + sizeof(ScenarioSettings::_impl_.crosshair_size_)
      - PROTOBUF_FIELD_OFFSET(ScenarioSettings, _impl_.cm_per_360_)>(
          reinterpret_cast<char*>(&_impl_.cm_per_360_),
          reinterpret_cast<char*>(&other->_impl_.cm_per_360_));
}

::google::protobuf::Metadata ScenarioSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace aim
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_settings_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
