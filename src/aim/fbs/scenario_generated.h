// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENARIO_AIM_H_
#define FLATBUFFERS_GENERATED_SCENARIO_AIM_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 24,
             "Non-compatible flatbuffers version included");

namespace aim {

struct Scenario;
struct ScenarioBuilder;
struct ScenarioT;

struct ScenarioFile;
struct ScenarioFileBuilder;
struct ScenarioFileT;

struct ScenarioT : public ::flatbuffers::NativeTable {
  typedef Scenario TableType;
  std::string display_name{};
  std::string id{};
};

struct Scenario FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ScenarioT NativeTableType;
  typedef ScenarioBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DISPLAY_NAME = 4,
    VT_ID = 6
  };
  const ::flatbuffers::String *display_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DISPLAY_NAME);
  }
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DISPLAY_NAME) &&
           verifier.VerifyString(display_name()) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           verifier.EndTable();
  }
  ScenarioT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ScenarioT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Scenario> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ScenarioT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ScenarioBuilder {
  typedef Scenario Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_display_name(::flatbuffers::Offset<::flatbuffers::String> display_name) {
    fbb_.AddOffset(Scenario::VT_DISPLAY_NAME, display_name);
  }
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Scenario::VT_ID, id);
  }
  explicit ScenarioBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Scenario> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Scenario>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Scenario> CreateScenario(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> display_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0) {
  ScenarioBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_display_name(display_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Scenario> CreateScenarioDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *display_name = nullptr,
    const char *id = nullptr) {
  auto display_name__ = display_name ? _fbb.CreateString(display_name) : 0;
  auto id__ = id ? _fbb.CreateString(id) : 0;
  return aim::CreateScenario(
      _fbb,
      display_name__,
      id__);
}

::flatbuffers::Offset<Scenario> CreateScenario(::flatbuffers::FlatBufferBuilder &_fbb, const ScenarioT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ScenarioFileT : public ::flatbuffers::NativeTable {
  typedef ScenarioFile TableType;
  std::unique_ptr<aim::ScenarioT> scenario{};
  ScenarioFileT() = default;
  ScenarioFileT(const ScenarioFileT &o);
  ScenarioFileT(ScenarioFileT&&) FLATBUFFERS_NOEXCEPT = default;
  ScenarioFileT &operator=(ScenarioFileT o) FLATBUFFERS_NOEXCEPT;
};

struct ScenarioFile FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ScenarioFileT NativeTableType;
  typedef ScenarioFileBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SCENARIO = 4
  };
  const aim::Scenario *scenario() const {
    return GetPointer<const aim::Scenario *>(VT_SCENARIO);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SCENARIO) &&
           verifier.VerifyTable(scenario()) &&
           verifier.EndTable();
  }
  ScenarioFileT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ScenarioFileT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ScenarioFile> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ScenarioFileT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ScenarioFileBuilder {
  typedef ScenarioFile Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_scenario(::flatbuffers::Offset<aim::Scenario> scenario) {
    fbb_.AddOffset(ScenarioFile::VT_SCENARIO, scenario);
  }
  explicit ScenarioFileBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ScenarioFile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ScenarioFile>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ScenarioFile> CreateScenarioFile(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<aim::Scenario> scenario = 0) {
  ScenarioFileBuilder builder_(_fbb);
  builder_.add_scenario(scenario);
  return builder_.Finish();
}

::flatbuffers::Offset<ScenarioFile> CreateScenarioFile(::flatbuffers::FlatBufferBuilder &_fbb, const ScenarioFileT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ScenarioT *Scenario::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ScenarioT>(new ScenarioT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Scenario::UnPackTo(ScenarioT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = display_name(); if (_e) _o->display_name = _e->str(); }
  { auto _e = id(); if (_e) _o->id = _e->str(); }
}

inline ::flatbuffers::Offset<Scenario> Scenario::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ScenarioT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateScenario(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Scenario> CreateScenario(::flatbuffers::FlatBufferBuilder &_fbb, const ScenarioT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ScenarioT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _display_name = _o->display_name.empty() ? 0 : _fbb.CreateString(_o->display_name);
  auto _id = _o->id.empty() ? 0 : _fbb.CreateString(_o->id);
  return aim::CreateScenario(
      _fbb,
      _display_name,
      _id);
}

inline ScenarioFileT::ScenarioFileT(const ScenarioFileT &o)
      : scenario((o.scenario) ? new aim::ScenarioT(*o.scenario) : nullptr) {
}

inline ScenarioFileT &ScenarioFileT::operator=(ScenarioFileT o) FLATBUFFERS_NOEXCEPT {
  std::swap(scenario, o.scenario);
  return *this;
}

inline ScenarioFileT *ScenarioFile::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ScenarioFileT>(new ScenarioFileT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ScenarioFile::UnPackTo(ScenarioFileT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = scenario(); if (_e) { if(_o->scenario) { _e->UnPackTo(_o->scenario.get(), _resolver); } else { _o->scenario = std::unique_ptr<aim::ScenarioT>(_e->UnPack(_resolver)); } } else if (_o->scenario) { _o->scenario.reset(); } }
}

inline ::flatbuffers::Offset<ScenarioFile> ScenarioFile::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ScenarioFileT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateScenarioFile(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ScenarioFile> CreateScenarioFile(::flatbuffers::FlatBufferBuilder &_fbb, const ScenarioFileT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ScenarioFileT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _scenario = _o->scenario ? CreateScenario(_fbb, _o->scenario.get(), _rehasher) : 0;
  return aim::CreateScenarioFile(
      _fbb,
      _scenario);
}

inline const aim::ScenarioFile *GetScenarioFile(const void *buf) {
  return ::flatbuffers::GetRoot<aim::ScenarioFile>(buf);
}

inline const aim::ScenarioFile *GetSizePrefixedScenarioFile(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<aim::ScenarioFile>(buf);
}

inline const char *ScenarioFileIdentifier() {
  return "SCNR";
}

inline bool ScenarioFileBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ScenarioFileIdentifier());
}

inline bool SizePrefixedScenarioFileBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ScenarioFileIdentifier(), true);
}

inline bool VerifyScenarioFileBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<aim::ScenarioFile>(ScenarioFileIdentifier());
}

inline bool VerifySizePrefixedScenarioFileBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<aim::ScenarioFile>(ScenarioFileIdentifier());
}

inline void FinishScenarioFileBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<aim::ScenarioFile> root) {
  fbb.Finish(root, ScenarioFileIdentifier());
}

inline void FinishSizePrefixedScenarioFileBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<aim::ScenarioFile> root) {
  fbb.FinishSizePrefixed(root, ScenarioFileIdentifier());
}

inline std::unique_ptr<aim::ScenarioFileT> UnPackScenarioFile(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<aim::ScenarioFileT>(GetScenarioFile(buf)->UnPack(res));
}

inline std::unique_ptr<aim::ScenarioFileT> UnPackSizePrefixedScenarioFile(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<aim::ScenarioFileT>(GetSizePrefixedScenarioFile(buf)->UnPack(res));
}

}  // namespace aim

#endif  // FLATBUFFERS_GENERATED_SCENARIO_AIM_H_
