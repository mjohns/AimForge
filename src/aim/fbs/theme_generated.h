// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_THEME_AIM_H_
#define FLATBUFFERS_GENERATED_THEME_AIM_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 24,
             "Non-compatible flatbuffers version included");

#include "common_generated.h"

namespace aim {

struct Theme;
struct ThemeBuilder;
struct ThemeT;

struct SimpleRoomTheme;
struct SimpleRoomThemeBuilder;
struct SimpleRoomThemeT;

struct ThemeT : public ::flatbuffers::NativeTable {
  typedef Theme TableType;
  std::string name{};
  std::unique_ptr<aim::SimpleRoomThemeT> simple_room{};
  std::unique_ptr<aim::StoredRgb> target_color{};
  ThemeT() = default;
  ThemeT(const ThemeT &o);
  ThemeT(ThemeT&&) FLATBUFFERS_NOEXCEPT = default;
  ThemeT &operator=(ThemeT o) FLATBUFFERS_NOEXCEPT;
};

struct Theme FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ThemeT NativeTableType;
  typedef ThemeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SIMPLE_ROOM = 6,
    VT_TARGET_COLOR = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const aim::SimpleRoomTheme *simple_room() const {
    return GetPointer<const aim::SimpleRoomTheme *>(VT_SIMPLE_ROOM);
  }
  const aim::StoredRgb *target_color() const {
    return GetStruct<const aim::StoredRgb *>(VT_TARGET_COLOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_SIMPLE_ROOM) &&
           verifier.VerifyTable(simple_room()) &&
           VerifyField<aim::StoredRgb>(verifier, VT_TARGET_COLOR, 1) &&
           verifier.EndTable();
  }
  ThemeT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ThemeT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Theme> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ThemeT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ThemeBuilder {
  typedef Theme Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Theme::VT_NAME, name);
  }
  void add_simple_room(::flatbuffers::Offset<aim::SimpleRoomTheme> simple_room) {
    fbb_.AddOffset(Theme::VT_SIMPLE_ROOM, simple_room);
  }
  void add_target_color(const aim::StoredRgb *target_color) {
    fbb_.AddStruct(Theme::VT_TARGET_COLOR, target_color);
  }
  explicit ThemeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Theme> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Theme>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Theme> CreateTheme(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<aim::SimpleRoomTheme> simple_room = 0,
    const aim::StoredRgb *target_color = nullptr) {
  ThemeBuilder builder_(_fbb);
  builder_.add_target_color(target_color);
  builder_.add_simple_room(simple_room);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Theme> CreateThemeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    ::flatbuffers::Offset<aim::SimpleRoomTheme> simple_room = 0,
    const aim::StoredRgb *target_color = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return aim::CreateTheme(
      _fbb,
      name__,
      simple_room,
      target_color);
}

::flatbuffers::Offset<Theme> CreateTheme(::flatbuffers::FlatBufferBuilder &_fbb, const ThemeT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SimpleRoomThemeT : public ::flatbuffers::NativeTable {
  typedef SimpleRoomTheme TableType;
  std::unique_ptr<aim::StoredRgb> wall_color{};
  std::unique_ptr<aim::StoredRgb> floor_color{};
  std::unique_ptr<aim::StoredRgb> side_color{};
  std::unique_ptr<aim::StoredRgb> ceiling_color{};
  SimpleRoomThemeT() = default;
  SimpleRoomThemeT(const SimpleRoomThemeT &o);
  SimpleRoomThemeT(SimpleRoomThemeT&&) FLATBUFFERS_NOEXCEPT = default;
  SimpleRoomThemeT &operator=(SimpleRoomThemeT o) FLATBUFFERS_NOEXCEPT;
};

struct SimpleRoomTheme FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SimpleRoomThemeT NativeTableType;
  typedef SimpleRoomThemeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WALL_COLOR = 4,
    VT_FLOOR_COLOR = 6,
    VT_SIDE_COLOR = 8,
    VT_CEILING_COLOR = 10
  };
  const aim::StoredRgb *wall_color() const {
    return GetStruct<const aim::StoredRgb *>(VT_WALL_COLOR);
  }
  const aim::StoredRgb *floor_color() const {
    return GetStruct<const aim::StoredRgb *>(VT_FLOOR_COLOR);
  }
  const aim::StoredRgb *side_color() const {
    return GetStruct<const aim::StoredRgb *>(VT_SIDE_COLOR);
  }
  const aim::StoredRgb *ceiling_color() const {
    return GetStruct<const aim::StoredRgb *>(VT_CEILING_COLOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<aim::StoredRgb>(verifier, VT_WALL_COLOR, 1) &&
           VerifyField<aim::StoredRgb>(verifier, VT_FLOOR_COLOR, 1) &&
           VerifyField<aim::StoredRgb>(verifier, VT_SIDE_COLOR, 1) &&
           VerifyField<aim::StoredRgb>(verifier, VT_CEILING_COLOR, 1) &&
           verifier.EndTable();
  }
  SimpleRoomThemeT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SimpleRoomThemeT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<SimpleRoomTheme> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const SimpleRoomThemeT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SimpleRoomThemeBuilder {
  typedef SimpleRoomTheme Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_wall_color(const aim::StoredRgb *wall_color) {
    fbb_.AddStruct(SimpleRoomTheme::VT_WALL_COLOR, wall_color);
  }
  void add_floor_color(const aim::StoredRgb *floor_color) {
    fbb_.AddStruct(SimpleRoomTheme::VT_FLOOR_COLOR, floor_color);
  }
  void add_side_color(const aim::StoredRgb *side_color) {
    fbb_.AddStruct(SimpleRoomTheme::VT_SIDE_COLOR, side_color);
  }
  void add_ceiling_color(const aim::StoredRgb *ceiling_color) {
    fbb_.AddStruct(SimpleRoomTheme::VT_CEILING_COLOR, ceiling_color);
  }
  explicit SimpleRoomThemeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SimpleRoomTheme> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SimpleRoomTheme>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SimpleRoomTheme> CreateSimpleRoomTheme(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const aim::StoredRgb *wall_color = nullptr,
    const aim::StoredRgb *floor_color = nullptr,
    const aim::StoredRgb *side_color = nullptr,
    const aim::StoredRgb *ceiling_color = nullptr) {
  SimpleRoomThemeBuilder builder_(_fbb);
  builder_.add_ceiling_color(ceiling_color);
  builder_.add_side_color(side_color);
  builder_.add_floor_color(floor_color);
  builder_.add_wall_color(wall_color);
  return builder_.Finish();
}

::flatbuffers::Offset<SimpleRoomTheme> CreateSimpleRoomTheme(::flatbuffers::FlatBufferBuilder &_fbb, const SimpleRoomThemeT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ThemeT::ThemeT(const ThemeT &o)
      : name(o.name),
        simple_room((o.simple_room) ? new aim::SimpleRoomThemeT(*o.simple_room) : nullptr),
        target_color((o.target_color) ? new aim::StoredRgb(*o.target_color) : nullptr) {
}

inline ThemeT &ThemeT::operator=(ThemeT o) FLATBUFFERS_NOEXCEPT {
  std::swap(name, o.name);
  std::swap(simple_room, o.simple_room);
  std::swap(target_color, o.target_color);
  return *this;
}

inline ThemeT *Theme::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ThemeT>(new ThemeT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Theme::UnPackTo(ThemeT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = simple_room(); if (_e) { if(_o->simple_room) { _e->UnPackTo(_o->simple_room.get(), _resolver); } else { _o->simple_room = std::unique_ptr<aim::SimpleRoomThemeT>(_e->UnPack(_resolver)); } } else if (_o->simple_room) { _o->simple_room.reset(); } }
  { auto _e = target_color(); if (_e) _o->target_color = std::unique_ptr<aim::StoredRgb>(new aim::StoredRgb(*_e)); }
}

inline ::flatbuffers::Offset<Theme> Theme::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ThemeT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTheme(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Theme> CreateTheme(::flatbuffers::FlatBufferBuilder &_fbb, const ThemeT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ThemeT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _simple_room = _o->simple_room ? CreateSimpleRoomTheme(_fbb, _o->simple_room.get(), _rehasher) : 0;
  auto _target_color = _o->target_color ? _o->target_color.get() : nullptr;
  return aim::CreateTheme(
      _fbb,
      _name,
      _simple_room,
      _target_color);
}

inline SimpleRoomThemeT::SimpleRoomThemeT(const SimpleRoomThemeT &o)
      : wall_color((o.wall_color) ? new aim::StoredRgb(*o.wall_color) : nullptr),
        floor_color((o.floor_color) ? new aim::StoredRgb(*o.floor_color) : nullptr),
        side_color((o.side_color) ? new aim::StoredRgb(*o.side_color) : nullptr),
        ceiling_color((o.ceiling_color) ? new aim::StoredRgb(*o.ceiling_color) : nullptr) {
}

inline SimpleRoomThemeT &SimpleRoomThemeT::operator=(SimpleRoomThemeT o) FLATBUFFERS_NOEXCEPT {
  std::swap(wall_color, o.wall_color);
  std::swap(floor_color, o.floor_color);
  std::swap(side_color, o.side_color);
  std::swap(ceiling_color, o.ceiling_color);
  return *this;
}

inline SimpleRoomThemeT *SimpleRoomTheme::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SimpleRoomThemeT>(new SimpleRoomThemeT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SimpleRoomTheme::UnPackTo(SimpleRoomThemeT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = wall_color(); if (_e) _o->wall_color = std::unique_ptr<aim::StoredRgb>(new aim::StoredRgb(*_e)); }
  { auto _e = floor_color(); if (_e) _o->floor_color = std::unique_ptr<aim::StoredRgb>(new aim::StoredRgb(*_e)); }
  { auto _e = side_color(); if (_e) _o->side_color = std::unique_ptr<aim::StoredRgb>(new aim::StoredRgb(*_e)); }
  { auto _e = ceiling_color(); if (_e) _o->ceiling_color = std::unique_ptr<aim::StoredRgb>(new aim::StoredRgb(*_e)); }
}

inline ::flatbuffers::Offset<SimpleRoomTheme> SimpleRoomTheme::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const SimpleRoomThemeT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSimpleRoomTheme(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<SimpleRoomTheme> CreateSimpleRoomTheme(::flatbuffers::FlatBufferBuilder &_fbb, const SimpleRoomThemeT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const SimpleRoomThemeT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _wall_color = _o->wall_color ? _o->wall_color.get() : nullptr;
  auto _floor_color = _o->floor_color ? _o->floor_color.get() : nullptr;
  auto _side_color = _o->side_color ? _o->side_color.get() : nullptr;
  auto _ceiling_color = _o->ceiling_color ? _o->ceiling_color.get() : nullptr;
  return aim::CreateSimpleRoomTheme(
      _fbb,
      _wall_color,
      _floor_color,
      _side_color,
      _ceiling_color);
}

inline const aim::Theme *GetTheme(const void *buf) {
  return ::flatbuffers::GetRoot<aim::Theme>(buf);
}

inline const aim::Theme *GetSizePrefixedTheme(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<aim::Theme>(buf);
}

inline bool VerifyThemeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<aim::Theme>(nullptr);
}

inline bool VerifySizePrefixedThemeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<aim::Theme>(nullptr);
}

inline void FinishThemeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<aim::Theme> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedThemeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<aim::Theme> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<aim::ThemeT> UnPackTheme(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<aim::ThemeT>(GetTheme(buf)->UnPack(res));
}

inline std::unique_ptr<aim::ThemeT> UnPackSizePrefixedTheme(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<aim::ThemeT>(GetSizePrefixedTheme(buf)->UnPack(res));
}

}  // namespace aim

#endif  // FLATBUFFERS_GENERATED_THEME_AIM_H_
