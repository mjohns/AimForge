// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REPLAY_H_
#define FLATBUFFERS_GENERATED_REPLAY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 24,
             "Non-compatible flatbuffers version included");

struct Replay;
struct ReplayBuilder;
struct ReplayT;

struct ReplayT : public ::flatbuffers::NativeTable {
  typedef Replay TableType;
  std::string name{};
  int32_t health = 0;
};

struct Replay FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReplayT NativeTableType;
  typedef ReplayBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_HEALTH = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int32_t health() const {
    return GetField<int32_t>(VT_HEALTH, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_HEALTH, 4) &&
           verifier.EndTable();
  }
  ReplayT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ReplayT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Replay> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ReplayT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ReplayBuilder {
  typedef Replay Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Replay::VT_NAME, name);
  }
  void add_health(int32_t health) {
    fbb_.AddElement<int32_t>(Replay::VT_HEALTH, health, 0);
  }
  explicit ReplayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Replay> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Replay>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Replay> CreateReplay(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int32_t health = 0) {
  ReplayBuilder builder_(_fbb);
  builder_.add_health(health);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Replay> CreateReplayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t health = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return CreateReplay(
      _fbb,
      name__,
      health);
}

::flatbuffers::Offset<Replay> CreateReplay(::flatbuffers::FlatBufferBuilder &_fbb, const ReplayT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ReplayT *Replay::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ReplayT>(new ReplayT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Replay::UnPackTo(ReplayT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = health(); _o->health = _e; }
}

inline ::flatbuffers::Offset<Replay> Replay::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ReplayT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateReplay(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Replay> CreateReplay(::flatbuffers::FlatBufferBuilder &_fbb, const ReplayT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ReplayT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _health = _o->health;
  return CreateReplay(
      _fbb,
      _name,
      _health);
}

inline const Replay *GetReplay(const void *buf) {
  return ::flatbuffers::GetRoot<Replay>(buf);
}

inline const Replay *GetSizePrefixedReplay(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Replay>(buf);
}

inline const char *ReplayIdentifier() {
  return "AIMR";
}

inline bool ReplayBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ReplayIdentifier());
}

inline bool SizePrefixedReplayBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ReplayIdentifier(), true);
}

inline bool VerifyReplayBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Replay>(ReplayIdentifier());
}

inline bool VerifySizePrefixedReplayBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Replay>(ReplayIdentifier());
}

inline void FinishReplayBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Replay> root) {
  fbb.Finish(root, ReplayIdentifier());
}

inline void FinishSizePrefixedReplayBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Replay> root) {
  fbb.FinishSizePrefixed(root, ReplayIdentifier());
}

inline std::unique_ptr<ReplayT> UnPackReplay(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ReplayT>(GetReplay(buf)->UnPack(res));
}

inline std::unique_ptr<ReplayT> UnPackSizePrefixedReplay(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ReplayT>(GetSizePrefixedReplay(buf)->UnPack(res));
}

#endif  // FLATBUFFERS_GENERATED_REPLAY_H_
